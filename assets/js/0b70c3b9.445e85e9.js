"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[9205],{59539:(n,a,e)=>{e.r(a),e.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var i=e(77071),r=e(74848),t=e(28453);const s={slug:"spring-boot-rest-api-pagination",title:"Cara membuat Pagination REST API di Spring Boot",authors:"topekox",tags:["springboot","rest","spring"]},o=void 0,l={authorsImageUrls:[void 0]},d=[{value:"Collection vs Pagination",id:"collection-vs-pagination",level:2},{value:"Menambahkan Pagination di Aplikasi Spring Boot",id:"menambahkan-pagination-di-aplikasi-spring-boot",level:2},{value:"Konfigurasi menggunakan PagedModel",id:"konfigurasi-menggunakan-pagedmodel",level:2},{value:"\ud83d\udd25 Testing",id:"-testing",level:2},{value:"\ud83c\udf10 Baca Juga",id:"-baca-juga",level:2}];function p(n){const a={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.p,{children:["Pada project-project Springboot sebelumnya, ketika melakukan Respose REST API find all untuk menampilkan semua data, biasanya kita menggunakan return Collection misalnya ",(0,r.jsx)(a.code,{children:"List"}),". Cara ini tidak salah tapi bukan merupakan best practice apabila data yang dipanggil dalam jumlah yang banyak, misal datanya ada 1 juta, maka data tersebut akan dipanggil semua. Tentunya cara ini tidak efisien dan akan membuat aplikasi kita menjadi lambat."]}),"\n",(0,r.jsx)(a.p,{children:"Untuk mengatasi Overload Data tersebut maka kita dapat menggunakan pagination. Dengan menggunakan pagination akan memungkinkan untuk menampilkan data secara bertahap, sehingga mengurangi beban memori dan meningkatkan kinerja aplikasi."}),"\n",(0,r.jsx)(a.h2,{id:"collection-vs-pagination",children:"Collection vs Pagination"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Collection"}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-json",children:'[\r\n  {\r\n    "id": 1,\r\n    "name": "Iphone 16",\r\n    "description": "The new generation Iphone",\r\n    "price": 20000000\r\n  },\r\n  {\r\n    "id": 2,\r\n    "name": "Asus ROG",\r\n    "description": "The best laptop for gaming",\r\n    "price": 30000000\r\n  }\r\n]\n'})}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Pagination"}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-json",children:'{\r\n  "content": [\r\n    {\r\n      "id": 1,\r\n      "name": "Iphone 16",\r\n      "description": "The new Iphone Generation",\r\n      "price": 15000000\r\n    },\r\n    {\r\n    "id": 2,\r\n    "name": "Asus ROG",\r\n    "description": "The best laptop for gaming",\r\n    "price": 30000000\r\n  }\r\n  ],\r\n  "page": {\r\n    "size": 20,\r\n    "number": 0,\r\n    "totalElements": 2,\r\n    "totalPages": 1\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(a.p,{children:"Dengan menggunakan Collection data akan ditampilkan sesuai result dari operasi select all, sedangkan menggunakan pagination akan lebih terfilter karna data yang ditampilkan dapat dicustom jumlahnya."}),"\n",(0,r.jsx)(a.h2,{id:"menambahkan-pagination-di-aplikasi-spring-boot",children:"Menambahkan Pagination di Aplikasi Spring Boot"}),"\n",(0,r.jsxs)(a.p,{children:["Untuk menambahkan pagination pada aplikasi Spring Boot application, kita cukup melakukan masuk ke dalam layer Controller dengan menambahkan parameter dengan type ",(0,r.jsx)(a.code,{children:"Pageable"}),"."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'@RestController\r\n@RequestMapping("/api/product")\r\npublic class ProductController {\r\n\r\n    private final ProductService productService;\r\n\r\n    public ProductController(ProductService productService) {\r\n        this.productService = productService;\r\n    }\r\n\r\n    @GetMapping\r\n    public ResponseEntity<Page<ProductDTO>> getAll(\r\n            @SortDefault(sort = "id") @PageableDefault(size = 20) final Pageable pageable) {\r\n        return ResponseEntity.ok(productService.findAll(pageable));\r\n    }\r\n\r\n    // ...\r\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Pada contoh di atas kita set default data yang ditampilkan adalah 20 dan sorting data berdasarkan ",(0,r.jsx)(a.code,{children:"id"})," secara ascending. Parameter query dari ",(0,r.jsx)(a.code,{children:"page"}),", ",(0,r.jsx)(a.code,{children:"size"})," dan ",(0,r.jsx)(a.code,{children:"sort"})," akan secara otomatis dibuat oleh Spring Boot."]}),"\n",(0,r.jsx)(a.p,{children:"Untuk layer Service akan memanggil data Page yang berasal dari Repository yang di mapping ke DTO."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"@Service\r\npublic class ProductService {\r\n\r\n    // ...\r\n\r\n    public Page<ProductDTO> findAll(final Pageable pageable) {\r\n        final Page<Product> page = productRepository.findAll(pageable);\r\n        return new PageImpl<>(page.getContent()\r\n                .stream()\r\n                .map(productMapper::toDTO)\r\n                .collect(Collectors.toList()),\r\n                pageable, page.getTotalElements());\r\n    }\r\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Sedangkan untuk layer Repository dengan meng-extends ",(0,r.jsx)(a.code,{children:"JpaRepository"}),", kita dapat memanggil object data dari database menggunakan ",(0,r.jsx)(a.code,{children:"findAll()"}),"."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"public interface ProductRepository extends JpaRepository<Product, Long> {\r\n}\n"})}),"\n",(0,r.jsx)(a.h2,{id:"konfigurasi-menggunakan-pagedmodel",children:"Konfigurasi menggunakan PagedModel"}),"\n",(0,r.jsx)(a.p,{children:"Namun ketika aplikasi dijalankan tanpa konfigurasi tambahan maka akan menghasilkan log warning seperti ini:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!\r\nFor a stable JSON structure, please use Spring Data's PagedModel or Spring HATEOAS and Spring Data's PagedResourcesAssembler.\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Hal ini terjadi class ",(0,r.jsx)(a.code,{children:"PageImpl"})," tidak diserialkan untuk dikembalikan menjadi REST API."]}),"\n",(0,r.jsx)(a.p,{children:"Untuk menghapus peringatan tersebut, kita hanya perlu menambahkan anotasi berikut ke salah satu class konfigurasi yang ada atau membuat class konfigurasi baru:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"@Configuration\r\n@EnableSpringDataWebSupport(\r\n        pageSerializationMode = EnableSpringDataWebSupport.PageSerializationMode.VIA_DTO\r\n)\r\npublic class JacsonConfig {\r\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Konfigurasi di atas digunakan untuk secara otomatis mentransform ",(0,r.jsx)(a.code,{children:"PageImpl"})," menjadi ",(0,r.jsx)(a.code,{children:"PagedModel"}),"."]}),"\n",(0,r.jsx)(a.h2,{id:"-testing",children:"\ud83d\udd25 Testing"}),"\n",(0,r.jsx)(a.p,{children:"Konfigurasi pada layer controller di atas kita membuat secara default menampilkan data 20, misalnya kita punya data 5 maka akan ditampilkan semua datanya:"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:["URL: ",(0,r.jsx)(a.code,{children:"http://localhost:8080/api/product"})]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:"Body response:"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-json",children:'{\r\n  "content": [\r\n    {\r\n      "id": 1,\r\n      "name": "Iphone 16",\r\n      "description": "The new Iphone Generation",\r\n      "price": 15000000\r\n    },\r\n    {\r\n      "id": 2,\r\n      "name": "Asus ROG",\r\n      "description": "The best laptop for gaming",\r\n      "price": 30000000\r\n    },\r\n    {\r\n      "id": 3,\r\n      "name": "Infinix Hot 50 Pro+",\r\n      "description": "The New Best Android Phone Low Price",\r\n      "price": 3000000\r\n    },\r\n    {\r\n      "id": 4,\r\n      "name": "Google Pixel 9",\r\n      "description": "The New Android Phone from Google",\r\n      "price": 15000000\r\n    },\r\n    {\r\n      "id": 5,\r\n      "name": "Samsung Galaxy S24 FE",\r\n      "description": "The New Android Phone from Samsung with Galaxy AI",\r\n      "price": 10000000\r\n    }\r\n  ],\r\n  "page": {\r\n    "size": 20,\r\n    "number": 0,\r\n    "totalElements": 5,\r\n    "totalPages": 1\r\n  }\r\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Informasi page secara otomatis akan digenerate oleh ",(0,r.jsx)(a.code,{children:"Page"})," Spring Boot, seperti:"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.code,{children:"size"})," = jumlah data element"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.code,{children:"number"})," = index page (index dimulai dari 0)"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.code,{children:"totalElements"})," = jumlah element dalam page yang sedang aktif"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.code,{children:"totalPages"})," = jumlah total page"]}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"Bagaimana kalo misalnya kita ingin custom data yang ingin ditampikan, contoh setiap page hanya ingin menampilkan 2 data saja, maka dari data di atas akan dibuat 3 page."}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:["URL: ",(0,r.jsx)(a.code,{children:"http://localhost:8080/api/product?size=2&page=0"})]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:"Body:"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-json",children:'{\r\n  "content": [\r\n    {\r\n      "id": 1,\r\n      "name": "Iphone 16",\r\n      "description": "The new Iphone Generation",\r\n      "price": 15000000\r\n    },\r\n    {\r\n      "id": 2,\r\n      "name": "Asus ROG",\r\n      "description": "The best laptop for gaming",\r\n      "price": 30000000\r\n    }\r\n  ],\r\n  "page": {\r\n    "size": 2,\r\n    "number": 0,\r\n    "totalElements": 5,\r\n    "totalPages": 3\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(a.admonition,{type:"info",children:(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:"INFO"}),": Index page dimulai dari 0."]})}),"\n",(0,r.jsxs)(a.p,{children:["Untuk pindah halaman page cukup mengganti value path variable, contoh berpindah ke page 1 ",(0,r.jsx)(a.code,{children:"http://localhost:8080/api/product?size=2&page=1"}),"."]}),"\n",(0,r.jsx)(a.h2,{id:"-baca-juga",children:"\ud83c\udf10 Baca Juga"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.a,{href:"https://bootify.io/spring-boot/pagination-in-spring-boot-rest-api.html",children:"https://bootify.io/spring-boot/pagination-in-spring-boot-rest-api.html"})}),"\n"]})]})}function c(n={}){const{wrapper:a}={...(0,t.R)(),...n.components};return a?(0,r.jsx)(a,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}},28453:(n,a,e)=>{e.d(a,{R:()=>s,x:()=>o});var i=e(96540);const r={},t=i.createContext(r);function s(n){const a=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(a):{...a,...n}}),[a,n])}function o(n){let a;return a=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),i.createElement(t.Provider,{value:a},n.children)}},77071:n=>{n.exports=JSON.parse('{"permalink":"/blog/spring-boot-rest-api-pagination","source":"@site/blog/2025-04-15-spring-boot-rest-api-pagination.md","title":"Cara membuat Pagination REST API di Spring Boot","description":"Pada project-project Springboot sebelumnya, ketika melakukan Respose REST API find all untuk menampilkan semua data, biasanya kita menggunakan return Collection misalnya List. Cara ini tidak salah tapi bukan merupakan best practice apabila data yang dipanggil dalam jumlah yang banyak, misal datanya ada 1 juta, maka data tersebut akan dipanggil semua. Tentunya cara ini tidak efisien dan akan membuat aplikasi kita menjadi lambat.","date":"2025-04-15T00:00:00.000Z","tags":[{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"rest","permalink":"/blog/tags/rest"},{"inline":true,"label":"spring","permalink":"/blog/tags/spring"}],"readingTime":3.905,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"spring-boot-rest-api-pagination","title":"Cara membuat Pagination REST API di Spring Boot","authors":"topekox","tags":["springboot","rest","spring"]},"unlisted":false,"prevItem":{"title":"Mengatasi konflik waktu / time yang berubah di Windows setelah boot dari Linux","permalink":"/blog/mengatasi-masalah-time-dualboot-windows-linux"},"nextItem":{"title":"Menjalankan PostgreSQL di Docker Container pada Windows Subsystem for Linux (WSL)","permalink":"/blog/postgres-docker-wsl"}}')}}]);