"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[6467],{30572:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>u,default:()=>c,frontMatter:()=>r,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"java-unit-test/test-di-dalam-test copy","title":"Test di dalam Test","description":"Saat membuat unit test, ada baiknya ukuran test class nya tidak terlalu besar, karena akan sulit di baca dan dimengerti. Jika test class sudah semakin besar, ada baiknya kita pecah menjadi beberapa test class, lalu kita grouping sesuai dengan jenis method test nya. JUnit mendukung pembuatan class test di dalam class test, jadi kita bisa memecah sebuah class test, tanpa harus membuat class di file berbeda, kita bisa cukup menggunakan inner class. Untuk memberi tahu bahwa inner class tersebut adalah test class, kita bisa menggunakan annotation @Nested.","source":"@site/tutorial/java/java-unit-test/13-test-di-dalam-test copy.md","sourceDirName":"java-unit-test","slug":"/java-unit-test/test-di-dalam-test copy","permalink":"/java/java-unit-test/test-di-dalam-test copy","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13,"title":"Test di dalam Test"},"sidebar":"tutorialSidebar","previous":{"title":"Lifecycle Unit Test","permalink":"/java/java-unit-test/lifecycle-test"},"next":{"title":"Informasi Test","permalink":"/java/java-unit-test/test-information"}}');var s=a(74848),i=a(28453);const r={sidebar_position:13,title:"Test di dalam Test"},u=void 0,d={},o=[];function l(t){const e={code:"code",img:"img",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:["Saat membuat unit test, ada baiknya ukuran test class nya tidak terlalu besar, karena akan sulit di baca dan dimengerti. Jika test class sudah semakin besar, ada baiknya kita pecah menjadi beberapa test class, lalu kita grouping sesuai dengan jenis method test nya. JUnit mendukung pembuatan class test di dalam class test, jadi kita bisa memecah sebuah class test, tanpa harus membuat class di file berbeda, kita bisa cukup menggunakan inner class. Untuk memberi tahu bahwa inner class tersebut adalah test class, kita bisa menggunakan annotation ",(0,s.jsx)(e.code,{children:"@Nested"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["Contoh penggunaan test di dalam test dengan menggunakan contoh ",(0,s.jsx)(e.code,{children:"Queue"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'import java.util.LinkedList;\r\nimport java.util.Queue;\r\n\r\nimport org.junit.jupiter.api.Assertions;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.DisplayName;\r\nimport org.junit.jupiter.api.Nested;\r\nimport org.junit.jupiter.api.Test;\r\n\r\n/**\r\n * Demo Queue: Test di dalam Test\r\n */\r\n\r\n@DisplayName("A Queue...")\r\npublic class DemoQueueTestInTest {\r\n\r\n\tprivate Queue<String> queue;\r\n\t\r\n\t@Nested\r\n\t@DisplayName("When New...")\r\n\tpublic class WhenNew {\r\n\t\t\r\n\t\t@BeforeEach\r\n\t\tvoid setUp() {\r\n\t\t\tqueue = new LinkedList<String>();\r\n\t\t}\r\n\t\t\r\n\t\t@Test\r\n\t\t@DisplayName("when offer/add element, size must 1")\r\n\t\tvoid addElement() {\r\n\t\t\tqueue.offer("Ucup");\r\n\t\t\tAssertions.assertEquals(1, queue.size());\r\n\t\t}\r\n\t\t\r\n\t\t@Test\r\n\t\t@DisplayName("when offer/add 2 element, size must 2")\r\n\t\tvoid addMoreElement() {\r\n\t\t\tqueue.offer("Ade");\r\n\t\t\tqueue.offer("Recky");\r\n\t\t\tAssertions.assertEquals(2, queue.size());\r\n\t\t}\r\n\t}\r\n\t\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Result:"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{alt:"Test in Test",src:a(76203).A+"",width:"502",height:"203"})})]})}function c(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(l,{...t})}):l(t)}},76203:(t,e,a)=>{a.d(e,{A:()=>n});const n=a.p+"assets/images/test-in-test-f2af7fae7ecdcc63f4678361a259888f.png"},28453:(t,e,a)=>{a.d(e,{R:()=>r,x:()=>u});var n=a(96540);const s={},i=n.createContext(s);function r(t){const e=n.useContext(i);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function u(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:r(t.components),n.createElement(i.Provider,{value:e},t.children)}}}]);