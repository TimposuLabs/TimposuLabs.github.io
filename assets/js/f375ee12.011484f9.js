"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[7761],{67730:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"java-unit-test/lifecycle-test","title":"Lifecycle Unit Test","description":"Secara default, lifecycle (siklus hidup) object test adalah independent per method test, artinya object unit test  akan selalu dibuat baru per method unit test, oleh karena itu kita tidak bisa bergantung dengan method test lain. Cara pembuatan object test di JUnit ditentukan oleh annotation @TestInstance, dimana defaultnya adalah Lifecycle.PERMETHOD, artinya tiap method akan dibuat sebuah instance / object baru. Kita bisa merubahnya menjadi Lifecycle.PERCLASS jika mau, dengan demikian instance / object test haya dibuat sekali per class, dan method test akan menggunakan object test yang sama. Hal ini bisa kita manfaatkan ketika membuat test yang tergantung dengan test lain.","source":"@site/tutorial/java/java-unit-test/12-lifecycle-test.md","sourceDirName":"java-unit-test","slug":"/java-unit-test/lifecycle-test","permalink":"/java/java-unit-test/lifecycle-test","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12,"title":"Lifecycle Unit Test"},"sidebar":"tutorialSidebar","previous":{"title":"Sorted Unit Test","permalink":"/java/java-unit-test/sorted-test"},"next":{"title":"Test di dalam Test","permalink":"/java/java-unit-test/test-di-dalam-test copy"}}');var i=n(74848),s=n(28453);const r={sidebar_position:12,title:"Lifecycle Unit Test"},c=void 0,l={},o=[{value:"Keuntungan Instance Per Class",id:"keuntungan-instance-per-class",level:2}];function u(t){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["Secara default, lifecycle (siklus hidup) object test adalah independent per method test, artinya object unit test  akan selalu dibuat baru per method unit test, oleh karena itu kita tidak bisa bergantung dengan method test lain. Cara pembuatan object test di JUnit ditentukan oleh annotation ",(0,i.jsx)(e.code,{children:"@TestInstance"}),", dimana defaultnya adalah ",(0,i.jsx)(e.code,{children:"Lifecycle.PER_METHOD"}),", artinya tiap method akan dibuat sebuah instance / object baru. Kita bisa merubahnya menjadi ",(0,i.jsx)(e.code,{children:"Lifecycle.PER_CLASS"})," jika mau, dengan demikian instance / object test haya dibuat sekali per class, dan method test akan menggunakan object test yang sama. Hal ini bisa kita manfaatkan ketika membuat test yang tergantung dengan test lain."]}),"\n",(0,i.jsxs)(e.p,{children:["Secara default, walaupun kita tidak membuat annotation ",(0,i.jsx)(e.code,{children:"@TestInstance"}),", nilainya adalah ",(0,i.jsx)(e.code,{children:"Lifecycle.PER_METHOD"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"@TestInstance(Lifecycle.PER_METHOD)\n"})}),"\n",(0,i.jsx)(e.p,{children:"kita dapat menggantinya menjadi:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"@TestInstance(Lifecycle.PER_CLASS)\n"})}),"\n",(0,i.jsx)(e.p,{children:"Sehingga method unit test dapat menggunakan object yang sama antar method unit test."}),"\n",(0,i.jsx)(e.p,{children:"Contoh:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"import org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.TestInstance;\r\nimport org.junit.jupiter.api.TestInstance.Lifecycle;\r\n\r\n@TestInstance(Lifecycle.PER_CLASS)\r\npublic class DemoLifeCycleTest {\r\n\t\r\n\tprivate int counter = 0;\r\n\t\r\n\t@Test\r\n\tvoid testC() {\r\n\t\tcounter++;\r\n\t\tSystem.out.println(counter);\r\n\t}\r\n\t\r\n\t@Test\r\n\tvoid testA() {\r\n\t\tcounter++;\r\n\t\tSystem.out.println(counter);\r\n\t}\r\n\t\r\n\t@Test\r\n\tvoid testB() {\r\n\t\tcounter++;\r\n\t\tSystem.out.println(counter);\t\r\n\t}\r\n\r\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"Dengan menggunakan Lifecycle per class makan method unit test akan saling berhubungan satu sama lain."}),"\n",(0,i.jsx)(e.h2,{id:"keuntungan-instance-per-class",children:"Keuntungan Instance Per Class"}),"\n",(0,i.jsxs)(e.p,{children:["Salah satu keuntungan saat menggunakan ",(0,i.jsx)(e.code,{children:"Lifecycle.PER_CLASS"})," adalah, kita bisa menggunakan ",(0,i.jsx)(e.code,{children:"@BeforeAll"})," dan ",(0,i.jsx)(e.code,{children:"@AfterAll"})," di method biasa, tidak harus menggunakan function object  / static."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"@TestInstance(Lifecycle.PER_CLASS)\r\npublic class DemoLifeCycleTest {\r\n\t\r\n    private int counter = 0;\r\n\r\n    // mendefinisikan non-static @BeforeAll dan @AfterAll \r\n\t@BeforeAll\r\n\tvoid beforeAll() {\r\n\r\n\t}\r\n\r\n\t@AfterAll\r\n\tvoid afterAll() {\r\n\r\n\t}\r\n\r\n\t@Test\r\n\tvoid testC() {\r\n\t\tcounter++;\r\n\t\tSystem.out.println(counter);\r\n\t}\r\n\t\r\n\t@Test\r\n\tvoid testA() {\r\n\t\tcounter++;\r\n\t\tSystem.out.println(counter);\r\n\t}\r\n\t\r\n\t@Test\r\n\tvoid testB() {\r\n\t\tcounter++;\r\n\t\tSystem.out.println(counter);\t\r\n\t}\r\n\r\n}\n"})})]})}function d(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(u,{...t})}):u(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>r,x:()=>c});var a=n(96540);const i={},s=a.createContext(i);function r(t){const e=a.useContext(s);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:r(t.components),a.createElement(s.Provider,{value:e},t.children)}}}]);