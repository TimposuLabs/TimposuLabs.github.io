"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[3577],{92273:(a,n,e)=>{e.r(n),e.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"java-lambda/lambda-optional","title":"Lambda pada Optional","description":"Di Java 8, java menyediakan sebuah class baru bernama Optional class yang berada di package java.util. Class ini digunakan sebagai wrapper untuk value yang bisa bernilai null. Optional didesain agar kita lebih mudah ketika beroperasi dengan object yang bisa null. Karena NullPointerException adalah salah satu hal yang sering sekali ditemui oleh Programmer Java.","source":"@site/tutorial/java/java-lambda/08-lambda-optional.md","sourceDirName":"java-lambda","slug":"/java-lambda/lambda-optional","permalink":"/java/java-lambda/lambda-optional","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Lambda pada Optional"},"sidebar":"tutorialSidebar","previous":{"title":"Lambda Lazy Parameter","permalink":"/java/java-lambda/lambda-lazy-parameter"},"next":{"title":"Apache Maven","permalink":"/java/maven/"}}');var l=e(74848),r=e(28453);const t={sidebar_position:8,title:"Lambda pada Optional"},s=void 0,o={},p=[{value:"Cara Tradisional",id:"cara-tradisional",level:3},{value:"Menggunakan <code>Optional</code> class",id:"menggunakan-optional-class",level:3},{value:"Baca Juga",id:"baca-juga",level:2}];function d(a){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...a.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["Di Java 8, java menyediakan sebuah class baru bernama ",(0,l.jsx)(n.code,{children:"Optional"})," class yang berada di package ",(0,l.jsx)(n.code,{children:"java.util"}),". Class ini digunakan sebagai wrapper untuk value yang bisa bernilai null. Optional didesain agar kita lebih mudah ketika beroperasi dengan object yang bisa null. Karena ",(0,l.jsx)(n.code,{children:"NullPointerException"})," adalah salah satu hal yang sering sekali ditemui oleh Programmer Java."]}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsxs)(n.p,{children:["\ud83d\udcd1 Baca Juga: ",(0,l.jsx)(n.a,{href:"/blog/java-optional",children:"Tips menangani NullPointerException dengan Java Optional"})]})}),"\n",(0,l.jsx)(n.h3,{id:"cara-tradisional",children:"Cara Tradisional"}),"\n",(0,l.jsxs)(n.p,{children:["Pada cara tradisional yang biasa dilakukan para programmer Java dengan melakukan validasi manual menggunakan kondisi ",(0,l.jsx)(n.code,{children:"if"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"String message;\r\n\r\nif (message != null) {\r\n    String messageUpper = message.toUpperCase();\r\n    System.out.println(messageUpper);\r\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Jika ",(0,l.jsx)(n.code,{children:"message"})," langsung digunakan tanpa melakukan validasi seperti contoh di atas maka akan menimbulkan ",(0,l.jsx)(n.code,{children:"NullPointerException"}),"."]}),"\n",(0,l.jsxs)(n.h3,{id:"menggunakan-optional-class",children:["Menggunakan ",(0,l.jsx)(n.code,{children:"Optional"})," class"]}),"\n",(0,l.jsxs)(n.p,{children:["Dengan menggunakan Optional program kita tidak akan menimbulkan ",(0,l.jsx)(n.code,{children:"NullPointerException"}),", tanpa melakukan validasi seperti cara sebelumnya."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"Optional<String> optionalName = Optional.ofNullable(message);  // melakukan validasi message null atau tidak\r\nOptional<String> optionalNameUpper = optionalName.map((value) -> value.toUpperCase()); // mengubah data string menjadi uppercase\r\noptionalNameUpper.ifPresent(value -> System.out.println(value)); // jika data ada maka di cetak\n"})}),"\n",(0,l.jsx)(n.p,{children:"Kelihatan memang lebih repot tapi sebenarnya aliran programmnya bisa dibuat lebih sederhana seperti berikut:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'Optional.ofNullable(message)\r\n        .map(String::toUpperCase)\r\n//                .ifPresent(System.out::println); //satu kondisi\r\n        .ifPresentOrElse(\r\n                value -> System.out.println(value),\r\n                () -> System.out.println("Data message kosong")\r\n        );\n'})}),"\n",(0,l.jsx)(n.p,{children:"Berikut contoh menggunakan Lambda expression pada Optional Class:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'import java.util.Optional;\r\n\r\npublic class DemoLamdaOptionalClass {\r\n    public static void main(String[] args) {\r\n        sayHello("Hallo Bro!!!"); // menggunakan lambda\r\n        sayHelloLambdaSimple("Masuk Pak Eko"); // menggunakan lambda yang lebih simple\r\n    }\r\n\r\n    static void sayHello(String message) {\r\n        // menggunakan if check null\r\n//        if (message != null) {\r\n//            String messageUpper = message.toUpperCase();\r\n//            System.out.println(messageUpper);\r\n//        }\r\n\r\n        // menggunakan optional lambda\r\n        Optional<String> optionalName = Optional.ofNullable(message);\r\n//        Optional<String> optionalNameUpper = optionalName.map(new Function<String, String>() {\r\n//            @Override\r\n//            public String apply(String value) {\r\n//                return value.toUpperCase();\r\n//            }\r\n//        });\r\n        Optional<String> optionalNameUpper = optionalName.map((value) -> value.toUpperCase());\r\n\r\n//        optionalNameUpper.ifPresent(new Consumer<String>() {\r\n//            @Override\r\n//            public void accept(String value) {\r\n//                System.out.println(value);\r\n//            }\r\n//        });\r\n        optionalNameUpper.ifPresent(value -> System.out.println(value));\r\n    }\r\n\r\n    private static void sayHelloLambdaSimple(String message) {\r\n        Optional.ofNullable(message)\r\n                .map(String::toUpperCase)\r\n//                .ifPresent(System.out::println); //satu kondisi\r\n                .ifPresentOrElse(\r\n                        value -> System.out.println(value),\r\n                        () -> System.out.println("OKE DEH")\r\n                );\r\n    }\r\n\r\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"Penjelasan lebih lanjut tentang aliran data program di atas akan dibahas pada Java Stream."}),"\n",(0,l.jsx)(n.h2,{id:"baca-juga",children:"Baca Juga"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/blog/java-optional",children:"Tips menangani NullPointerException dengan Java Optional"})}),"\n"]})]})}function u(a={}){const{wrapper:n}={...(0,r.R)(),...a.components};return n?(0,l.jsx)(n,{...a,children:(0,l.jsx)(d,{...a})}):d(a)}},28453:(a,n,e)=>{e.d(n,{R:()=>t,x:()=>s});var i=e(96540);const l={},r=i.createContext(l);function t(a){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof a?a(n):{...n,...a}}),[n,a])}function s(a){let n;return n=a.disableParentContext?"function"==typeof a.components?a.components(l):a.components||l:t(a.components),i.createElement(r.Provider,{value:n},a.children)}}}]);