"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[5352],{43662:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"java-lambda/lambda-lazy-parameter","title":"Lambda Lazy Parameter","description":"Java tidak memiliki fitur parameter lazy seperti di bahasa pemrograman seperti Scala. Lazy parameter artinya, parameter tersebut hanya akan dieksekusi ketika diakses. Untungnya, dengan menggunakan Lambda, kita bisa membuat parameter layaknya lazy parameter.","source":"@site/tutorial/java/java-lambda/07-lambda-lazy-parameter.md","sourceDirName":"java-lambda","slug":"/java-lambda/lambda-lazy-parameter","permalink":"/java/java-lambda/lambda-lazy-parameter","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"title":"Lambda Lazy Parameter"},"sidebar":"tutorialSidebar","previous":{"title":"Lambda pada Collection","permalink":"/java/java-lambda/lambda-collection"},"next":{"title":"Lambda pada Optional","permalink":"/java/java-lambda/lambda-optional"}}');var r=n(74848),i=n(28453);const l={sidebar_position:7,title:"Lambda Lazy Parameter"},s=void 0,d={},m=[{value:"\ud83c\udfc3 Eager Parameter",id:"-eager-parameter",level:2},{value:"\ud83d\udecc Lazy Parameter",id:"-lazy-parameter",level:2}];function o(a){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...a.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"Java tidak memiliki fitur parameter lazy seperti di bahasa pemrograman seperti Scala. Lazy parameter artinya, parameter tersebut hanya akan dieksekusi ketika diakses. Untungnya, dengan menggunakan Lambda, kita bisa membuat parameter layaknya lazy parameter."}),"\n",(0,r.jsx)(e.h2,{id:"-eager-parameter",children:"\ud83c\udfc3 Eager Parameter"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Contoh"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:' public static void main(String[] args) {\r\n    testScoreEager(60, getName()); // akan selalu memanggil method getName()    \r\n}\r\n\r\n// secara default method java selalu Eager parameter\r\npublic static void testScoreEager(int score, String name) {\r\n    if (score > 70) {\r\n        System.out.println("Selamat " + name + " Anda lulus");\r\n    } else {\r\n        System.out.println("Anda tidak lulus");\r\n    }\r\n}\r\n\r\npublic static String getName() {\r\n    System.out.println("Method getName() dipanggil");\r\n    return "Ucup";\r\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Output:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Method getName() dipanggil\r\nAnda tidak lulus\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Dari kode di atas dapat kita lihat bahwa di dalam Java pemanggilan method akan selalu bersifat Eager Parameter, yang artinya method ",(0,r.jsx)(e.code,{children:"getName()"})," akan selalu dipanggil walaupun kondisi nilai score yang ",(0,r.jsx)(e.code,{children:"60"}),", yang pada method ",(0,r.jsx)(e.code,{children:"testScoreEager"})," parameter ",(0,r.jsx)(e.code,{children:"name"})," tidak akan dieksekusi karena kondisi tidak sesuai."]}),"\n",(0,r.jsx)(e.h2,{id:"-lazy-parameter",children:"\ud83d\udecc Lazy Parameter"}),"\n",(0,r.jsx)(e.p,{children:"Dengan menggunakan Lambda maka kita dapat menggunakan Lazy Parameter pada method tersebut di atas. Contoh:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public static void main(String[] args) {\r\n    testScoreLazy(60, () -> getName()); // method getName() hanya akan dipanggil jika kondisi terpenuhi (dalam contoh ini score > 70)\r\n}\r\n\r\n// dengan lazy parameter\r\npublic static void testScoreLazy(int score, Supplier<String> name) {\r\n    if (score > 70) {\r\n        System.out.println("Selamat " + name.get() + " Anda lulus");\r\n    } else {\r\n        System.out.println("Anda tidak lulus");\r\n    }\r\n}\r\n\r\npublic static String getName() {\r\n    System.out.println("Method getName() dipanggil");\r\n    return "Ucup";\r\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Output:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Anda tidak lulus\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Dari kode di atas parameter yang digunakan adalah ",(0,r.jsx)(e.code,{children:"Suplier"})," yang akan akan mengembalikan result tanpa perlu mengirim parameter. Dengan menggunakan lambda maka parameter method akan bersifat Lazy yang akan mengeksekusi ",(0,r.jsx)(e.code,{children:"getName"})," jika kondisi dalam method ",(0,r.jsx)(e.code,{children:"testScoreLazy"})," terpenuhi saja."]}),"\n",(0,r.jsx)(e.admonition,{type:"info",children:(0,r.jsxs)(e.p,{children:["\ud83d\udcd6 Baca Juga: ",(0,r.jsx)(e.a,{href:"/java/java-lambda/functional-interface#suplier",children:"Functional Interface Suplier"})]})})]})}function c(a={}){const{wrapper:e}={...(0,i.R)(),...a.components};return e?(0,r.jsx)(e,{...a,children:(0,r.jsx)(o,{...a})}):o(a)}},28453:(a,e,n)=>{n.d(e,{R:()=>l,x:()=>s});var t=n(96540);const r={},i=t.createContext(r);function l(a){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof a?a(e):{...e,...a}}),[e,a])}function s(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(r):a.components||r:l(a.components),t.createElement(i.Provider,{value:e},a.children)}}}]);