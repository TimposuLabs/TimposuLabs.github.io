"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[3268],{13159:(t,a,e)=>{e.r(a),e.d(a,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"java-collection/sortedmap","title":"Java SortedMap","description":"SortedMap adalah implementasi Map dengan data key diurutkan sesuai dengan Comparable key atau bisa menggunakan Comparator. SortedMap cocok untuk kasus yang posisi key pada Map harus berurut.","source":"@site/tutorial/java/java-collection/14-sortedmap.md","sourceDirName":"java-collection","slug":"/java-collection/sortedmap","permalink":"/java/java-collection/sortedmap","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"sidebar_position":14,"title":"Java SortedMap"},"sidebar":"tutorialSidebar","previous":{"title":"Immutable Map","permalink":"/java/java-collection/immutable-map"},"next":{"title":"Java NavigableMap","permalink":"/java/java-collection/navigablemap"}}');var n=e(74848),o=e(28453);const i={sidebar_position:14,title:"Java SortedMap"},s=void 0,p={},c=[{value:"Immutable SortedMap",id:"immutable-sortedmap",level:2}];function l(t){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.code,{children:"SortedMap"})," adalah implementasi Map dengan data key diurutkan sesuai dengan ",(0,n.jsx)(a.code,{children:"Comparable"})," key atau bisa menggunakan ",(0,n.jsx)(a.code,{children:"Comparator"}),". ",(0,n.jsx)(a.code,{children:"SortedMap"})," cocok untuk kasus yang posisi key pada Map harus berurut."]}),"\n",(0,n.jsx)(a.p,{children:"Contoh:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'import java.util.Comparator;\r\nimport java.util.SortedMap;\r\nimport java.util.TreeMap;\r\n\r\npublic class DemoSortedMap {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\t// membuat comparator\r\n\t\tComparator<String> comparator = new Comparator<String>() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic int compare(String o1, String o2) {\r\n\t\t\t\t// membuat compare descending\r\n\t\t\t\treturn o2.compareTo(o1);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tSortedMap<String, String> countrys = new TreeMap<String, String>(comparator);\r\n\t\tcountrys.put("th", "Thailand");\r\n\t\tcountrys.put("cn", "China");\r\n\t\tcountrys.put("my", "Malaysia");\r\n\t\tcountrys.put("vn", "Vietnam");\r\n\t\t\r\n\t\tfor (var key : countrys.keySet()) {\r\n\t\t\tSystem.out.println(key);\r\n\t\t}\r\n\t}\r\n\t\r\n}\n'})}),"\n",(0,n.jsx)(a.h2,{id:"immutable-sortedmap",children:"Immutable SortedMap"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// Immutable SortedMap\r\nSortedMap<String, String> immutableSortedMap = Collections.unmodifiableSortedMap(countrys);\r\n\r\n// immutableSortedMap.put("rs", "Russia"); // Error\r\n\r\n// Membuat empty SortedMap\r\nSortedMap<String, String> emptySortedMap = Collections.emptySortedMap();\n'})})]})}function u(t={}){const{wrapper:a}={...(0,o.R)(),...t.components};return a?(0,n.jsx)(a,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}},28453:(t,a,e)=>{e.d(a,{R:()=>i,x:()=>s});var r=e(96540);const n={},o=r.createContext(n);function i(t){const a=r.useContext(o);return r.useMemo((function(){return"function"==typeof t?t(a):{...a,...t}}),[a,t])}function s(t){let a;return a=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:i(t.components),r.createElement(o.Provider,{value:a},t.children)}}}]);