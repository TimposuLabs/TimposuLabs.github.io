"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[543],{57554:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>p});var a=r(44306),i=r(74848),t=r(28453);const s={slug:"spring-boot-crud-rest-dto-mapstruct",title:"Spring Boot CRUD REST API Java Record DTO + Mapper dengan Mapstruct",authors:"topekox",tags:["springboot","spring","rest","api","database"]},o=void 0,l={authorsImageUrls:[void 0]},p=[{value:"\ud83c\udf0e Mapstruct",id:"-mapstruct",level:2},{value:"\u2753Kenapa menggunakan Mapstruct",id:"kenapa-menggunakan-mapstruct",level:3},{value:"\u26a0\ufe0f Cara Tradisional",id:"\ufe0f-cara-tradisional",level:3},{value:"\ud83e\uddd1\u200d\ud83d\udcbb Tools",id:"-tools",level:2},{value:"1\ufe0f\u20e3 Dependency",id:"1\ufe0f\u20e3-dependency",level:2},{value:"2\ufe0f\u20e3 Konfigurasi <code>application.properties</code>",id:"2\ufe0f\u20e3-konfigurasi-applicationproperties",level:2},{value:"3\ufe0f\u20e3 Membuat Entity / Model",id:"3\ufe0f\u20e3-membuat-entity--model",level:2},{value:"4\ufe0f\u20e3 Membuat Repository",id:"4\ufe0f\u20e3-membuat-repository",level:2},{value:"5\ufe0f\u20e3 Membuat Java Record untuk DTO",id:"5\ufe0f\u20e3-membuat-java-record-untuk-dto",level:2},{value:"6\ufe0f\u20e3 Membuat Mapstruct Mapper",id:"6\ufe0f\u20e3-membuat-mapstruct-mapper",level:2},{value:"7\ufe0f\u20e3 Handle Exception",id:"7\ufe0f\u20e3-handle-exception",level:2},{value:"\u2705 Membuat API Error",id:"-membuat-api-error",level:3},{value:"2\ufe0f\u20e3 Membuat Class NotFoundException",id:"2\ufe0f\u20e3-membuat-class-notfoundexception",level:3},{value:"3\ufe0f\u20e3 Membuat Exception Handler",id:"3\ufe0f\u20e3-membuat-exception-handler",level:3},{value:"8\ufe0f\u20e3 Membuat Service Layer",id:"8\ufe0f\u20e3-membuat-service-layer",level:2},{value:"9\ufe0f\u20e3 Membuat Controller",id:"9\ufe0f\u20e3-membuat-controller",level:2},{value:"8\ufe0f\u20e3 Running dan Testing API",id:"8\ufe0f\u20e3-running-dan-testing-api",level:2},{value:"\ud83d\udd25 Testing",id:"-testing",level:3},{value:"\ud83d\udd16 Kesimpulan",id:"-kesimpulan",level:2},{value:"\ud83c\udf10 Baca Juga",id:"-baca-juga",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["Pada tutorial ini, kita akan membuat aplikasi Spring Boot CRUD (Create, Read, Update, Delete) seperti pada ",(0,i.jsx)(e.a,{href:"/blog/spring-boot-crud-rest-mysql-java-record-dto",children:"tutorial sebelumnya"}),". Jika pada tutorial sebelumnya kita melakukan mapping untuk konversi DTO ke Entity atau sebaliknya masih menggunakan cara manual, tutorial kita menggunakan generator mapper ",(0,i.jsx)(e.a,{href:"https://mapstruct.org/",children:"Mapstruct"}),"."]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Baca Juga:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"/blog/spring-boot-arsitektur-controller-service-repository-database-flow",children:"Arsitektur Spring Boot - Controller, Service, Repository dan Database"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"/blog/spring-boot-crud-rest-mysql-java-record-dto",children:"Implementasi Spring Boot CRUD REST API dengan MySQL dan Java Record DTO"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("img",{src:"/img/general/Spring-boot-diagram2.svg"}),"\n",(0,i.jsx)(e.h2,{id:"-mapstruct",children:"\ud83c\udf0e Mapstruct"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.a,{href:"https://mapstruct.org/",children:"Mapstruct"})," adalah Java Annotation Processor yang menghasilkan kode mapping pada waktu kompilasi.  Dengan kata lain mapstruct sebagai generator mapper  yang dapat digunakan untuk mengonversi antar model di program Java. Mapstruct sangat berguna terutama saat berhadapan dengan REST API, Microservices, atau pada layer businness logic yang kompleks."]}),"\n",(0,i.jsx)(e.h3,{id:"kenapa-menggunakan-mapstruct",children:"\u2753Kenapa menggunakan Mapstruct"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"Lebih cepat"}),": Karena mapping terjadi pada waktu kompilasi, tidak ada overhead waktu proses."]}),"\n",(0,i.jsxs)(e.li,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"Lebih clean"}),": Menghilangkan resource kode manual (Boilerplate code)."]}),"\n",(0,i.jsxs)(e.li,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"Aman terhadap tipe"}),": Kompiler memvalidasi mapping, mengurangi runtime errors."]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"\ufe0f-cara-tradisional",children:"\u26a0\ufe0f Cara Tradisional"}),"\n",(0,i.jsx)(e.p,{children:"Sebagian besar programmer Java masih masih menggunakan mapping secara manual atau menggunakan library berbasis reflection yang tidak efisien, yang mengarah kepada:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\ud83d\udc80 Kode berantakan dan berulang yang susah untuk di-maintain."}),"\n",(0,i.jsx)(e.li,{children:"\ud83d\udc22 Overhead performa karena runtime reflection."}),"\n",(0,i.jsx)(e.li,{children:"\ud83e\udd2f Mapping rawan error yang dapat menyebabkan bug."}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Contoh misalnya kita membuat aplikasi Spring Boot berbasis REST API dengan memiliki:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"Person"})," sebagai Entity untuk representasi dengan database model."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"PersonDTO"})," untuk mentransfer data ke client/frontend."]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Tanpa Mapstruct kita mungkin akan membuat class mapper untuk konversi antar model seperti berikut:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"public class PersonMapper {\r\n\r\n    public static PersonDTO toDto(Person person) {\r\n        return new PersonDTO(\r\n            person.getId(), \r\n            person.getFirstName(), \r\n            person.getLastName(), \r\n            person.getEmail());\r\n    }\r\n\r\n    public static Person toEntity(PersonDTO personDTO) {\r\n        return new Person(\r\n            personDTO.id(), \r\n            personDTO.firstName(), \r\n            personDTO.lastName(), \r\n            personDTO.email());\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"Kode di atas terlihat berulang-ulang dan verbose."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\ud83d\udc80 Kita perlu mapping setiap bidang secara manual."}),"\n",(0,i.jsx)(e.li,{children:"\ud83d\ude35\u200d\ud83d\udcab Dengan model yang kompleks, logic mapping menjadi berantakan."}),"\n",(0,i.jsx)(e.li,{children:"\ud83e\udd2f Setiap menambahkan field baru, kita perlu memperbarui mapper, yang rawan kesalahan."}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["Dan ketika ",(0,i.jsx)(e.code,{children:"PersonMapper"})," digunakan, misalnya pada layer Service sebagai berikut:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'public List<PersonDTO> getAll() {\r\n    return personRepository.findAll().stream()\r\n            .map(PersonMapper::toDto)\r\n            .collect(Collectors.toList());\r\n}\r\n\r\npublic PersonDTO findById(Long id) {\r\n    return personRepository.findById(id)\r\n            .map(PersonMapper::toDto)\r\n            .orElseThrow(() -> new NotFoundException("ID_NOT_FOUND"));\r\n}\r\n\r\npublic PersonDTO create(PersonDTO personDTO) {\r\n    return PersonMapper.toDto(personRepository.save(PersonMapper.toEntity(personDTO)));\r\n}\r\n\r\npublic PersonDTO update(Long id, PersonDTO personDTO) {\r\n    Person person = personRepository.findById(id)\r\n            .orElseThrow(() -> new NotFoundException("ID_NOT_FOUND"));\r\n    person.setFirstName(personDTO.firstName());\r\n    person.setLastName(personDTO.lastName());\r\n    person.setEmail(personDTO.email());\r\n    return PersonMapper.toDto(personRepository.save(person));\r\n}\r\n\r\npublic void delete(Long id) {\r\n    Person person = personRepository.findById(id)\r\n            .orElseThrow(() -> new NotFoundException("ID_NOT_FOUND"));\r\n    personRepository.delete(person);\r\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"\ud83d\udd25Kita akan mengganti mapper manual di atas menggunakan Mapstruct, sehingga dapat diimplementasikan lebih mudah (contohnya pada layer Service)."}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-tools",children:"\ud83e\uddd1\u200d\ud83d\udcbb Tools"}),"\n",(0,i.jsx)(e.p,{children:"Pada tutorial kali ini kita menggunakan:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u2714\ufe0f Java Development Kit (JDK) 21 atau yang terbaru."}),"\n",(0,i.jsx)(e.li,{children:"\u2714\ufe0f Apache Maven (Project Manajemen)."}),"\n",(0,i.jsx)(e.li,{children:"\u2714\ufe0f H2 Database (Database Embedded / in-memory database)."}),"\n",(0,i.jsx)(e.li,{children:"\u2714\ufe0f IDE (Intellij IDEA, Eclipse, Netbeans atau VS Code)."}),"\n",(0,i.jsx)(e.li,{children:"\u2714\ufe0f Mapstruct."}),"\n",(0,i.jsx)(e.li,{children:"\u2714\ufe0f Postman atau cURL (test API)."}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"1\ufe0f\u20e3-dependency",children:"1\ufe0f\u20e3 Dependency"}),"\n",(0,i.jsxs)(e.p,{children:["Dependency pada ",(0,i.jsx)(e.code,{children:"pom.xml"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-xml",children:"\x3c!-- Spring Boot JPA --\x3e\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n\r\n\x3c!-- Spring Boot Web --\x3e\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n\r\n\x3c!-- H2 Database --\x3e\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n\r\n\x3c!-- Mapstruct --\x3e\r\n<dependency>\r\n    <groupId>org.mapstruct</groupId>\r\n    <artifactId>mapstruct</artifactId>\r\n    <version>1.6.3</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.mapstruct</groupId>\r\n    <artifactId>mapstruct-processor</artifactId>\r\n    <version>1.6.3</version>\r\n</dependency>\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"2\ufe0f\u20e3-konfigurasi-applicationproperties",children:["2\ufe0f\u20e3 Konfigurasi ",(0,i.jsx)(e.code,{children:"application.properties"})]}),"\n",(0,i.jsxs)(e.p,{children:["Pada file ",(0,i.jsx)(e.code,{children:"src/main/resources/application.properties"})," kita perlu melakukan konfigurasi agar Spring Boot terhubung ke database:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"spring.datasource.url=jdbc:h2:mem:springapp\r\nspring.datasource.driverClassName=org.h2.Driver\r\nspring.datasource.username=sa\r\nspring.datasource.password=\r\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\r\nspring.jpa.show-sql=true\r\nspring.jpa.hibernate.ddl-auto=update\r\n\r\nspring.h2.console.enabled=true\r\nspring.h2.console.path=/h2\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Konfigurasi di atas adalah konfigurasi minimal untuk terhubung ke database H2. Beberapa variable yang dimasukan adalah nama database adalah ",(0,i.jsx)(e.code,{children:"springapp"})," dengan ",(0,i.jsx)(e.code,{children:"urljdbc:h2:mem:springapp"})," , ",(0,i.jsx)(e.code,{children:"username"})," adalah ",(0,i.jsx)(e.code,{children:"sa"})," dan tanpa password. Konfigurasi adalah kita mengaktifkan console database H2 ketika dijalankan dengan nilai ",(0,i.jsx)(e.code,{children:"true"}),", serta url path akses consolenya adalah ",(0,i.jsx)(e.code,{children:"/h2"}),". Konfigurasi sisanya adalah konfigurasi JPA dan Hibernate."]}),"\n",(0,i.jsx)(e.h2,{id:"3\ufe0f\u20e3-membuat-entity--model",children:"3\ufe0f\u20e3 Membuat Entity / Model"}),"\n",(0,i.jsxs)(e.p,{children:["Membuat Entity ",(0,i.jsx)(e.code,{children:"Person"})," dalam format POJO, untuk mewakili tabel ",(0,i.jsx)(e.code,{children:"person"})," dalam database:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package com.timposulabs.spring.mvc.model;\r\n\r\nimport jakarta.persistence.*;\r\n\r\nimport java.util.Objects;\r\n\r\n@Entity\r\n@Table(name = "person")\r\npublic class Person {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    private String firstName;\r\n\r\n    private String lastName;\r\n\r\n    private String email;\r\n\r\n    public Person() {\r\n    }\r\n\r\n    public Person(Long id, String firstName, String lastName, String email) {\r\n        this.id = id;\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.email = email;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getFirstName() {\r\n        return firstName;\r\n    }\r\n\r\n    public void setFirstName(String firstName) {\r\n        this.firstName = firstName;\r\n    }\r\n\r\n    public String getLastName() {\r\n        return lastName;\r\n    }\r\n\r\n    public void setLastName(String lastName) {\r\n        this.lastName = lastName;\r\n    }\r\n\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Class entity yang dibuat adalah representasi ",(0,i.jsx)(e.code,{children:"person"}),", dengan field ",(0,i.jsx)(e.code,{children:"id"}),", ",(0,i.jsx)(e.code,{children:"firsName"}),", ",(0,i.jsx)(e.code,{children:"lastName"})," dan ",(0,i.jsx)(e.code,{children:"email"}),"."]}),"\n",(0,i.jsx)(e.h2,{id:"4\ufe0f\u20e3-membuat-repository",children:"4\ufe0f\u20e3 Membuat Repository"}),"\n",(0,i.jsx)(e.p,{children:"Membuat interface Person Repository:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"package com.timposulabs.spring.mvc.repository;\r\n\r\nimport com.timposulabs.spring.mvc.model.Person;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface PersonRepository extends JpaRepository<Person, Long> {\r\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"JpaRepository"})," Menyediakan semua operasi CRUD yang diperlukan seperti ",(0,i.jsx)(e.code,{children:"save()"}),", ",(0,i.jsx)(e.code,{children:"findAll()"}),", ",(0,i.jsx)(e.code,{children:"findById()"}),", ",(0,i.jsx)(e.code,{children:"deleteById()"})," dan tanpa perlu menulisnya sendiri."]}),"\n",(0,i.jsx)(e.h2,{id:"5\ufe0f\u20e3-membuat-java-record-untuk-dto",children:"5\ufe0f\u20e3 Membuat Java Record untuk DTO"}),"\n",(0,i.jsx)(e.p,{children:"Java Record adalah class khusus di Java yang berguna untuk mengurangi kode boilerplate, dengan secara otomatis menghasilkan constructor, getter, setter. Ini ideal untuk DTO yang bertugas untuk membawa data antara server dan client."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"package com.timposulabs.spring.mvc.dto;\r\n\r\npublic record PersonDTO(Long id, String firstName, String lastName, String email) {\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"6\ufe0f\u20e3-membuat-mapstruct-mapper",children:"6\ufe0f\u20e3 Membuat Mapstruct Mapper"}),"\n",(0,i.jsx)(e.p,{children:"\ud83d\ude80 Menggunakan MapStruct untuk menghindari mapping secara manual untuk konversi antara DTO dan Entity."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"package com.timposulabs.spring.mvc.util;\r\n\r\nimport com.timposulabs.spring.mvc.dto.PersonDTO;\r\nimport com.timposulabs.spring.mvc.model.Person;\r\nimport org.mapstruct.Mapper;\r\nimport org.mapstruct.factory.Mappers;\r\n\r\n@Mapper\r\npublic interface PersonMapper {\r\n\r\n    PersonMapper INSTANCE = Mappers.getMapper(PersonMapper.class);\r\n\r\n    PersonDTO toDto(Person person);\r\n\r\n    Person toEntity(PersonDTO personDTO);\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"7\ufe0f\u20e3-handle-exception",children:"7\ufe0f\u20e3 Handle Exception"}),"\n",(0,i.jsxs)(e.p,{children:["Dari aplikasi ini biar seru kita diperlu menambahkan handle Exception. Dimana kita akan membuat ",(0,i.jsx)(e.code,{children:"NotFoundException"})," yang akan ditrigger ketika ",(0,i.jsx)(e.code,{children:"id"})," tidak ditemukan."]}),"\n",(0,i.jsx)(e.h3,{id:"-membuat-api-error",children:"\u2705 Membuat API Error"}),"\n",(0,i.jsx)(e.p,{children:"Kita akan membuat standard response API seperti berikut:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\r\n  "error": "ID Not Found",\r\n  "path": "/api/person/1",\r\n  "status": 404,\r\n  "timestamp": "2025-03-16T12:40:42.311569409"\r\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"Penjelasan:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"error"})," : Keterangan Error."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"path"})," : URL Request API penyebab error."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"status"})," : Kode HTTP status."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"timestamp"})," : Keterangan waktu error dalam format timestamp."]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Kita akan mengikuti format response API di atas dengan membuat Java Record:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"import java.time.LocalDateTime;\r\n\r\npublic record ApiError(\r\n        String error,\r\n        String path,\r\n        int status,\r\n        LocalDateTime timestamp) {\r\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2\ufe0f\u20e3-membuat-class-notfoundexception",children:"2\ufe0f\u20e3 Membuat Class NotFoundException"}),"\n",(0,i.jsxs)(e.p,{children:["Selanjutnya membuat custom class ",(0,i.jsx)(e.code,{children:"NotFoundException"})," extends dari ",(0,i.jsx)(e.code,{children:"RuntimeException"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"package com.timposulabs.spring.mvc.exception;\r\n\r\npublic class NotFoundException extends RuntimeException {\r\n    public NotFoundException(String message) {\r\n        super(message);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"3\ufe0f\u20e3-membuat-exception-handler",children:"3\ufe0f\u20e3 Membuat Exception Handler"}),"\n",(0,i.jsxs)(e.p,{children:["Selanjutnya membuat Exception Handler yang menggunakan annotation ",(0,i.jsx)(e.code,{children:"@ControllerAdvice"}),", yang mana Spring akan menjalankan Advice terlebih dahulu untuk menangkap exception yang ada. Maka dari itu semua class exception yang ada pada ",(0,i.jsx)(e.code,{children:"ExceptionHandler"})," akan dihandle dalam class ini, dalam kasus ini exception ",(0,i.jsx)(e.code,{children:"NotFoundException"})," yang telah kita buat sebelumnya akan dihandle disini."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"package com.timposulabs.spring.mvc.exception;\r\n\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.ExceptionHandler;\r\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\n@RestControllerAdvice\r\npublic class GlobalExceptionHandler {\r\n\r\n    @ExceptionHandler(NotFoundException.class)\r\n    public ResponseEntity<ApiError> notFoundException(NotFoundException ex, HttpServletRequest request) {\r\n        ApiError apiError = new ApiError(\r\n                ex.getMessage(),\r\n                request.getRequestURI(),\r\n                HttpStatus.NOT_FOUND.value(),\r\n                LocalDateTime.now());\r\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(apiError);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"8\ufe0f\u20e3-membuat-service-layer",children:"8\ufe0f\u20e3 Membuat Service Layer"}),"\n",(0,i.jsxs)(e.p,{children:["Dalam layer service, kita akan menggunakan ",(0,i.jsx)(e.code,{children:"PersonMapper"})," yang sudah dibuat untuk melakukan konversi antara ",(0,i.jsx)(e.code,{children:"Person"})," (entity) dan ",(0,i.jsx)(e.code,{children:"PersonDTO"})," (DTO):"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package com.timposulabs.spring.mvc.service;\r\n\r\nimport com.timposulabs.spring.mvc.dto.PersonDTO;\r\nimport com.timposulabs.spring.mvc.exception.NotFoundException;\r\nimport com.timposulabs.spring.mvc.model.Person;\r\nimport com.timposulabs.spring.mvc.repository.PersonRepository;\r\nimport com.timposulabs.spring.mvc.util.PersonMapper;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\npublic class PersonService {\r\n\r\n    private final PersonRepository personRepository;\r\n\r\n    public PersonService(PersonRepository personRepository) {\r\n        this.personRepository = personRepository;\r\n    }\r\n\r\n    public List<PersonDTO> getAll() {\r\n        return personRepository.findAll().stream()\r\n                .map(PersonMapper.INSTANCE::toDto)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public PersonDTO findById(Long id) {\r\n        return personRepository.findById(id)\r\n                .map(PersonMapper.INSTANCE::toDto)\r\n                .orElseThrow(() -> new NotFoundException("ID_NOT_FOUND"));\r\n    }\r\n\r\n    public PersonDTO create(PersonDTO personDTO) {\r\n        return PersonMapper.INSTANCE.toDto(personRepository.save(PersonMapper.INSTANCE.toEntity(personDTO)));\r\n    }\r\n\r\n    public PersonDTO update(Long id, PersonDTO personDTO) {\r\n        Person person = personRepository.findById(id)\r\n                .orElseThrow(() -> new NotFoundException("ID_NOT_FOUND"));\r\n        person.setFirstName(personDTO.firstName());\r\n        person.setLastName(personDTO.lastName());\r\n        person.setEmail(personDTO.email());\r\n        return PersonMapper.INSTANCE.toDto(personRepository.save(person));\r\n    }\r\n\r\n    public void delete(Long id) {\r\n        Person person = personRepository.findById(id)\r\n                .orElseThrow(() -> new NotFoundException("ID_NOT_FOUND"));\r\n        personRepository.delete(person);\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Konversi logic (antara Entitas dan DTO) disimpan di layer service untuk menjaga controller tetap bersih dan hanya berfokus pada penanganan request HTTP."}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"PersonMapper"})," akan mengonversi entity ",(0,i.jsx)(e.strong,{children:"Person"})," menjadi ",(0,i.jsx)(e.strong,{children:"PersonDTO"}),", begitupun sebaliknya."]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"9\ufe0f\u20e3-membuat-controller",children:"9\ufe0f\u20e3 Membuat Controller"}),"\n",(0,i.jsx)(e.p,{children:"Dalam layer ini, kita akan membuat Controller untuk REST API:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package com.timposulabs.spring.mvc.controller;\r\n\r\nimport com.timposulabs.spring.mvc.dto.PersonDTO;\r\nimport com.timposulabs.spring.mvc.service.PersonService;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping("/person")\r\npublic class PersonController {\r\n\r\n    private final PersonService personService;\r\n\r\n    public PersonController(PersonService personService) {\r\n        this.personService = personService;\r\n    }\r\n\r\n    // \u2705 GET all Person (200 OK)\r\n    @GetMapping\r\n    public ResponseEntity<List<PersonDTO>> getAll() {\r\n        return ResponseEntity.ok(personService.getAll());\r\n    }\r\n\r\n    // \u2705 GET Person by ID (200 OK / 404 Not Found)\r\n    @GetMapping("/{id}")\r\n    public ResponseEntity<PersonDTO> getById(@PathVariable Long id) {\r\n        return ResponseEntity.ok(personService.findById(id));\r\n    }\r\n\r\n    // \u2705 POST Create new Person (201 Created)\r\n    @PostMapping\r\n    public ResponseEntity<PersonDTO> create(@RequestBody PersonDTO personDTO) {\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(personService.create(personDTO));\r\n    }\r\n\r\n    // \u2705 PUT Update Person (200 OK / 404 Not Found)\r\n    @PutMapping("/{id}")\r\n    public ResponseEntity<PersonDTO> update(@PathVariable Long id, @RequestBody PersonDTO personDTO) {\r\n        return ResponseEntity.ok(personService.update(id, personDTO));\r\n    }\r\n\r\n    // \u2705 DELETE Person (204 No Content / 404 Not Found)\r\n    @DeleteMapping("/{id}")\r\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\r\n        personService.delete(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"GET, POST, PUT, dan DELETE"})," HTTP adalah method yang digunakan untuk CRUD operations."]}),"\n",(0,i.jsx)(e.li,{children:"Controller tidak memiliki bussines logic. Dia hanya berfungsi untuk mengatur request ke layer Service dan memberikan response ke Client. Ini membuat kode lebih clean dan menjadi mudah untuk dimaintain."}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"8\ufe0f\u20e3-running-dan-testing-api",children:"8\ufe0f\u20e3 Running dan Testing API"}),"\n",(0,i.jsx)(e.p,{children:"Jalankan aplikasi dan lakukan pengujian dari client bisa menggunakan Postman atau cURL."}),"\n",(0,i.jsx)(e.h3,{id:"-testing",children:"\ud83d\udd25 Testing"}),"\n",(0,i.jsxs)(e.p,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"GET"})," all person:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["URL: ",(0,i.jsx)(e.code,{children:"http://localhost:8080/person"})]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"GET"})," product by ID:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["URL: ",(0,i.jsx)(e.code,{children:"http://localhost:8080/person/{id}"})]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"POST"})," membuat product baru:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["URL: ",(0,i.jsx)(e.code,{children:"http://localhost:8080/person"})]}),"\n",(0,i.jsx)(e.li,{children:"Body:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\r\n  "firstName":"Ucup",\r\n  "lastName":"Topekox",\r\n  "email":"ucup@gmail.com"\r\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"PUT"})," update person by ID:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["URL: ",(0,i.jsx)(e.code,{children:"http://localhost:8080/person/{id}"})]}),"\n",(0,i.jsx)(e.li,{children:"Body:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\r\n  "firstName": "Ade",\r\n  "lastName": "Agustian",\r\n  "email": "ade@gmail.com"\r\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"DELETE"})," menghapus data person by ID:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["URL: ",(0,i.jsx)(e.code,{children:"http://localhost:8080/api/product/{id}"})]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"NOT FOUND (GET, PUT, DELETE)"})," Response API ketika ID tidak ditemukan:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["URL: ",(0,i.jsx)(e.code,{children:"http://localhost:8080/person/0"})]}),"\n",(0,i.jsx)(e.li,{children:"Response:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\r\n  "error": "ID_NOT_FOUND",\r\n  "path": "/person/0",\r\n  "status": 404,\r\n  "localDateTime": "2025-03-23T12:08:43.4502233"\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"-kesimpulan",children:"\ud83d\udd16 Kesimpulan"}),"\n",(0,i.jsx)(e.p,{children:"Kita sudah membangun aplikasi Spring Boot CRUD REST API. Kita mengikuti best practice dengan menggunakan Java Record sebagai DTO dan menjaga logic konversi antara Entity dan DTO di layer Service menggunakan Mapstruct. Dengan memisahkan logic konversi ke dalam layer Service, kita mempertahankan basis kode yang clean dan terstruktur dengan baik yang akan lebih mudah dimaintain dan diperluas/scalability di masa mendatang. Selain itu kita juga sudah mengimplementasikan Exception Handle yang mana kita mengkustom sendiri exception sesuai kebutuhan."}),"\n",(0,i.jsx)(e.h2,{id:"-baca-juga",children:"\ud83c\udf10 Baca Juga"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://medium.com/@vikrantdheer/is-mapstruct-dead-the-ultimate-solution-to-stop-writing-boilerplate-code-in-java-83d42bb44af6",children:"https://medium.com/@vikrantdheer/is-mapstruct-dead-the-ultimate-solution-to-stop-writing-boilerplate-code-in-java-83d42bb44af6"})}),"\n"]})]})}function c(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>o});var a=r(96540);const i={},t=a.createContext(i);function s(n){const e=a.useContext(t);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(t.Provider,{value:e},n.children)}},44306:n=>{n.exports=JSON.parse('{"permalink":"/blog/spring-boot-crud-rest-dto-mapstruct","source":"@site/blog/2025-03-23-spring-boot-crud-rest-dto-mapper.md","title":"Spring Boot CRUD REST API Java Record DTO + Mapper dengan Mapstruct","description":"Pada tutorial ini, kita akan membuat aplikasi Spring Boot CRUD (Create, Read, Update, Delete) seperti pada tutorial sebelumnya. Jika pada tutorial sebelumnya kita melakukan mapping untuk konversi DTO ke Entity atau sebaliknya masih menggunakan cara manual, tutorial kita menggunakan generator mapper Mapstruct.","date":"2025-03-23T00:00:00.000Z","tags":[{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"rest","permalink":"/blog/tags/rest"},{"inline":true,"label":"api","permalink":"/blog/tags/api"},{"inline":true,"label":"database","permalink":"/blog/tags/database"}],"readingTime":8.51,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"spring-boot-crud-rest-dto-mapstruct","title":"Spring Boot CRUD REST API Java Record DTO + Mapper dengan Mapstruct","authors":"topekox","tags":["springboot","spring","rest","api","database"]},"unlisted":false,"prevItem":{"title":"Menjalankan PostgreSQL di Docker Container pada Windows Subsystem for Linux (WSL)","permalink":"/blog/postgres-docker-wsl"},"nextItem":{"title":"Step-by-Step Membangun Spring Boot CRUD REST API dengan MySQL dan Java Record DTO","permalink":"/blog/spring-boot-crud-rest-mysql-java-record-dto"}}')}}]);