"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[8130],{77735:a=>{a.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"mengatasi-masalah-time-dualboot-windows-linux","metadata":{"permalink":"/blog/mengatasi-masalah-time-dualboot-windows-linux","source":"@site/blog/2025-05-22-mengatasi-masalah-time-dualboot-windows-linux.md","title":"Mengatasi konflik waktu / time yang berubah di Windows setelah boot dari Linux","description":"Masalah konflik waktu \ud83d\udd65 yang berubah di Windows setelah boot dari Linux dalam konfigurasi dual boot terjadi karena cara berbeda kedua sistem operasi tersebut menangani waktu yang tersimpan di jam perangkat keras (hardware clock atau RTC/BIOS).","date":"2025-05-22T00:00:00.000Z","tags":[{"inline":true,"label":"linux","permalink":"/blog/tags/linux"},{"inline":true,"label":"windows","permalink":"/blog/tags/windows"}],"readingTime":1.595,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"mengatasi-masalah-time-dualboot-windows-linux","title":"Mengatasi konflik waktu / time yang berubah di Windows setelah boot dari Linux","authors":"topekox","tags":["linux","windows"]},"unlisted":false,"nextItem":{"title":"Cara membuat Pagination REST API di Spring Boot","permalink":"/blog/spring-boot-rest-api-pagination"}},"content":"Masalah konflik waktu \ud83d\udd65 yang berubah di Windows setelah boot dari Linux dalam konfigurasi dual boot terjadi karena cara berbeda kedua sistem operasi tersebut menangani waktu yang tersimpan di jam perangkat keras (hardware clock atau RTC/BIOS).\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n* Linux secara default menganggap waktu yang tersimpan di jam perangkat keras (RTC) adalah UTC (Coordinated Universal Time) atau Waktu Universal. Saat Linux berjalan, ia akan mengambil waktu UTC ini dan menambahkan offset zona waktu lokal Anda untuk menampilkan waktu yang benar.\\r\\n\\r\\n* Windows secara default menganggap waktu yang tersimpan di jam perangkat keras (RTC) adalah waktu lokal Anda (Local Time).\\r\\n\\r\\nKetika boot ke Linux, ia membaca waktu dari RTC (misalnya pukul 08:00 UTC) dan menambah offset zona waktu lokal Anda (misalnya +7 jam untuk WIB), sehingga sistem menampilkan pukul 15:00. Sebelum shutdown, Linux mungkin memperbarui RTC kembali ke waktu UTC yang benar (pukul 08:00 UTC).\\r\\n\\r\\nNamun, saat Anda boot kembali ke Windows, Windows membaca waktu 08:00 dari RTC tersebut dan menganggapnya sebagai waktu lokal (misalnya WIB), sehingga Windows akan menampilkan pukul 08:00, padahal waktu lokal yang sebenarnya adalah pukul 15:00, membuat waktu di Windows menjadi salah.\\r\\n\\r\\n## Solusi\\r\\n\\r\\nUntuk mengatasi konflik ini, Anda perlu membuat kedua sistem operasi menggunakan standar yang sama. Ada dua cara utama:\\r\\n\\r\\n1. Mengubah konfigurasi Linux agar menggunakan Waktu Lokal (Local Time): Ini biasanya dapat dilakukan dengan menjalankan perintah di Terminal Linux (pada distro berbasis `systemd` seperti Ubuntu):\\r\\n\\r\\n```bash\\r\\ntimedatectl set-local-rtc 1\\r\\n```\\r\\n\\r\\nPerintah ini akan memberitahu Linux untuk menggunakan waktu lokal alih-alih UTC di RTC.\\r\\n\\r\\n2. Mengubah konfigurasi Windows agar menggunakan UTC (Universal Time): Ini melibatkan pengeditan Registry Windows. **Lakukan dengan hati-hati**.\\r\\n\\r\\n* Buka Registry Editor (`regedit.exe`) sebagai Administrator.\\r\\n* Navigasi ke kunci berikut: `HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\\\\Control\\\\TimeZoneInformation`\\r\\n* Buat entri **DWORD (32-bit) Value** baru bernama `RealTimeIsUniversal`.\\r\\n* Klik dua kali pada entri baru tersebut dan atur nilainya (Value data) menjadi 1.\\r\\n\\r\\nPilih salah satu metode saja. Metode pertama (mengubah Linux) sering dianggap paling mudah.\\r\\n\\r\\n## Referensi\\r\\n\\r\\n* https://www.youtube.com/watch?v=xO0lPxrtFCw"},{"id":"spring-boot-rest-api-pagination","metadata":{"permalink":"/blog/spring-boot-rest-api-pagination","source":"@site/blog/2025-04-15-spring-boot-rest-api-pagination.md","title":"Cara membuat Pagination REST API di Spring Boot","description":"Pada project-project Springboot sebelumnya, ketika melakukan Respose REST API find all untuk menampilkan semua data, biasanya kita menggunakan return Collection misalnya List. Cara ini tidak salah tapi bukan merupakan best practice apabila data yang dipanggil dalam jumlah yang banyak, misal datanya ada 1 juta, maka data tersebut akan dipanggil semua. Tentunya cara ini tidak efisien dan akan membuat aplikasi kita menjadi lambat.","date":"2025-04-15T00:00:00.000Z","tags":[{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"rest","permalink":"/blog/tags/rest"},{"inline":true,"label":"spring","permalink":"/blog/tags/spring"}],"readingTime":3.905,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"spring-boot-rest-api-pagination","title":"Cara membuat Pagination REST API di Spring Boot","authors":"topekox","tags":["springboot","rest","spring"]},"unlisted":false,"prevItem":{"title":"Mengatasi konflik waktu / time yang berubah di Windows setelah boot dari Linux","permalink":"/blog/mengatasi-masalah-time-dualboot-windows-linux"},"nextItem":{"title":"Menjalankan PostgreSQL di Docker Container pada Windows Subsystem for Linux (WSL)","permalink":"/blog/postgres-docker-wsl"}},"content":"Pada project-project Springboot sebelumnya, ketika melakukan Respose REST API find all untuk menampilkan semua data, biasanya kita menggunakan return Collection misalnya `List`. Cara ini tidak salah tapi bukan merupakan best practice apabila data yang dipanggil dalam jumlah yang banyak, misal datanya ada 1 juta, maka data tersebut akan dipanggil semua. Tentunya cara ini tidak efisien dan akan membuat aplikasi kita menjadi lambat.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nUntuk mengatasi Overload Data tersebut maka kita dapat menggunakan pagination. Dengan menggunakan pagination akan memungkinkan untuk menampilkan data secara bertahap, sehingga mengurangi beban memori dan meningkatkan kinerja aplikasi.\\r\\n\\r\\n## Collection vs Pagination\\r\\n\\r\\n* Collection\\r\\n\\r\\n```json\\r\\n[\\r\\n  {\\r\\n    \\"id\\": 1,\\r\\n    \\"name\\": \\"Iphone 16\\",\\r\\n    \\"description\\": \\"The new generation Iphone\\",\\r\\n    \\"price\\": 20000000\\r\\n  },\\r\\n  {\\r\\n    \\"id\\": 2,\\r\\n    \\"name\\": \\"Asus ROG\\",\\r\\n    \\"description\\": \\"The best laptop for gaming\\",\\r\\n    \\"price\\": 30000000\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\n* Pagination\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"content\\": [\\r\\n    {\\r\\n      \\"id\\": 1,\\r\\n      \\"name\\": \\"Iphone 16\\",\\r\\n      \\"description\\": \\"The new Iphone Generation\\",\\r\\n      \\"price\\": 15000000\\r\\n    },\\r\\n    {\\r\\n    \\"id\\": 2,\\r\\n    \\"name\\": \\"Asus ROG\\",\\r\\n    \\"description\\": \\"The best laptop for gaming\\",\\r\\n    \\"price\\": 30000000\\r\\n  }\\r\\n  ],\\r\\n  \\"page\\": {\\r\\n    \\"size\\": 20,\\r\\n    \\"number\\": 0,\\r\\n    \\"totalElements\\": 2,\\r\\n    \\"totalPages\\": 1\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nDengan menggunakan Collection data akan ditampilkan sesuai result dari operasi select all, sedangkan menggunakan pagination akan lebih terfilter karna data yang ditampilkan dapat dicustom jumlahnya.\\r\\n\\r\\n## Menambahkan Pagination di Aplikasi Spring Boot\\r\\n\\r\\nUntuk menambahkan pagination pada aplikasi Spring Boot application, kita cukup melakukan masuk ke dalam layer Controller dengan menambahkan parameter dengan type `Pageable`.\\r\\n\\r\\n```java\\r\\n@RestController\\r\\n@RequestMapping(\\"/api/product\\")\\r\\npublic class ProductController {\\r\\n\\r\\n    private final ProductService productService;\\r\\n\\r\\n    public ProductController(ProductService productService) {\\r\\n        this.productService = productService;\\r\\n    }\\r\\n\\r\\n    @GetMapping\\r\\n    public ResponseEntity<Page<ProductDTO>> getAll(\\r\\n            @SortDefault(sort = \\"id\\") @PageableDefault(size = 20) final Pageable pageable) {\\r\\n        return ResponseEntity.ok(productService.findAll(pageable));\\r\\n    }\\r\\n\\r\\n    // ...\\r\\n}\\r\\n```\\r\\n\\r\\nPada contoh di atas kita set default data yang ditampilkan adalah 20 dan sorting data berdasarkan `id` secara ascending. Parameter query dari `page`, `size` dan `sort` akan secara otomatis dibuat oleh Spring Boot.\\r\\n\\r\\nUntuk layer Service akan memanggil data Page yang berasal dari Repository yang di mapping ke DTO.\\r\\n\\r\\n```java\\r\\n@Service\\r\\npublic class ProductService {\\r\\n\\r\\n    // ...\\r\\n\\r\\n    public Page<ProductDTO> findAll(final Pageable pageable) {\\r\\n        final Page<Product> page = productRepository.findAll(pageable);\\r\\n        return new PageImpl<>(page.getContent()\\r\\n                .stream()\\r\\n                .map(productMapper::toDTO)\\r\\n                .collect(Collectors.toList()),\\r\\n                pageable, page.getTotalElements());\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nSedangkan untuk layer Repository dengan meng-extends `JpaRepository`, kita dapat memanggil object data dari database menggunakan `findAll()`.\\r\\n\\r\\n```java\\r\\npublic interface ProductRepository extends JpaRepository<Product, Long> {\\r\\n}\\r\\n```\\r\\n\\r\\n## Konfigurasi menggunakan PagedModel\\r\\n\\r\\nNamun ketika aplikasi dijalankan tanpa konfigurasi tambahan maka akan menghasilkan log warning seperti ini:\\r\\n\\r\\n```\\r\\nSerializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!\\r\\nFor a stable JSON structure, please use Spring Data\'s PagedModel or Spring HATEOAS and Spring Data\'s PagedResourcesAssembler.\\r\\n```\\r\\n\\r\\nHal ini terjadi class `PageImpl` tidak diserialkan untuk dikembalikan menjadi REST API.\\r\\n\\r\\nUntuk menghapus peringatan tersebut, kita hanya perlu menambahkan anotasi berikut ke salah satu class konfigurasi yang ada atau membuat class konfigurasi baru:\\r\\n\\r\\n```java\\r\\n@Configuration\\r\\n@EnableSpringDataWebSupport(\\r\\n        pageSerializationMode = EnableSpringDataWebSupport.PageSerializationMode.VIA_DTO\\r\\n)\\r\\npublic class JacsonConfig {\\r\\n}\\r\\n```\\r\\n\\r\\nKonfigurasi di atas digunakan untuk secara otomatis mentransform `PageImpl` menjadi `PagedModel`.\\r\\n\\r\\n## \ud83d\udd25 Testing\\r\\n\\r\\nKonfigurasi pada layer controller di atas kita membuat secara default menampilkan data 20, misalnya kita punya data 5 maka akan ditampilkan semua datanya:\\r\\n\\r\\n* URL: `http://localhost:8080/api/product`\\r\\n\\r\\n* Body response:\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"content\\": [\\r\\n    {\\r\\n      \\"id\\": 1,\\r\\n      \\"name\\": \\"Iphone 16\\",\\r\\n      \\"description\\": \\"The new Iphone Generation\\",\\r\\n      \\"price\\": 15000000\\r\\n    },\\r\\n    {\\r\\n      \\"id\\": 2,\\r\\n      \\"name\\": \\"Asus ROG\\",\\r\\n      \\"description\\": \\"The best laptop for gaming\\",\\r\\n      \\"price\\": 30000000\\r\\n    },\\r\\n    {\\r\\n      \\"id\\": 3,\\r\\n      \\"name\\": \\"Infinix Hot 50 Pro+\\",\\r\\n      \\"description\\": \\"The New Best Android Phone Low Price\\",\\r\\n      \\"price\\": 3000000\\r\\n    },\\r\\n    {\\r\\n      \\"id\\": 4,\\r\\n      \\"name\\": \\"Google Pixel 9\\",\\r\\n      \\"description\\": \\"The New Android Phone from Google\\",\\r\\n      \\"price\\": 15000000\\r\\n    },\\r\\n    {\\r\\n      \\"id\\": 5,\\r\\n      \\"name\\": \\"Samsung Galaxy S24 FE\\",\\r\\n      \\"description\\": \\"The New Android Phone from Samsung with Galaxy AI\\",\\r\\n      \\"price\\": 10000000\\r\\n    }\\r\\n  ],\\r\\n  \\"page\\": {\\r\\n    \\"size\\": 20,\\r\\n    \\"number\\": 0,\\r\\n    \\"totalElements\\": 5,\\r\\n    \\"totalPages\\": 1\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nInformasi page secara otomatis akan digenerate oleh `Page` Spring Boot, seperti:\\r\\n* `size` = jumlah data element\\r\\n* `number` = index page (index dimulai dari 0)\\r\\n* `totalElements` = jumlah element dalam page yang sedang aktif\\r\\n* `totalPages` = jumlah total page\\r\\n\\r\\nBagaimana kalo misalnya kita ingin custom data yang ingin ditampikan, contoh setiap page hanya ingin menampilkan 2 data saja, maka dari data di atas akan dibuat 3 page.\\r\\n\\r\\n* URL: `http://localhost:8080/api/product?size=2&page=0`\\r\\n\\r\\n* Body:\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"content\\": [\\r\\n    {\\r\\n      \\"id\\": 1,\\r\\n      \\"name\\": \\"Iphone 16\\",\\r\\n      \\"description\\": \\"The new Iphone Generation\\",\\r\\n      \\"price\\": 15000000\\r\\n    },\\r\\n    {\\r\\n      \\"id\\": 2,\\r\\n      \\"name\\": \\"Asus ROG\\",\\r\\n      \\"description\\": \\"The best laptop for gaming\\",\\r\\n      \\"price\\": 30000000\\r\\n    }\\r\\n  ],\\r\\n  \\"page\\": {\\r\\n    \\"size\\": 2,\\r\\n    \\"number\\": 0,\\r\\n    \\"totalElements\\": 5,\\r\\n    \\"totalPages\\": 3\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n:::info\\r\\n__INFO__: Index page dimulai dari 0.\\r\\n:::\\r\\n\\r\\nUntuk pindah halaman page cukup mengganti value path variable, contoh berpindah ke page 1 `http://localhost:8080/api/product?size=2&page=1`.\\r\\n\\r\\n## \ud83c\udf10 Baca Juga\\r\\n\\r\\n* https://bootify.io/spring-boot/pagination-in-spring-boot-rest-api.html"},{"id":"postgres-docker-wsl","metadata":{"permalink":"/blog/postgres-docker-wsl","source":"@site/blog/2025-04-10-postgres-docker-wsl.md","title":"Menjalankan PostgreSQL di Docker Container pada Windows Subsystem for Linux (WSL)","description":"Jadi saya biasanya menggunakan Docker pada sistem operasi Linux (Ubuntu, Fedora) menggunakan Docker Engine saja tanpa Docker Desktop, karena menurut saya lebih mudah digunakan. Docker Engine mudah digunakan di Linux karena dirancang untuk memanfaatkan fitur-fitur kernel Linux, seperti namespaces dan cgroups, yang mendukung isolasi dan efisiensi kontainer.","date":"2025-04-10T00:00:00.000Z","tags":[{"inline":true,"label":"docker","permalink":"/blog/tags/docker"},{"inline":true,"label":"postgres","permalink":"/blog/tags/postgres"},{"inline":true,"label":"wsl","permalink":"/blog/tags/wsl"}],"readingTime":3.57,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"postgres-docker-wsl","title":"Menjalankan PostgreSQL di Docker Container pada Windows Subsystem for Linux (WSL)","authors":"topekox","tags":["docker","postgres","wsl"]},"unlisted":false,"prevItem":{"title":"Cara membuat Pagination REST API di Spring Boot","permalink":"/blog/spring-boot-rest-api-pagination"},"nextItem":{"title":"Spring Boot CRUD REST API Java Record DTO + Mapper dengan Mapstruct","permalink":"/blog/spring-boot-crud-rest-dto-mapstruct"}},"content":"Jadi saya biasanya menggunakan Docker pada sistem operasi Linux (Ubuntu, Fedora) menggunakan Docker Engine saja tanpa Docker Desktop, karena menurut saya lebih mudah digunakan. Docker Engine mudah digunakan di Linux karena dirancang untuk memanfaatkan fitur-fitur kernel Linux, seperti *namespaces* dan *cgroups*, yang mendukung isolasi dan efisiensi kontainer. \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n![HeidiSQL](/img/general/logo-wsl.jpg)\\r\\n\\r\\nDocker Engine sering lebih dipilih dibandingkan Docker Desktop karena beberapa alasan berikut:\\r\\n\\r\\n1. **Ringan dan Efisien**: Docker Engine tidak memerlukan antarmuka grafis atau mesin virtual, sehingga lebih ringan dan efisien, terutama di sistem operasi berbasis Linux.\\r\\n2. **Gratis untuk Penggunaan Komersial**: Docker Engine tidak memiliki batasan lisensi seperti Docker Desktop, yang memerlukan langganan berbayar untuk penggunaan komersial di perusahaan besar.\\r\\n3. **Kontrol Lebih Besar**: Dengan Docker Engine, pengguna memiliki kontrol penuh atas konfigurasi dan pengelolaan kontainer tanpa tambahan fitur yang mungkin tidak diperlukan.\\r\\n4. **Kompatibilitas Linux**: Docker Engine dirancang untuk berjalan langsung di Linux, sehingga tidak memerlukan layer tambahan seperti mesin virtual yang digunakan Docker Desktop di Windows atau macOS.\\r\\n\\r\\nJadi itulah beberapa alasan saya lebih memilih Docker Engine dibanding Docker Desktop. Tapi ketika menggunakan sistem operasi Windows 11, tidak terdapat akses langsung menggunakan Docker Engine. Solusi yang dapat digunakan untuk menggunakan Docker Engine di Windows 11 adalah menginstallnya pada Windows Subsystem for Linux (WSL) atau menginstallnya pada software virtual mesin seperti Virtual Box, VMWare atau Qemu.\\r\\n\\r\\nPada artikel ini saya akan menggunakan WSL karena lebih cepat dalam pengoperasiannya dibanding menggunakan software virtual mesin.\\r\\n\\r\\n## \u2705 Install WSL 2 pada Windows 11\\r\\n\\r\\nPada tutorial ini kami berasumsi bahwa teman-teman sudah melakukan instalasi WSL 2 dan sudah menginstall Ubuntu pada mesin WSL.\\r\\n\\r\\n:::info\\r\\nUntuk instalasi WSL 2 pada Windows 11 dapat melihat dokumentasi lengkapnya di sini:\\r\\n\\r\\nhttps://learn.microsoft.com/en-us/windows/wsl/install\\r\\n:::\\r\\n\\r\\n## \u2705 Install Docker pada WSL 2\\r\\n\\r\\n1. Buka Ubuntu pada bash WSL 2.\\r\\n2. Update Linux Repository\\r\\n\\r\\n```\\r\\nsudo apt-get update\\r\\n```\\r\\n\\r\\n3. Download dependency dan menambahkan Docker GPG Key\\r\\n\\r\\n```\\r\\nsudo apt-get install ca-certificates curl\\r\\nsudo install -m 0755 -d /etc/apt/keyrings\\r\\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\\r\\nsudo chmod a+r /etc/apt/keyrings/docker.asc\\r\\n```\\r\\n\\r\\n4. Menambahkan repository Docker\\r\\n\\r\\n```\\r\\necho \\\\\\r\\n  \\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\\\\r\\n  $(. /etc/os-release && echo \\"${UBUNTU_CODENAME:-$VERSION_CODENAME}\\") stable\\" | \\\\\\r\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\\r\\n```\\r\\n\\r\\n5. Update \\r\\n\\r\\n```\\r\\nsudo apt-get update\\r\\n```\\r\\n\\r\\n6. Install Docker\\r\\n\\r\\n```\\r\\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\\r\\n```\\r\\n\\r\\n7. Cek Instalasi\\r\\n\\r\\n```\\r\\nucup@Timposu:~$ docker --version\\r\\nDocker version 28.0.4, build b8034c0\\r\\n```\\r\\n\\r\\n## \u2705 Jalankan Container Postgresql\\r\\n\\r\\n1. Agar datanya tetap ada, maka kita perlu membuat volume, di sini saya akan membuat volume dengann nama `postgres-volume`:\\r\\n\\r\\n```\\r\\ndocker volume create postgres-volume\\r\\n```\\r\\n\\r\\n2. Membuat container Postgresql dengan nama `postgresqldatabase` dan password `secretpassword`:\\r\\n\\r\\n```\\r\\ndocker container run -d --rm --name postgresqldatabase -e POSTGRES_PASSWORD=secretpassword -p 5432:5432 -v postgres-volume:/var/lib/postgresql\\r\\n/data postgres\\r\\n```\\r\\n\\r\\n3. Cek container:\\r\\n\\r\\n```\\r\\nucup@Timposu:~$ docker container ps\\r\\nCONTAINER ID   IMAGE           COMMAND                  CREATED         STATUS         PORTS                                         NAMES\\r\\n59c7cb0f2a7f   postgres:17.4   \\"docker-entrypoint.s\u2026\\"   2 seconds ago   Up 2 seconds   0.0.0.0:5432->5432/tcp, [::]:5432->5432/tcp   postgresqldatabase\\r\\n```\\r\\n\\r\\n## \u2705 Menghubungkan Database Postgres ke Windows\\r\\n\\r\\nUntuk menghubungkan aplikasi kita dengan PostgreSQL yang ada pada container Docker di WSL2, kita bisa menggunakan aplikasi client lain seperti HeidiSQL, DBEaver atau PGAdmin.\\r\\n\\r\\n:::info\\r\\nDocker pada WSL berjalan ketika bash Ubuntu sedang aktif, pastikan bash Ubuntu pada WSL terbuka.\\r\\n:::\\r\\n\\r\\n1. Buka Powershell di Windows\\r\\n\\r\\n2. Cek IP Address WSL 2 dengan perintah \\r\\n\\r\\n```\\r\\nwsl hostname -I\\r\\n```\\r\\n\\r\\nKita akan mendapatkan 2 IP Address:\\r\\n\\r\\n```\\r\\nPS C:\\\\Users\\\\ucup> wsl hostname -I\\r\\n172.30.163.213 172.17.0.1\\r\\n```\\r\\n\\r\\nDimana IP Address pertama yaitu `172.30.163.213` adalah IP Address dari WSL 2 (hasil IP Address mungkin berbeda dimasing-masing komputer).\\r\\n\\r\\n3. Sekarang kita akan melakukan koneksi TCP pada Port 5432 dimana port tersebut yang digunakan oleh Postgresql yang ada dalam DOcker container pada WSL 2.\\r\\n\\r\\n```\\r\\nTest-NetConnection -ComputerName 172.30.163.213 -Port 5432\\r\\n```\\r\\n\\r\\nGanti IP Address di atas dengan IP Address teman-teman\\r\\n\\r\\nTunggu beberapa saat, jika berhasil maka hasil akan terlihat seperti di bawah ini:\\r\\n\\r\\n```\\r\\nPS C:\\\\Users\\\\ucup> Test-NetConnection -ComputerName 172.30.163.213 -Port 5432                                           \\r\\n\\r\\nComputerName     : 172.30.163.213\\r\\nRemoteAddress    : 172.30.163.213\\r\\nRemotePort       : 5432\\r\\nInterfaceAlias   : vEthernet (WSL (Hyper-V firewall))\\r\\nSourceAddress    : 172.30.160.1\\r\\nTcpTestSucceeded : True\\r\\n```\\r\\n\\r\\nJika nilai dari `TcpTestSucceeded` adalah `True` maka koneksi berhasil. **Jika nilai `TcpTestSucceeded` adalah `False`** maka silahkan cek koneksi atau container apakah sudah sesuai port, konfigurasinya seperti di atas.\\r\\n\\r\\n## \u2705 Cek koneksi\\r\\n\\r\\nSekarang kita dapat melakukan uji coba menggunakan PostgreSQL Client seperti HeidiSQL, DBEaver atau PGAdmin.\\r\\n\\r\\n![HeidiSQL](/img/general/heidi.png)\\r\\n\\r\\n## \ud83c\udf10 Referensi\\r\\n\\r\\n* https://medium.com/@jkarelins/run-postgresql-database-in-docker-container-on-wsl2-656ed3c02280\\r\\n* https://learn.microsoft.com/en-us/windows/wsl/install"},{"id":"spring-boot-crud-rest-dto-mapstruct","metadata":{"permalink":"/blog/spring-boot-crud-rest-dto-mapstruct","source":"@site/blog/2025-03-23-spring-boot-crud-rest-dto-mapper.md","title":"Spring Boot CRUD REST API Java Record DTO + Mapper dengan Mapstruct","description":"Pada tutorial ini, kita akan membuat aplikasi Spring Boot CRUD (Create, Read, Update, Delete) seperti pada tutorial sebelumnya. Jika pada tutorial sebelumnya kita melakukan mapping untuk konversi DTO ke Entity atau sebaliknya masih menggunakan cara manual, tutorial kita menggunakan generator mapper Mapstruct.","date":"2025-03-23T00:00:00.000Z","tags":[{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"rest","permalink":"/blog/tags/rest"},{"inline":true,"label":"api","permalink":"/blog/tags/api"},{"inline":true,"label":"database","permalink":"/blog/tags/database"}],"readingTime":8.51,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"spring-boot-crud-rest-dto-mapstruct","title":"Spring Boot CRUD REST API Java Record DTO + Mapper dengan Mapstruct","authors":"topekox","tags":["springboot","spring","rest","api","database"]},"unlisted":false,"prevItem":{"title":"Menjalankan PostgreSQL di Docker Container pada Windows Subsystem for Linux (WSL)","permalink":"/blog/postgres-docker-wsl"},"nextItem":{"title":"Step-by-Step Membangun Spring Boot CRUD REST API dengan MySQL dan Java Record DTO","permalink":"/blog/spring-boot-crud-rest-mysql-java-record-dto"}},"content":"Pada tutorial ini, kita akan membuat aplikasi Spring Boot CRUD (Create, Read, Update, Delete) seperti pada [tutorial sebelumnya](/blog/spring-boot-crud-rest-mysql-java-record-dto). Jika pada tutorial sebelumnya kita melakukan mapping untuk konversi DTO ke Entity atau sebaliknya masih menggunakan cara manual, tutorial kita menggunakan generator mapper [Mapstruct](https://mapstruct.org/).\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n\\r\\n> __Baca Juga:__ \\r\\n> * [Arsitektur Spring Boot - Controller, Service, Repository dan Database](/blog/spring-boot-arsitektur-controller-service-repository-database-flow)\\r\\n> * [Implementasi Spring Boot CRUD REST API dengan MySQL dan Java Record DTO](/blog/spring-boot-crud-rest-mysql-java-record-dto)\\r\\n\\r\\n<img src=\\"/img/general/Spring-boot-diagram2.svg\\"/>\\r\\n\\r\\n## \ud83c\udf0e Mapstruct\\r\\n\\r\\n[Mapstruct](https://mapstruct.org/) adalah Java Annotation Processor yang menghasilkan kode mapping pada waktu kompilasi.  Dengan kata lain mapstruct sebagai generator mapper  yang dapat digunakan untuk mengonversi antar model di program Java. Mapstruct sangat berguna terutama saat berhadapan dengan REST API, Microservices, atau pada layer businness logic yang kompleks. \\r\\n\\r\\n### \u2753Kenapa menggunakan Mapstruct\\r\\n\\r\\n* \u2705 **Lebih cepat**: Karena mapping terjadi pada waktu kompilasi, tidak ada overhead waktu proses.\\r\\n* \u2705 **Lebih clean**: Menghilangkan resource kode manual (Boilerplate code).\\r\\n* \u2705 **Aman terhadap tipe**: Kompiler memvalidasi mapping, mengurangi runtime errors.\\r\\n\\r\\n### \u26a0\ufe0f Cara Tradisional\\r\\n\\r\\nSebagian besar programmer Java masih masih menggunakan mapping secara manual atau menggunakan library berbasis reflection yang tidak efisien, yang mengarah kepada:\\r\\n\\r\\n* \ud83d\udc80 Kode berantakan dan berulang yang susah untuk di-maintain.\\r\\n* \ud83d\udc22 Overhead performa karena runtime reflection.\\r\\n* \ud83e\udd2f Mapping rawan error yang dapat menyebabkan bug.\\r\\n\\r\\nContoh misalnya kita membuat aplikasi Spring Boot berbasis REST API dengan memiliki:\\r\\n\\r\\n* `Person` sebagai Entity untuk representasi dengan database model.\\r\\n* `PersonDTO` untuk mentransfer data ke client/frontend.\\r\\n\\r\\nTanpa Mapstruct kita mungkin akan membuat class mapper untuk konversi antar model seperti berikut:\\r\\n\\r\\n```java\\r\\npublic class PersonMapper {\\r\\n\\r\\n    public static PersonDTO toDto(Person person) {\\r\\n        return new PersonDTO(\\r\\n            person.getId(), \\r\\n            person.getFirstName(), \\r\\n            person.getLastName(), \\r\\n            person.getEmail());\\r\\n    }\\r\\n\\r\\n    public static Person toEntity(PersonDTO personDTO) {\\r\\n        return new Person(\\r\\n            personDTO.id(), \\r\\n            personDTO.firstName(), \\r\\n            personDTO.lastName(), \\r\\n            personDTO.email());\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nKode di atas terlihat berulang-ulang dan verbose.\\r\\n\\r\\n* \ud83d\udc80 Kita perlu mapping setiap bidang secara manual.\\r\\n* \ud83d\ude35\u200d\ud83d\udcab Dengan model yang kompleks, logic mapping menjadi berantakan.\\r\\n* \ud83e\udd2f Setiap menambahkan field baru, kita perlu memperbarui mapper, yang rawan kesalahan.\\r\\n\\r\\nDan ketika `PersonMapper` digunakan, misalnya pada layer Service sebagai berikut:\\r\\n\\r\\n```java\\r\\npublic List<PersonDTO> getAll() {\\r\\n    return personRepository.findAll().stream()\\r\\n            .map(PersonMapper::toDto)\\r\\n            .collect(Collectors.toList());\\r\\n}\\r\\n\\r\\npublic PersonDTO findById(Long id) {\\r\\n    return personRepository.findById(id)\\r\\n            .map(PersonMapper::toDto)\\r\\n            .orElseThrow(() -> new NotFoundException(\\"ID_NOT_FOUND\\"));\\r\\n}\\r\\n\\r\\npublic PersonDTO create(PersonDTO personDTO) {\\r\\n    return PersonMapper.toDto(personRepository.save(PersonMapper.toEntity(personDTO)));\\r\\n}\\r\\n\\r\\npublic PersonDTO update(Long id, PersonDTO personDTO) {\\r\\n    Person person = personRepository.findById(id)\\r\\n            .orElseThrow(() -> new NotFoundException(\\"ID_NOT_FOUND\\"));\\r\\n    person.setFirstName(personDTO.firstName());\\r\\n    person.setLastName(personDTO.lastName());\\r\\n    person.setEmail(personDTO.email());\\r\\n    return PersonMapper.toDto(personRepository.save(person));\\r\\n}\\r\\n\\r\\npublic void delete(Long id) {\\r\\n    Person person = personRepository.findById(id)\\r\\n            .orElseThrow(() -> new NotFoundException(\\"ID_NOT_FOUND\\"));\\r\\n    personRepository.delete(person);\\r\\n}\\r\\n```\\r\\n\\r\\n\ud83d\udd25Kita akan mengganti mapper manual di atas menggunakan Mapstruct, sehingga dapat diimplementasikan lebih mudah (contohnya pada layer Service).\\r\\n\\r\\n---\\r\\n\\r\\n## \ud83e\uddd1\u200d\ud83d\udcbb Tools\\r\\n\\r\\nPada tutorial kali ini kita menggunakan:\\r\\n\\r\\n* \u2714\ufe0f Java Development Kit (JDK) 21 atau yang terbaru.\\r\\n* \u2714\ufe0f Apache Maven (Project Manajemen).\\r\\n* \u2714\ufe0f H2 Database (Database Embedded / in-memory database).\\r\\n* \u2714\ufe0f IDE (Intellij IDEA, Eclipse, Netbeans atau VS Code).\\r\\n* \u2714\ufe0f Mapstruct.\\r\\n* \u2714\ufe0f Postman atau cURL (test API).\\r\\n\\r\\n## 1\ufe0f\u20e3 Dependency\\r\\n\\r\\nDependency pada `pom.xml`:\\r\\n\\r\\n```xml\\r\\n\x3c!-- Spring Boot JPA --\x3e\\r\\n<dependency>\\r\\n    <groupId>org.springframework.boot</groupId>\\r\\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\\r\\n</dependency>\\r\\n\\r\\n\x3c!-- Spring Boot Web --\x3e\\r\\n<dependency>\\r\\n    <groupId>org.springframework.boot</groupId>\\r\\n    <artifactId>spring-boot-starter-web</artifactId>\\r\\n</dependency>\\r\\n\\r\\n\x3c!-- H2 Database --\x3e\\r\\n<dependency>\\r\\n    <groupId>com.h2database</groupId>\\r\\n    <artifactId>h2</artifactId>\\r\\n    <scope>runtime</scope>\\r\\n</dependency>\\r\\n\\r\\n\x3c!-- Mapstruct --\x3e\\r\\n<dependency>\\r\\n    <groupId>org.mapstruct</groupId>\\r\\n    <artifactId>mapstruct</artifactId>\\r\\n    <version>1.6.3</version>\\r\\n</dependency>\\r\\n<dependency>\\r\\n    <groupId>org.mapstruct</groupId>\\r\\n    <artifactId>mapstruct-processor</artifactId>\\r\\n    <version>1.6.3</version>\\r\\n</dependency>\\r\\n```\\r\\n\\r\\n## 2\ufe0f\u20e3 Konfigurasi `application.properties`\\r\\n\\r\\nPada file `src/main/resources/application.properties` kita perlu melakukan konfigurasi agar Spring Boot terhubung ke database:\\r\\n\\r\\n```\\r\\nspring.datasource.url=jdbc:h2:mem:springapp\\r\\nspring.datasource.driverClassName=org.h2.Driver\\r\\nspring.datasource.username=sa\\r\\nspring.datasource.password=\\r\\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\\r\\nspring.jpa.show-sql=true\\r\\nspring.jpa.hibernate.ddl-auto=update\\r\\n\\r\\nspring.h2.console.enabled=true\\r\\nspring.h2.console.path=/h2\\r\\n```\\r\\n\\r\\nKonfigurasi di atas adalah konfigurasi minimal untuk terhubung ke database H2. Beberapa variable yang dimasukan adalah nama database adalah `springapp` dengan `urljdbc:h2:mem:springapp` , `username` adalah `sa` dan tanpa password. Konfigurasi adalah kita mengaktifkan console database H2 ketika dijalankan dengan nilai `true`, serta url path akses consolenya adalah `/h2`. Konfigurasi sisanya adalah konfigurasi JPA dan Hibernate.\\r\\n\\r\\n## 3\ufe0f\u20e3 Membuat Entity / Model\\r\\n\\r\\nMembuat Entity `Person` dalam format POJO, untuk mewakili tabel `person` dalam database:\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.spring.mvc.model;\\r\\n\\r\\nimport jakarta.persistence.*;\\r\\n\\r\\nimport java.util.Objects;\\r\\n\\r\\n@Entity\\r\\n@Table(name = \\"person\\")\\r\\npublic class Person {\\r\\n\\r\\n    @Id\\r\\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\\r\\n    private Long id;\\r\\n\\r\\n    private String firstName;\\r\\n\\r\\n    private String lastName;\\r\\n\\r\\n    private String email;\\r\\n\\r\\n    public Person() {\\r\\n    }\\r\\n\\r\\n    public Person(Long id, String firstName, String lastName, String email) {\\r\\n        this.id = id;\\r\\n        this.firstName = firstName;\\r\\n        this.lastName = lastName;\\r\\n        this.email = email;\\r\\n    }\\r\\n\\r\\n    public Long getId() {\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    public void setId(Long id) {\\r\\n        this.id = id;\\r\\n    }\\r\\n\\r\\n    public String getFirstName() {\\r\\n        return firstName;\\r\\n    }\\r\\n\\r\\n    public void setFirstName(String firstName) {\\r\\n        this.firstName = firstName;\\r\\n    }\\r\\n\\r\\n    public String getLastName() {\\r\\n        return lastName;\\r\\n    }\\r\\n\\r\\n    public void setLastName(String lastName) {\\r\\n        this.lastName = lastName;\\r\\n    }\\r\\n\\r\\n    public String getEmail() {\\r\\n        return email;\\r\\n    }\\r\\n\\r\\n    public void setEmail(String email) {\\r\\n        this.email = email;\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nClass entity yang dibuat adalah representasi `person`, dengan field `id`, `firsName`, `lastName` dan `email`.\\r\\n\\r\\n## 4\ufe0f\u20e3 Membuat Repository\\r\\n\\r\\nMembuat interface Person Repository:\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.spring.mvc.repository;\\r\\n\\r\\nimport com.timposulabs.spring.mvc.model.Person;\\r\\nimport org.springframework.data.jpa.repository.JpaRepository;\\r\\n\\r\\npublic interface PersonRepository extends JpaRepository<Person, Long> {\\r\\n}\\r\\n```\\r\\n\\r\\n`JpaRepository` Menyediakan semua operasi CRUD yang diperlukan seperti `save()`, `findAll()`, `findById()`, `deleteById()` dan tanpa perlu menulisnya sendiri.\\r\\n\\r\\n## 5\ufe0f\u20e3 Membuat Java Record untuk DTO\\r\\n\\r\\nJava Record adalah class khusus di Java yang berguna untuk mengurangi kode boilerplate, dengan secara otomatis menghasilkan constructor, getter, setter. Ini ideal untuk DTO yang bertugas untuk membawa data antara server dan client.\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.spring.mvc.dto;\\r\\n\\r\\npublic record PersonDTO(Long id, String firstName, String lastName, String email) {\\r\\n}\\r\\n```\\r\\n\\r\\n## 6\ufe0f\u20e3 Membuat Mapstruct Mapper\\r\\n\\r\\n\ud83d\ude80 Menggunakan MapStruct untuk menghindari mapping secara manual untuk konversi antara DTO dan Entity.\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.spring.mvc.util;\\r\\n\\r\\nimport com.timposulabs.spring.mvc.dto.PersonDTO;\\r\\nimport com.timposulabs.spring.mvc.model.Person;\\r\\nimport org.mapstruct.Mapper;\\r\\nimport org.mapstruct.factory.Mappers;\\r\\n\\r\\n@Mapper\\r\\npublic interface PersonMapper {\\r\\n\\r\\n    PersonMapper INSTANCE = Mappers.getMapper(PersonMapper.class);\\r\\n\\r\\n    PersonDTO toDto(Person person);\\r\\n\\r\\n    Person toEntity(PersonDTO personDTO);\\r\\n}\\r\\n```\\r\\n\\r\\n## 7\ufe0f\u20e3 Handle Exception\\r\\n\\r\\nDari aplikasi ini biar seru kita diperlu menambahkan handle Exception. Dimana kita akan membuat `NotFoundException` yang akan ditrigger ketika `id` tidak ditemukan.\\r\\n\\r\\n### \u2705 Membuat API Error\\r\\n\\r\\nKita akan membuat standard response API seperti berikut:\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"error\\": \\"ID Not Found\\",\\r\\n  \\"path\\": \\"/api/person/1\\",\\r\\n  \\"status\\": 404,\\r\\n  \\"timestamp\\": \\"2025-03-16T12:40:42.311569409\\"\\r\\n}\\r\\n```\\r\\n\\r\\nPenjelasan:\\r\\n\\r\\n* `error` : Keterangan Error.\\r\\n* `path` : URL Request API penyebab error.\\r\\n* `status` : Kode HTTP status.\\r\\n* `timestamp` : Keterangan waktu error dalam format timestamp.\\r\\n\\r\\nKita akan mengikuti format response API di atas dengan membuat Java Record:\\r\\n\\r\\n```java\\r\\nimport java.time.LocalDateTime;\\r\\n\\r\\npublic record ApiError(\\r\\n        String error,\\r\\n        String path,\\r\\n        int status,\\r\\n        LocalDateTime timestamp) {\\r\\n}\\r\\n```\\r\\n\\r\\n### 2\ufe0f\u20e3 Membuat Class NotFoundException\\r\\n\\r\\nSelanjutnya membuat custom class `NotFoundException` extends dari `RuntimeException`:\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.spring.mvc.exception;\\r\\n\\r\\npublic class NotFoundException extends RuntimeException {\\r\\n    public NotFoundException(String message) {\\r\\n        super(message);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n### 3\ufe0f\u20e3 Membuat Exception Handler\\r\\n\\r\\nSelanjutnya membuat Exception Handler yang menggunakan annotation `@ControllerAdvice`, yang mana Spring akan menjalankan Advice terlebih dahulu untuk menangkap exception yang ada. Maka dari itu semua class exception yang ada pada `ExceptionHandler` akan dihandle dalam class ini, dalam kasus ini exception `NotFoundException` yang telah kita buat sebelumnya akan dihandle disini.\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.spring.mvc.exception;\\r\\n\\r\\nimport jakarta.servlet.http.HttpServletRequest;\\r\\nimport org.springframework.http.HttpStatus;\\r\\nimport org.springframework.http.ResponseEntity;\\r\\nimport org.springframework.web.bind.annotation.ExceptionHandler;\\r\\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\\r\\n\\r\\nimport java.time.LocalDateTime;\\r\\n\\r\\n@RestControllerAdvice\\r\\npublic class GlobalExceptionHandler {\\r\\n\\r\\n    @ExceptionHandler(NotFoundException.class)\\r\\n    public ResponseEntity<ApiError> notFoundException(NotFoundException ex, HttpServletRequest request) {\\r\\n        ApiError apiError = new ApiError(\\r\\n                ex.getMessage(),\\r\\n                request.getRequestURI(),\\r\\n                HttpStatus.NOT_FOUND.value(),\\r\\n                LocalDateTime.now());\\r\\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(apiError);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n## 8\ufe0f\u20e3 Membuat Service Layer\\r\\n\\r\\nDalam layer service, kita akan menggunakan `PersonMapper` yang sudah dibuat untuk melakukan konversi antara `Person` (entity) dan `PersonDTO` (DTO):\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.spring.mvc.service;\\r\\n\\r\\nimport com.timposulabs.spring.mvc.dto.PersonDTO;\\r\\nimport com.timposulabs.spring.mvc.exception.NotFoundException;\\r\\nimport com.timposulabs.spring.mvc.model.Person;\\r\\nimport com.timposulabs.spring.mvc.repository.PersonRepository;\\r\\nimport com.timposulabs.spring.mvc.util.PersonMapper;\\r\\nimport org.springframework.stereotype.Service;\\r\\n\\r\\nimport java.util.List;\\r\\nimport java.util.stream.Collectors;\\r\\n\\r\\n@Service\\r\\npublic class PersonService {\\r\\n\\r\\n    private final PersonRepository personRepository;\\r\\n\\r\\n    public PersonService(PersonRepository personRepository) {\\r\\n        this.personRepository = personRepository;\\r\\n    }\\r\\n\\r\\n    public List<PersonDTO> getAll() {\\r\\n        return personRepository.findAll().stream()\\r\\n                .map(PersonMapper.INSTANCE::toDto)\\r\\n                .collect(Collectors.toList());\\r\\n    }\\r\\n\\r\\n    public PersonDTO findById(Long id) {\\r\\n        return personRepository.findById(id)\\r\\n                .map(PersonMapper.INSTANCE::toDto)\\r\\n                .orElseThrow(() -> new NotFoundException(\\"ID_NOT_FOUND\\"));\\r\\n    }\\r\\n\\r\\n    public PersonDTO create(PersonDTO personDTO) {\\r\\n        return PersonMapper.INSTANCE.toDto(personRepository.save(PersonMapper.INSTANCE.toEntity(personDTO)));\\r\\n    }\\r\\n\\r\\n    public PersonDTO update(Long id, PersonDTO personDTO) {\\r\\n        Person person = personRepository.findById(id)\\r\\n                .orElseThrow(() -> new NotFoundException(\\"ID_NOT_FOUND\\"));\\r\\n        person.setFirstName(personDTO.firstName());\\r\\n        person.setLastName(personDTO.lastName());\\r\\n        person.setEmail(personDTO.email());\\r\\n        return PersonMapper.INSTANCE.toDto(personRepository.save(person));\\r\\n    }\\r\\n\\r\\n    public void delete(Long id) {\\r\\n        Person person = personRepository.findById(id)\\r\\n                .orElseThrow(() -> new NotFoundException(\\"ID_NOT_FOUND\\"));\\r\\n        personRepository.delete(person);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n* Konversi logic (antara Entitas dan DTO) disimpan di layer service untuk menjaga controller tetap bersih dan hanya berfokus pada penanganan request HTTP.\\r\\n* `PersonMapper` akan mengonversi entity __Person__ menjadi __PersonDTO__, begitupun sebaliknya.\\r\\n\\r\\n## 9\ufe0f\u20e3 Membuat Controller \\r\\n\\r\\nDalam layer ini, kita akan membuat Controller untuk REST API:\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.spring.mvc.controller;\\r\\n\\r\\nimport com.timposulabs.spring.mvc.dto.PersonDTO;\\r\\nimport com.timposulabs.spring.mvc.service.PersonService;\\r\\nimport org.springframework.http.HttpStatus;\\r\\nimport org.springframework.http.ResponseEntity;\\r\\nimport org.springframework.web.bind.annotation.*;\\r\\n\\r\\nimport java.util.List;\\r\\n\\r\\n@RestController\\r\\n@RequestMapping(\\"/person\\")\\r\\npublic class PersonController {\\r\\n\\r\\n    private final PersonService personService;\\r\\n\\r\\n    public PersonController(PersonService personService) {\\r\\n        this.personService = personService;\\r\\n    }\\r\\n\\r\\n    // \u2705 GET all Person (200 OK)\\r\\n    @GetMapping\\r\\n    public ResponseEntity<List<PersonDTO>> getAll() {\\r\\n        return ResponseEntity.ok(personService.getAll());\\r\\n    }\\r\\n\\r\\n    // \u2705 GET Person by ID (200 OK / 404 Not Found)\\r\\n    @GetMapping(\\"/{id}\\")\\r\\n    public ResponseEntity<PersonDTO> getById(@PathVariable Long id) {\\r\\n        return ResponseEntity.ok(personService.findById(id));\\r\\n    }\\r\\n\\r\\n    // \u2705 POST Create new Person (201 Created)\\r\\n    @PostMapping\\r\\n    public ResponseEntity<PersonDTO> create(@RequestBody PersonDTO personDTO) {\\r\\n        return ResponseEntity.status(HttpStatus.CREATED).body(personService.create(personDTO));\\r\\n    }\\r\\n\\r\\n    // \u2705 PUT Update Person (200 OK / 404 Not Found)\\r\\n    @PutMapping(\\"/{id}\\")\\r\\n    public ResponseEntity<PersonDTO> update(@PathVariable Long id, @RequestBody PersonDTO personDTO) {\\r\\n        return ResponseEntity.ok(personService.update(id, personDTO));\\r\\n    }\\r\\n\\r\\n    // \u2705 DELETE Person (204 No Content / 404 Not Found)\\r\\n    @DeleteMapping(\\"/{id}\\")\\r\\n    public ResponseEntity<Void> delete(@PathVariable Long id) {\\r\\n        personService.delete(id);\\r\\n        return ResponseEntity.noContent().build();\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n* __GET, POST, PUT, dan DELETE__ HTTP adalah method yang digunakan untuk CRUD operations.\\r\\n* Controller tidak memiliki bussines logic. Dia hanya berfungsi untuk mengatur request ke layer Service dan memberikan response ke Client. Ini membuat kode lebih clean dan menjadi mudah untuk dimaintain.\\r\\n\\r\\n\\r\\n## 8\ufe0f\u20e3 Running dan Testing API\\r\\n\\r\\nJalankan aplikasi dan lakukan pengujian dari client bisa menggunakan Postman atau cURL.\\r\\n\\r\\n### \ud83d\udd25 Testing\\r\\n\\r\\n\u2705 __GET__ all person:\\r\\n\\r\\n* URL: `http://localhost:8080/person`\\r\\n\\r\\n\u2705 __GET__ product by ID:\\r\\n\\r\\n* URL: `http://localhost:8080/person/{id}`\\r\\n\\r\\n\u2705 __POST__ membuat product baru:\\r\\n\\r\\n* URL: `http://localhost:8080/person`\\r\\n* Body: \\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"firstName\\":\\"Ucup\\",\\r\\n  \\"lastName\\":\\"Topekox\\",\\r\\n  \\"email\\":\\"ucup@gmail.com\\"\\r\\n}\\r\\n```\\r\\n\\r\\n\u2705 __PUT__ update person by ID:\\r\\n\\r\\n* URL: `http://localhost:8080/person/{id}`\\r\\n* Body: \\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"firstName\\": \\"Ade\\",\\r\\n  \\"lastName\\": \\"Agustian\\",\\r\\n  \\"email\\": \\"ade@gmail.com\\"\\r\\n}\\r\\n```\\r\\n\\r\\n\u2705 __DELETE__ menghapus data person by ID:\\r\\n\\r\\n* URL: `http://localhost:8080/api/product/{id}`\\r\\n\\r\\n\u2705 __NOT FOUND (GET, PUT, DELETE)__ Response API ketika ID tidak ditemukan:\\r\\n\\r\\n* URL: `http://localhost:8080/person/0`\\r\\n* Response: \\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"error\\": \\"ID_NOT_FOUND\\",\\r\\n  \\"path\\": \\"/person/0\\",\\r\\n  \\"status\\": 404,\\r\\n  \\"localDateTime\\": \\"2025-03-23T12:08:43.4502233\\"\\r\\n}\\r\\n```\\r\\n\\r\\n## \ud83d\udd16 Kesimpulan\\r\\n\\r\\nKita sudah membangun aplikasi Spring Boot CRUD REST API. Kita mengikuti best practice dengan menggunakan Java Record sebagai DTO dan menjaga logic konversi antara Entity dan DTO di layer Service menggunakan Mapstruct. Dengan memisahkan logic konversi ke dalam layer Service, kita mempertahankan basis kode yang clean dan terstruktur dengan baik yang akan lebih mudah dimaintain dan diperluas/scalability di masa mendatang. Selain itu kita juga sudah mengimplementasikan Exception Handle yang mana kita mengkustom sendiri exception sesuai kebutuhan.\\r\\n\\r\\n## \ud83c\udf10 Baca Juga\\r\\n\\r\\n* https://medium.com/@vikrantdheer/is-mapstruct-dead-the-ultimate-solution-to-stop-writing-boilerplate-code-in-java-83d42bb44af6"},{"id":"spring-boot-crud-rest-mysql-java-record-dto","metadata":{"permalink":"/blog/spring-boot-crud-rest-mysql-java-record-dto","source":"@site/blog/2025-03-16-spring-boot-crud-rest-mysql-java-record.md","title":"Step-by-Step Membangun Spring Boot CRUD REST API dengan MySQL dan Java Record DTO","description":"Pada tutorial ini, kita akan membuat aplikasi Spring Boot CRUD (Create, Read, Update, Delete) menggunakan MySQL sebagai database. Kita akan menggunakan Java record sebagai DTO (Data Transfer Object) untuk mentransfer data antara client dan server.","date":"2025-03-16T00:00:00.000Z","tags":[{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"rest","permalink":"/blog/tags/rest"},{"inline":true,"label":"api","permalink":"/blog/tags/api"},{"inline":true,"label":"mysql","permalink":"/blog/tags/mysql"}],"readingTime":7.305,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"spring-boot-crud-rest-mysql-java-record-dto","title":"Step-by-Step Membangun Spring Boot CRUD REST API dengan MySQL dan Java Record DTO","authors":"topekox","tags":["springboot","spring","rest","api","mysql"]},"unlisted":false,"prevItem":{"title":"Spring Boot CRUD REST API Java Record DTO + Mapper dengan Mapstruct","permalink":"/blog/spring-boot-crud-rest-dto-mapstruct"},"nextItem":{"title":"Arsitektur Spring Boot - Controller, Service, Repository dan Database","permalink":"/blog/spring-boot-arsitektur-controller-service-repository-database-flow"}},"content":"Pada tutorial ini, kita akan membuat aplikasi Spring Boot CRUD (Create, Read, Update, Delete) menggunakan MySQL sebagai database. Kita akan menggunakan Java record sebagai DTO (Data Transfer Object) untuk mentransfer data antara client dan server.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n\\r\\n> __Baca Juga: [Arsitektur Spring Boot - Controller, Service, Repository dan Database](/blog/spring-boot-arsitektur-controller-service-repository-database-flow)__\\r\\n\\r\\n<img src=\\"/img/general/Spring-boot-diagram1.svg\\"/>\\r\\n\\r\\n## \ud83d\udcaa Syarat\\r\\n\\r\\nPada tutorial kali ini kita menggunakan:\\r\\n\\r\\n* \u2714\ufe0f Java Development Kit (JDK) 21 atau yang terbaru.\\r\\n* \u2714\ufe0f Apache Maven (Project Manajemen).\\r\\n* \u2714\ufe0f MySQL (Database).\\r\\n* \u2714\ufe0f IDE (Intellij IDEA, Eclipse, Netbeans atau VS Code).\\r\\n* \u2714\ufe0f Postman atau cURL (test API).\\r\\n\\r\\n## 1\ufe0f\u20e3 Setting Project\\r\\n\\r\\nBuat project Spring Boot di [Spring Initializr](https://start.spring.io/) dengan dependency:\\r\\n\\r\\n* \u2714\ufe0f __Spring Web__: untuk membangun RESTful web service.\\r\\n* \u2714\ufe0f __Spring Data JPA__: untuk berinteraksi dengan database menggunakan JPA (Java Persistence API).\\r\\n* \u2714\ufe0f __MySQL Driver__: untuk menghubungkan Spring Boot dengan database MySQL.\\r\\n\\r\\n ### \ud83d\udccc Dependency\\r\\n\\r\\nDependency pada `pom.xml`:\\r\\n\\r\\n```xml\\r\\n\x3c!-- Spring Data JPA--\x3e\\r\\n<dependency>\\r\\n    <groupId>org.springframework.boot</groupId>\\r\\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\\r\\n</dependency>\\r\\n\\r\\n\x3c!-- Spring Web--\x3e\\r\\n<dependency>\\r\\n    <groupId>org.springframework.boot</groupId>\\r\\n    <artifactId>spring-boot-starter-web</artifactId>\\r\\n</dependency>\\r\\n\\r\\n\x3c!-- MySQL Driver--\x3e\\r\\n<dependency>\\r\\n    <groupId>com.mysql</groupId>\\r\\n    <artifactId>mysql-connector-j</artifactId>\\r\\n    <scope>runtime</scope>\\r\\n</dependency>\\r\\n```\\r\\n\\r\\n## 2\ufe0f\u20e3 Konfigurasi MySQL\\r\\n\\r\\n### \u2705 Membuat Database\\r\\n\\r\\nBuat database:\\r\\n\\r\\n```sql\\r\\nCREATE DATABASE spring_boot_app;\\r\\n```\\r\\n\\r\\n### \u2705 Konfigurasi `application.properties`\\r\\n\\r\\nPada file `src/main/resources/application.properties` kita perlu melakukan konfigurasi agar Spring Boot terhubung ke database MySQL:\\r\\n\\r\\n```\\r\\nspring.datasource.url=jdbc:mysql://localhost:3306/spring_boot_app\\r\\nspring.datasource.driverClassName=com.mysql.cj.jdbc.Driver\\r\\nspring.datasource.username=root\\r\\nspring.datasource.password=yourpassword\\r\\nspring.jpa.show-sql=true\\r\\nspring.jpa.hibernate.ddl-auto=update\\r\\n```\\r\\n\\r\\n* `spring.datasource.url`: URL JDBC untuk menghubungkan ke database MySQL.\\r\\n* `spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver`: Class driver MySQL.\\r\\n* `spring.datasource.username` dan `password`: Kredensial yang digunakan untuk terhubung ke database.\\r\\n* `spring.jpa.hibernate.ddl-auto=update`: Memastikan Hibernate secara otomatis membuat atau memperbarui schema database berdasarkan mapping entity yang dibuat.\\r\\n* `spring.jpa.show-sql=true`: Mengaktifkan pencatatan queri SQL ke console log, berguna untuk debugging.\\r\\n\\r\\n## 3\ufe0f\u20e3 Membuat Entity / Model\\r\\n\\r\\nMembuat Entity `Product` dalam format POJO, untuk mewakili tabel `product` dalam database:\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.demo_spring_boot_rest_api.model;\\r\\n\\r\\nimport jakarta.persistence.*;\\r\\n\\r\\nimport java.math.BigDecimal;\\r\\n\\r\\n@Entity\\r\\n@Table(name = \\"product\\")\\r\\npublic class Product {\\r\\n\\r\\n    @Id\\r\\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\\r\\n    private Long id;\\r\\n\\r\\n    private String name;\\r\\n\\r\\n    private String description;\\r\\n\\r\\n    private BigDecimal price;\\r\\n\\r\\n    public Product() {\\r\\n    }\\r\\n\\r\\n    public Product(Long id, String name, String description, BigDecimal price) {\\r\\n        this.id = id;\\r\\n        this.name = name;\\r\\n        this.description = description;\\r\\n        this.price = price;\\r\\n    }\\r\\n\\r\\n    public Long getId() {\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    public void setId(Long id) {\\r\\n        this.id = id;\\r\\n    }\\r\\n\\r\\n    public String getName() {\\r\\n        return name;\\r\\n    }\\r\\n\\r\\n    public void setName(String name) {\\r\\n        this.name = name;\\r\\n    }\\r\\n\\r\\n    public String getDescription() {\\r\\n        return description;\\r\\n    }\\r\\n\\r\\n    public void setDescription(String description) {\\r\\n        this.description = description;\\r\\n    }\\r\\n\\r\\n    public BigDecimal getPrice() {\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    public void setPrice(BigDecimal price) {\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\nClass entity yang dibuat adalah representasi product, dengan field `id`, `name`, `description` dan `price`.\\r\\n\\r\\n## 4\ufe0f\u20e3 Membuat Repository\\r\\n\\r\\nMembuat interface Product Repository:\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.demo_spring_boot_rest_api.repository;\\r\\n\\r\\nimport com.timposulabs.demo_spring_boot_rest_api.model.Product;\\r\\nimport org.springframework.data.jpa.repository.JpaRepository;\\r\\n\\r\\npublic interface ProductRepository extends JpaRepository<Product, Long> {\\r\\n}\\r\\n```\\r\\n\\r\\n`JpaRepository` Menyediakan semua operasi CRUD yang diperlukan seperti `save()`, `findAll()`, `findById()`, `deleteById()` dan tanpa perlu menulisnya sendiri.\\r\\n\\r\\n## 5\ufe0f\u20e3 Membuat Java Record untuk DTO\\r\\n\\r\\nJava Record adalah class khusus di Java yang berguna untuk mengurangi kode boilerplate, dengan secara otomatis menghasilkan constructor, getter, setter. Ini ideal untuk DTO yang bertugas untuk membawa data antara server dan client.\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.demo_spring_boot_rest_api.dto;\\r\\n\\r\\nimport java.math.BigDecimal;\\r\\n\\r\\npublic record ProductDTO(Long id, String name, String description, BigDecimal price) {\\r\\n}\\r\\n```\\r\\n\\r\\n## 6\ufe0f\u20e3 Membuat Service Layer\\r\\n\\r\\n### \u2705 Membuat Interface Service\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.demo_spring_boot_rest_api.service;\\r\\n\\r\\nimport com.timposulabs.demo_spring_boot_rest_api.dto.ProductDTO;\\r\\n\\r\\nimport java.util.List;\\r\\n\\r\\npublic interface ProductService {\\r\\n    List<ProductDTO> findAll();\\r\\n    ProductDTO findById(Long id);\\r\\n    ProductDTO save(ProductDTO productDTO);\\r\\n    ProductDTO update(Long id, ProductDTO productDTO);\\r\\n    void delete(Long id);\\r\\n}\\r\\n```\\r\\n\\r\\n### \u2705 Mengimplementasikan Product Service\\r\\n\\r\\nDalam implementasi service, kita akan menambahkan logic konversi antara Product (entity) dan EntityDTO (DTO):\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.demo_spring_boot_rest_api.service;\\r\\n\\r\\nimport com.timposulabs.demo_spring_boot_rest_api.dto.ProductDTO;\\r\\nimport com.timposulabs.demo_spring_boot_rest_api.model.Product;\\r\\nimport com.timposulabs.demo_spring_boot_rest_api.repository.ProductRepository;\\r\\nimport org.springframework.stereotype.Service;\\r\\n\\r\\nimport java.util.List;\\r\\nimport java.util.stream.Collectors;\\r\\n\\r\\n@Service\\r\\npublic class ProductServiceImpl implements ProductService{\\r\\n\\r\\n    private final ProductRepository productRepository;\\r\\n\\r\\n    public ProductServiceImpl(ProductRepository productRepository) {\\r\\n        this.productRepository = productRepository;\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public List<ProductDTO> findAll() {\\r\\n        return productRepository.findAll().stream()\\r\\n                .map(this::convertToDTO)\\r\\n                .collect(Collectors.toList());\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public ProductDTO findById(Long id) {\\r\\n        return productRepository.findById(id)\\r\\n                .map(this::convertToDTO)\\r\\n                .orElseThrow(() -> new RuntimeException(\\"ID Not Found\\"));\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public ProductDTO save(ProductDTO productDTO) {\\r\\n        Product product = convertToEntity(productDTO);\\r\\n        return convertToDTO(productRepository.save(product));\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public ProductDTO update(Long id, ProductDTO productDTO) {\\r\\n        Product product = productRepository.findById(id)\\r\\n                .orElseThrow(() -> new RuntimeException(\\"ID Not Found\\"));\\r\\n        product.setName(productDTO.name());\\r\\n        product.setDescription(productDTO.description());\\r\\n        product.setPrice(productDTO.price());\\r\\n        return convertToDTO(productRepository.save(product));\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void delete(Long id) {\\r\\n        Product product = productRepository.findById(id)\\r\\n                .orElseThrow(() -> new NotFoundException(\\"ID Not Found\\"));\\r\\n        productRepository.delete(product);\\r\\n    }\\r\\n\\r\\n    // Conversion between DTO to Entity\\r\\n    private ProductDTO convertToDTO(Product product) {\\r\\n        return new ProductDTO(product.getId(), product.getName(), product.getDescription(), product.getPrice());\\r\\n    }\\r\\n\\r\\n    private Product convertToEntity(ProductDTO productDTO) {\\r\\n        Product product = new Product();\\r\\n        product.setName(productDTO.name());\\r\\n        product.setDescription(productDTO.description());\\r\\n        product.setPrice(productDTO.price());\\r\\n        return product;\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n* Konversi logic (antara Entitas dan DTO) disimpan di layer service untuk menjaga controller tetap bersih dan hanya berfokus pada penanganan request HTTP.\\r\\n* Method `convertToDTO` ini mengonversi entity __Product__ menjadi __ProductDTO__, begitupun sebaliknya untuk method `convertToEntity`.\\r\\n\\r\\n## 7\ufe0f\u20e3 Membuat Controller \\r\\n\\r\\nDalam layer ini, kita akan membuat Controller untuk REST API:\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.demo_spring_boot_rest_api.controller;\\r\\n\\r\\nimport com.timposulabs.demo_spring_boot_rest_api.dto.ProductDTO;\\r\\nimport com.timposulabs.demo_spring_boot_rest_api.service.ProductService;\\r\\nimport org.springframework.http.HttpStatus;\\r\\nimport org.springframework.http.ResponseEntity;\\r\\nimport org.springframework.stereotype.Controller;\\r\\nimport org.springframework.web.bind.annotation.*;\\r\\n\\r\\nimport java.util.List;\\r\\n\\r\\n@Controller\\r\\n@RequestMapping(\\"/api/product\\")\\r\\npublic class ProductController {\\r\\n\\r\\n    private final ProductService productService;\\r\\n\\r\\n    public ProductController(ProductService productService) {\\r\\n        this.productService = productService;\\r\\n    }\\r\\n\\r\\n    @GetMapping\\r\\n    public ResponseEntity<List<ProductDTO>> getAllProduct() {\\r\\n        return ResponseEntity.ok(productService.findAll());\\r\\n    }\\r\\n\\r\\n    @GetMapping(\\"/{id}\\")\\r\\n    public ResponseEntity<ProductDTO> getProductById(@PathVariable Long id) {\\r\\n        return ResponseEntity.ok(productService.findById(id));\\r\\n    }\\r\\n\\r\\n    @PostMapping\\r\\n    public ResponseEntity<ProductDTO> createProduct(@RequestBody ProductDTO productDTO) {\\r\\n        return ResponseEntity.status(HttpStatus.CREATED).body(productService.save(productDTO));\\r\\n    }\\r\\n\\r\\n    @PutMapping(\\"/{id}\\")\\r\\n    public ResponseEntity<ProductDTO> updateProduct(@PathVariable Long id, @RequestBody ProductDTO productDTO) {\\r\\n        return ResponseEntity.ok(productService.update(id, productDTO));\\r\\n    }\\r\\n\\r\\n    @DeleteMapping(\\"/{id}\\")\\r\\n    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {\\r\\n        productService.delete(id);\\r\\n        return ResponseEntity.noContent().build();\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n* __GET, POST, PUT, dan DELETE__ HTTP adalah method yang digunakan untuk CRUD operations.\\r\\n* Controller tidak memiliki bussines logic. Dia hanya berfungsi untuk mengatur request ke layer Service dan memberikan response ke Client. Ini membuat kode lebih clean dan menjadi mudah untuk dimaintain.\\r\\n\\r\\n\\r\\n## 8\ufe0f\u20e3 Running dan Testing API\\r\\n\\r\\nJalankan aplikasi dan lakukan pengujian dari client bisa menggunakan Postman atau cURL.\\r\\n\\r\\n### \ud83d\udd25 Testing\\r\\n\\r\\n\u2705 __GET__ all product:\\r\\n\\r\\n* URL: `http://localhost:8080/api/product`\\r\\n\\r\\n\u2705 __GET__ product by ID:\\r\\n\\r\\n* URL: `http://localhost:8080/api/product/{id}`\\r\\n\\r\\n\u2705 __POST__ membuat product baru:\\r\\n\\r\\n* URL: `http://localhost:8080/api/product`\\r\\n* Body: \\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"name\\" : \\"Macbook Pro\\",\\r\\n  \\"description\\" : \\"New Macbook 2025\\",\\r\\n  \\"price\\" : 2500000\\r\\n}\\r\\n```\\r\\n\\r\\n\u2705 __PUT__ update product by ID:\\r\\n\\r\\n* URL: `http://localhost:8080/api/product/{id}`\\r\\n* Body: \\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"name\\" : \\"Macbook Air\\",\\r\\n  \\"description\\" : \\"New Macbook Air 2025\\",\\r\\n  \\"price\\" : 1500000\\r\\n}\\r\\n```\\r\\n\\r\\n\u2705 __DELETE__ menghapus data product by ID:\\r\\n\\r\\n* URL: `http://localhost:8080/api/product/{id}`\\r\\n\\r\\n---\\r\\n\\r\\n## \u26a1 Handle Exception\\r\\n\\r\\nDari aplikasi di atas yang sudah dibuat, yang diperlu ditambakan adalah handle Exception. Dimana pada aplikasi di atas masih terdapat Runtime Exception apabila kita mencari data yang tidak terdapat ID nya, yang mana akan menghasilkan HTTP status `500` atau Internal Server Error yang merupakan pesan error yang keliru karena harusnya HTTP status yang benar adalah `NOT_FOUND`.\\r\\n\\r\\n### 1\ufe0f\u20e3 Membuat API Error\\r\\n\\r\\nKita akan membuat standard response API seperti berikut:\\r\\n\\r\\n```json\\r\\n{\\r\\n  \\"error\\": \\"ID Not Found\\",\\r\\n  \\"path\\": \\"/api/product/1\\",\\r\\n  \\"status\\": 404,\\r\\n  \\"timestamp\\": \\"2025-03-16T12:40:42.311569409\\"\\r\\n}\\r\\n```\\r\\n\\r\\nPenjelasan:\\r\\n\\r\\n* `error` : Keterangan Error.\\r\\n* `path` : URL Request API penyebab error.\\r\\n* `status` : Kode HTTP status.\\r\\n* `timestamp` : Keterangan waktu error dalam format timestamp.\\r\\n\\r\\nKita akan mengikuti format response API di atas dengan membuat Java Record:\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.demo_spring_boot_rest_api.exception;\\r\\n\\r\\nimport java.time.LocalDateTime;\\r\\n\\r\\npublic record ApiError(\\r\\n        String error,\\r\\n        String path,\\r\\n        int status,\\r\\n        LocalDateTime timestamp) {\\r\\n}\\r\\n```\\r\\n\\r\\n### 2\ufe0f\u20e3 Membuat Class NotFoundException\\r\\n\\r\\nSelanjutnya membuat custom class `NotFoundException` extends dari `RuntimeException`:\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.demo_spring_boot_rest_api.exception;\\r\\n\\r\\npublic class NotFoundException extends RuntimeException {\\r\\n    public NotFoundException(String message) {\\r\\n        super(message);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n### 3\ufe0f\u20e3 Membuat Exception Handler\\r\\n\\r\\nSelanjutnya membuat Exception Handler yang menggunakan annotation `@ControllerAdvice`, yang mana Spring akan menjalankan Advice terlebih dahulu untuk menangkap exception yang ada. Maka dari itu semua class exception yang ada pada `ExceptionHandler` akan dihandle dalam class ini, dalam kasus ini exception `NotFoundException` yang telah kita buat sebelumnya akan dihandle disini.\\r\\n\\r\\n```java\\r\\npackage com.timposulabs.demo_spring_boot_rest_api.exception;\\r\\n\\r\\nimport jakarta.servlet.http.HttpServletRequest;\\r\\nimport org.springframework.http.HttpStatus;\\r\\nimport org.springframework.http.ResponseEntity;\\r\\nimport org.springframework.web.bind.annotation.ControllerAdvice;\\r\\nimport org.springframework.web.bind.annotation.ExceptionHandler;\\r\\n\\r\\nimport java.time.LocalDateTime;\\r\\n\\r\\n@ControllerAdvice\\r\\npublic class GlobalExceptionHandler {\\r\\n\\r\\n    @ExceptionHandler(NotFoundException.class)\\r\\n    public ResponseEntity<ApiError> handleNotFoundException(NotFoundException ex, HttpServletRequest request) {\\r\\n        ApiError apiError = new ApiError(\\r\\n                ex.getMessage(),\\r\\n                request.getRequestURI(),\\r\\n                HttpStatus.NOT_FOUND.value(),\\r\\n                LocalDateTime.now()\\r\\n        );\\r\\n        return new ResponseEntity<>(apiError, HttpStatus.NOT_FOUND);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n\ud83d\udca1 Kita dapat menambahkan class Exception lain dalam class ini untuk meng-handle exception-exception lainnya.\\r\\n\\r\\n### 4\ufe0f\u20e3 Update Service Layer\\r\\n\\r\\nSelanjutnya kita akan mengupdate Service dengan mengubah `RuntimeException` menjadi `NotFoundException`:\\r\\n\\r\\n```java\\r\\n@Override\\r\\npublic ProductDTO findById(Long id) {\\r\\n    return productRepository.findById(id)\\r\\n            .map(this::convertToDTO)\\r\\n            .orElseThrow(() -> new NotFoundException(\\"ID Not Found\\"));\\r\\n}\\r\\n\\r\\n@Override\\r\\npublic ProductDTO update(Long id, ProductDTO productDTO) {\\r\\n    Product product = productRepository.findById(id)\\r\\n            .orElseThrow(() -> new NotFoundException(\\"ID Not Found\\"));\\r\\n    product.setName(productDTO.name());\\r\\n    product.setDescription(productDTO.description());\\r\\n    product.setPrice(productDTO.price());\\r\\n    return convertToDTO(productRepository.save(product));\\r\\n}\\r\\n\\r\\n @Override\\r\\npublic void delete(Long id) {\\r\\n    Product product = productRepository.findById(id)\\r\\n            .orElseThrow(() -> new NotFoundException(\\"ID Not Found\\"));\\r\\n    productRepository.delete(product);\\r\\n}\\r\\n```\\r\\n\\r\\n## \ud83d\udd16 Kesimpulan\\r\\n\\r\\nKita sudah membangun aplikasi Spring Boot CRUD REST API dengan MySQL. Kita mengikuti best practice dengan menggunakan Java Record sebagai DTO dan menjaga logic konversi antara Entity dan DTO di layer Service. Dengan memisahkan logic konversi ke dalam layer Service, kita mempertahankan basis kode yang clean dan terstruktur dengan baik yang akan lebih mudah dimaintain dan diperluas/scalability di masa mendatang.\\r\\n\\r\\nSelain itu kita juga sudah mengimplementasikan Exception Handle yang mana kita mengkustom sendiri exception sesuai kebutuhan."},{"id":"spring-boot-arsitektur-controller-service-repository-database-flow","metadata":{"permalink":"/blog/spring-boot-arsitektur-controller-service-repository-database-flow","source":"@site/blog/2025-03-15-spring-boot-arsitektur-controller-service-repository-database-flow.md","title":"Arsitektur Spring Boot - Controller, Service, Repository dan Database","description":"Spring Boot \ud83c\udf43 adalah salah satu framework paling populer untuk membangun API RESTful dan Microservices di Java. Spring Boot menyederhanakan pengembangan aplikasi Java dengan menyediakan environtment yang telah dikonfigurasi sebelumnya, menyederhanakan penulisan kode, dan memastikan scalability dan maintainability.","date":"2025-03-15T00:00:00.000Z","tags":[{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"rest","permalink":"/blog/tags/rest"},{"inline":true,"label":"api","permalink":"/blog/tags/api"}],"readingTime":4.29,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"spring-boot-arsitektur-controller-service-repository-database-flow","title":"Arsitektur Spring Boot - Controller, Service, Repository dan Database","authors":"topekox","tags":["springboot","spring","rest","api"]},"unlisted":false,"prevItem":{"title":"Step-by-Step Membangun Spring Boot CRUD REST API dengan MySQL dan Java Record DTO","permalink":"/blog/spring-boot-crud-rest-mysql-java-record-dto"},"nextItem":{"title":"Membuat REST API CRUD Spring Boot sederhana menggunakan Database H2","permalink":"/blog/springboot-rest-api-minimal-h2"}},"content":"Spring Boot \ud83c\udf43 adalah salah satu framework paling populer untuk membangun API RESTful dan Microservices di Java. Spring Boot menyederhanakan pengembangan aplikasi Java dengan menyediakan environtment yang telah dikonfigurasi sebelumnya, menyederhanakan penulisan kode, dan memastikan scalability dan maintainability.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## \ud83d\udccc Arsitektur Spring Boot\\r\\n\\r\\nPada tutorial ini kita akan meng-eksplore __Spring Boot Layered Architecture__, dan bagaimana data mengalir di antara masing-masing komponen layer tersebut. Sebelumnya, kenapa kita harus menggunakan arsitektur tersebut:\\r\\n\\r\\n* \u2611\ufe0f **Struktur kode program lebih terorganisasi**.\\r\\n* \u2611\ufe0f **Scalability**: Membuat aplikasi lebih mudah dikembangkan/diperluas.\\r\\n* \u2611\ufe0f **Maintainability**: Masing-masing layer memiliki tugasnya masing-masing.\\r\\n* \u2611\ufe0f **Faster Development**: Menyederhanakan interaksi API dan database.\\r\\n\\r\\n## \ud83d\udd01 Spring Boot Layered Architecture\\r\\n\\r\\nArsitektur Spring Boot didasarkan pada pendekatan berlapis/layered, di mana setiap lapisan/layer bertanggung jawab atas bagian tertentu dari aplikasi.\\r\\n\\r\\n![ Spring Boot Architecture](/img/general/SpringBootArsitekturFlow.png)\\r\\n\\r\\n\\r\\n### 1\ufe0f\u20e3 Client Layer (Pengguna API)\\r\\n\\r\\nClient Layer adalah entitas eksternal dari aplikasi Spring Boot (browser, aplikasi seluler, Postman, aplikasi frontend) yang berinteraksi dengan API.\\r\\n\\r\\nClient akan:\\r\\n\\r\\n* \u2714\ufe0f Mengirim HTTP Requests (GET, POST, PUT, DELETE)\\r\\n* \u2714\ufe0f Menerima API Responses (JSON format)\\r\\n\\r\\nContoh client:\\r\\n\\r\\n* \u2714\ufe0f Frontend apps (React, Angular, Vue.js)\\r\\n* \u2714\ufe0f Mobile apps (Android, iOS)\\r\\n* \u2714\ufe0f API testing tools (Postman, cURL)\\r\\n\\r\\n### 2\ufe0f\u20e3 Controller Layer (Menangani HTTP Requests & Responses)\\r\\n\\r\\nController Layer bertindak sebagai pintu masuk untuk permintaan API. Dia bertanggung jawab untuk memproses permintaan HTTP yang masuk/request dan mengembalikan response yang sesuai.\\r\\n\\r\\n#### \ud83d\udccc Tugas Controller Layer\\r\\n\\r\\n* \u2714\ufe0f Menerima requests dari client (`@GetMapping`, `@PostMapping`, dsb.).\\r\\n* \u2714\ufe0f Melakukan validasi dari data yang diinput.\\r\\n* \u2714\ufe0f Memanggil Service Layer untuk business logic.\\r\\n* \u2714\ufe0f Mengembalikan response HTTP yang sesuai.\\r\\n\\r\\n#### \ud83d\udccc Contoh Controller\\r\\n\\r\\n```java\\r\\n@RestController\\r\\n@RequestMapping(\\"/api/person\\")\\r\\npublic class PersonController {\\r\\n\\r\\n    private final PersonService personService;\\r\\n\\r\\n    public PersonController(PersonService personService) {\\r\\n        this.personService = personService;\\r\\n    }\\r\\n\\r\\n    // \u2705 GET: get all person (200 OK)\\r\\n    @GetMapping\\r\\n    public ResponseEntity<List<PersonDTO>> getAll() {\\r\\n        return ResponseEntity.ok(personService.getAll());\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n\ud83d\ude80 Controller bukan untuk bussines logic. Dia hanya mengatur permintaan ke method pada layer service yang sesuai.\\r\\n\\r\\n### 3\ufe0f\u20e3 Service Layer (Business Logic Processing)\\r\\n\\r\\nService Layer bertanggung jawab untuk menerapkan bussines logic dan memproses data sebelum mengirimkannya ke client.\\r\\n\\r\\n#### \ud83d\udccc Tugas Service Layer\\r\\n\\r\\n* \u2714\ufe0f Mengimplementasikan business rules dan logic.\\r\\n* \u2714\ufe0f Menangani transactions.\\r\\n* \u2714\ufe0f Memanggil Layer Repositori untuk interaksi ke database.\\r\\n* \u2714\ufe0f Menggunakan DTO (Data Transfer Objek) untuk struktur data.\\r\\n\\r\\n#### \ud83d\udccc Contoh Service\\r\\n\\r\\n```java\\r\\n@Service\\r\\npublic class PersonService {\\r\\n\\r\\n    private final PersonRepository personRepository;\\r\\n    private final PersonMapper personMapper;\\r\\n\\r\\n    public PersonService(PersonRepository personRepository, PersonMapper personMapper) {\\r\\n        this.personRepository = personRepository;\\r\\n        this.personMapper = personMapper;\\r\\n    }\\r\\n\\r\\n    public List<PersonDTO> getAll() {\\r\\n        return personRepository.findAll().stream()\\r\\n                .map(personMapper::toPersonDTO)\\r\\n                .toList();\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n\ud83d\ude80 Service layer memastikan bahwa Controller tidak mengandung bussines logic. Dia bertanggung jawab untuk menangani business operations pada aplikasi.\\r\\n\\r\\n### 4\ufe0f\u20e3 Repository Layer (Database Access Layer)\\r\\n\\r\\nRepository Layer bertanggung jawab untuk berkomunikasi dengan database.\\r\\n\\r\\nHal-hal yang perlu diperhatikan:\\r\\n\\r\\n* \u2611\ufe0f Menggunakan Spring Data JPA untuk melakukan operasi CRUD.\\r\\n* \u2611\ufe0f Menggunakan `@Repository` annotation untuk menandai bahwa dia adalah DAO (Data Access Object).\\r\\n* \u2611\ufe0f Mengimplementasikan queri database menggunakan JPA, Hibernate, atau Native SQL.\\r\\n\\r\\n#### \ud83d\udccc Contoh Repository\\r\\n\\r\\n```java\\r\\npublic interface PersonRepository extends JpaRepository<Person, Long> {\\r\\n}\\r\\n```\\r\\n\\r\\n\ud83d\ude80 Spring Data JPA mengurangi penggunaan kode CRUD boilerplate dengan menyediakan method yang telah dibuat oleh Spring Data JPA secara otomatis seperti `findAll()`, `save()`, `deleteById()` dll.\\r\\n\\r\\n### 5\ufe0f\u20e3 Model Layer (Entity & DTO Representation)\\r\\n\\r\\nModel Layer mewakili tabel yang ada dalam database dan memastikan enkapsulasi data.\\r\\n\\r\\nHal-hal yang diperhatikan:\\r\\n\\r\\n* Entity dipetakan ke tabel database.\\r\\n* DTO (Objek Transfer Data) hanya membantu mentransfer data yang diperlukan.\\r\\n\\r\\n#### \ud83d\udccc Contoh Entity\\r\\n\\r\\n```java\\r\\n@Entity\\r\\npublic class Person {\\r\\n\\r\\n    @Id\\r\\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\\r\\n    private Long id;\\r\\n\\r\\n    private String firstName;\\r\\n\\r\\n    private String lastName;\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\n\ud83d\ude80 Entity tidak boleh diekspose secara langsung dalam response API. Sebagai gantinya, kita menggunakan DTO.\\r\\n\\r\\n#### \ud83d\udccc Contoh DTO menggunakan Java Record\\r\\n\\r\\n```java\\r\\npublic record PersonDTO(Long id, String firstName, String lastName) {\\r\\n}\\r\\n```\\r\\n\\r\\n\ud83d\ude80 Menggunakan `record` untuk DTO, akan membuat immutable dan kode lebih clean.\\r\\n\\r\\n### 6\ufe0f\u20e3 Database Layer\\r\\n\\r\\nDatabase Layer untuk menyimpan dan mengambil data menggunakan framework persistence Spring Boot.\\r\\n\\r\\nHal-hal yang diperhatikan:\\r\\n\\r\\n* Menggunakan database relasional (MySQL, MariaDB, PostgreSQL, Oracle, Ms SQL, H2, dll.).\\r\\n* Menggunakan JPA dan Hibernate untuk mengelola entity mapping.\\r\\n* Menjalankan query menggunakan operasi CRUD.\\r\\n\\r\\n#### \ud83d\udccc Contoh Konfigurasi Database pada `application.properties`\\r\\n\\r\\n```\\r\\nspring.datasource.url=jdbc:mariadb://localhost:3306/belajar\\r\\nspring.datasource.driverClassName=org.mariadb.jdbc.Driver\\r\\nspring.datasource.username=root\\r\\nspring.datasource.password=yourpassword\\r\\nspring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect\\r\\nspring.jpa.show-sql=true\\r\\nspring.jpa.hibernate.ddl-auto=update\\r\\n```\\r\\n\\r\\n\ud83d\ude80 Konfigurasi di atas menggunakan database MariaDB. Untuk database lain tentunya memiliki konfigurasi yang berbeda.\\r\\n\\r\\n## \u2705 Bagaimana Alur Data Mengalir?\\r\\n\\r\\n* 1\ufe0f\u20e3 __Client__ mengirim request HTTP ke layer __Controller__.\\r\\n* 2\ufe0f\u20e3 Layer __Controller__ melakukan validasi request dan meneruskan ke layer __Service__.\\r\\n* 3\ufe0f\u20e3 Layer __Service__ memproses bussines logic dan memanggil layer __Repository__.\\r\\n* 4\ufe0f\u20e3 Layer __Repository__ mengambil atau memperbaharui data yang ada di __Database__.\\r\\n* 5\ufe0f\u20e3 Layer __Model__ memetakan/mapping database record ke Java object.\\r\\n* 6\ufe0f\u20e3 Data yang sudah diproses dikirim kembali ke layer __Service__, lalu ke layer __Controller__, dan akhirnya dikembalikan ke __Client__ sebagai response API.\\r\\n\\r\\n## \ud83c\udfaf Kesimpulan\\r\\n\\r\\n* \u2705 Memisahkan layer arsitektur berdasarkan fungsinya, sehingga penanganan permasalahan antar layer lebih baik.\\r\\n* \u2705 Menggunakan Controller, Service, Repository, Model dan Database layer.\\r\\n* \u2705 Memastikan kode program lebih clean, maintainability dan scalability.\\r\\n* \u2705 Menggunakan Spring Data JPA untuk interaksi ke database.\\r\\n\\r\\n## \ud83c\udf10 Referensi\\r\\n\\r\\n* https://www.javaguides.net/2025/03/spring-boot-architecture.html"},{"id":"springboot-rest-api-minimal-h2","metadata":{"permalink":"/blog/springboot-rest-api-minimal-h2","source":"@site/blog/2025-03-07-springboot-rest-minimal-h2.md","title":"Membuat REST API CRUD Spring Boot sederhana menggunakan Database H2","description":"\ud83d\udc4b Hi Guys.. pada tutorial kali ini kita akan membangun aplikasi Spring Boot sederhana, dengan fitur REST API sederhana dengan menggunakan database H2. Project yang akan dibuat sederhana saja, tidak menggunakan banyak layer cukup layer Controller -> Repository -> Database. Jadi tutorial kali ini sebenarnya bukan best practice, tapi hanya untuk pembuatan project REST API sederhana \ud83d\udcaa.","date":"2025-03-07T00:00:00.000Z","tags":[{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"rest","permalink":"/blog/tags/rest"},{"inline":true,"label":"api","permalink":"/blog/tags/api"},{"inline":true,"label":"h2","permalink":"/blog/tags/h-2"}],"readingTime":6.43,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"springboot-rest-api-minimal-h2","title":"Membuat REST API CRUD Spring Boot sederhana menggunakan Database H2","authors":"topekox","tags":["springboot","spring","rest","api","h2"]},"unlisted":false,"prevItem":{"title":"Arsitektur Spring Boot - Controller, Service, Repository dan Database","permalink":"/blog/spring-boot-arsitektur-controller-service-repository-database-flow"},"nextItem":{"title":"Perintah Dasar Git Tag","permalink":"/blog/perintah-dasar-git-tag"}},"content":"\ud83d\udc4b Hi Guys.. pada tutorial kali ini kita akan membangun aplikasi Spring Boot sederhana, dengan fitur REST API sederhana dengan menggunakan database H2. Project yang akan dibuat sederhana saja, tidak menggunakan banyak layer cukup layer `Controller -> Repository -> Database`. Jadi tutorial kali ini sebenarnya bukan best practice, tapi hanya untuk pembuatan project REST API sederhana \ud83d\udcaa.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## \ud83d\udccc Apa itu H2 Database\\r\\n\\r\\n[H2 Database](https://h2database.com/) adalah database ringan (lightweight), yang berjalan di atas memory RAM (in-memory database), dan sudah kompatibel dengan Spring Boot. Jadi kita tidak perlu melakukan instalasi database H2 decara manual, karena sudah embedded dengan Spring Boot, cukup memasukan dependency-nya ke dalam project Spring Boot \ud83d\ude80. Jadi sangat cocok untuk testing aplikasi sebelum menggunakan database yang lebih proper seperti MySQL, Postgres, Oracle, MsSQL atau sebagainya.\\r\\n\\r\\n\\r\\n## \ud83d\udd01 Alur Arsitektur Aplikasi\\r\\n\\r\\n![rest simple](/img/general/spring-boot-rest-simple.jpg)\\r\\n\\r\\n:::warning\\r\\nArsitektur yang digunakan bukan merupakan best practice tetapi hanya untuk education purpose/proses pembelajaran dan tidak direkomendasikan untuk digunakan di production.\\r\\n:::\\r\\n\\r\\n### \ud83d\udccc Client (Pengguna API)\\r\\n\\r\\nClient adalah layer yang akan berinteraksi dengan API di antaranya seperti browser, mobile, Postman, frontend app dan sebagainya. Client akan:\\r\\n\\r\\n* \u2714\ufe0f Akan mengirim HTTP Request (GET, POST, PUT, DELETE)\\r\\n* \u2714\ufe0f Akan menerima API Response (Json format)\\r\\n\\r\\nContoh client:\\r\\n\\r\\n* \u2611\ufe0f API Testing tools (Postman, Curl)\\r\\n* \u2611\ufe0f Frontend App (React, Angular, Vue.js)\\r\\n* \u2611\ufe0f Mobile App (Iphone, Android)\\r\\n\\r\\n## \u2705 Dependency\\r\\n\\r\\nTambahkan dependency yang dibutuhkan pada `pom.xml`\\r\\n\\r\\n```xml\\r\\n\x3c!-- Spring Boot Data JPA --\x3e\\r\\n<dependency>\\r\\n    <groupId>org.springframework.boot</groupId>\\r\\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\\r\\n</dependency>\\r\\n\\r\\n\x3c!-- Spring Boot Web --\x3e\\r\\n<dependency>\\r\\n    <groupId>org.springframework.boot</groupId>\\r\\n    <artifactId>spring-boot-starter-web</artifactId>\\r\\n</dependency>\\r\\n\\r\\n\x3c!-- Spring Boot H2 Database--\x3e\\r\\n<dependency>\\r\\n    <groupId>com.h2database</groupId>\\r\\n    <artifactId>h2</artifactId>\\r\\n    <scope>runtime</scope>\\r\\n</dependency>\\r\\n```\\r\\n\\r\\n## \u2705 Konfigurasi Properties\\r\\n\\r\\n```\\r\\nspring.datasource.url=jdbc:h2:mem:belajar\\r\\nspring.datasource.driverClassName=org.h2.Driver\\r\\nspring.datasource.username=sa\\r\\nspring.datasource.password=\\r\\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\\r\\nspring.jpa.show-sql=true\\r\\nspring.jpa.hibernate.ddl-auto=update\\r\\n\\r\\nspring.h2.console.enabled=true\\r\\nspring.h2.console.path=/h2\\r\\n```\\r\\n\\r\\nKonfigurasi di atas adalah konfigurasi minimal untuk terhubung ke database H2. Beberapa variable yang dimasukan adalah nama database adalah `belajar` dengan url`jdbc:h2:mem:belajar` , `username` adalah `sa` dan tanpa password. Konfigurasi adalah kita mengaktifkan console database H2 ketika dijalankan dengan nilai `true`, serta url path akses consolenya adalah `/h2`. Konfigurasi sisanya adalah konfigurasi JPA dan Hibernate.\\r\\n\\r\\n## \u2705 Membuat Entity\\r\\n\\r\\nMembuat Entity sebagai table mapping ke database, dalam contoh kali ini kita akan membuat entity Product yang akan di mapping menjadi tabel ke dalama database:\\r\\n\\r\\n```java\\r\\nimport jakarta.persistence.*;\\r\\n\\r\\n@Entity\\r\\n@Table(name = \\"product\\")\\r\\npublic class Product {\\r\\n\\r\\n    @Id\\r\\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\\r\\n    private Integer id;\\r\\n\\r\\n    private String name;\\r\\n\\r\\n    private String description;\\r\\n\\r\\n    private Double price;\\r\\n\\r\\n    public Product() {\\r\\n    }\\r\\n\\r\\n    public Product(Integer id, String name, String description, Double price) {\\r\\n        this.id = id;\\r\\n        this.name = name;\\r\\n        this.description = description;\\r\\n        this.price = price;\\r\\n    }\\r\\n\\r\\n    public Integer getId() {\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    public void setId(Integer id) {\\r\\n        this.id = id;\\r\\n    }\\r\\n\\r\\n    public String getName() {\\r\\n        return name;\\r\\n    }\\r\\n\\r\\n    public void setName(String name) {\\r\\n        this.name = name;\\r\\n    }\\r\\n\\r\\n    public String getDescription() {\\r\\n        return description;\\r\\n    }\\r\\n\\r\\n    public void setDescription(String description) {\\r\\n        this.description = description;\\r\\n    }\\r\\n\\r\\n    public Double getPrice() {\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    public void setPrice(Double price) {\\r\\n        this.price = price;\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n## \u2705 Membuat Repository\\r\\n\\r\\n```java\\r\\nimport com.timposulabs.belajar_springboot_h2.model.Product;\\r\\nimport org.springframework.data.jpa.repository.JpaRepository;\\r\\n\\r\\npublic interface ProductRepository extends JpaRepository<Product, Integer> {\\r\\n}\\r\\n```\\r\\n\\r\\n\ud83d\ude80 Menggunakan `JpaRepository` untuk standar CRUD, dibanding menbuatnya secara manual \ud83d\ude35\u200d\ud83d\udcab.\\r\\n\\r\\n## \u2705 Membuat Controller\\r\\n\\r\\n```java\\r\\nimport com.timposulabs.belajar_springboot_h2.model.Product;\\r\\nimport com.timposulabs.belajar_springboot_h2.repository.ProductRepository;\\r\\nimport org.springframework.beans.factory.annotation.Autowired;\\r\\nimport org.springframework.http.HttpStatus;\\r\\nimport org.springframework.http.ResponseEntity;\\r\\nimport org.springframework.web.bind.annotation.*;\\r\\n\\r\\nimport java.util.List;\\r\\nimport java.util.Optional;\\r\\n\\r\\n@RestController\\r\\n@RequestMapping(\\"/api/products\\")\\r\\npublic class ProductController {\\r\\n\\r\\n    @Autowired\\r\\n    private final ProductRepository repository;\\r\\n\\r\\n    public ProductController(ProductRepository repository) {\\r\\n        this.repository = repository;\\r\\n    }\\r\\n\\r\\n    // \u2705 GET: Get All Product (200 OK / 204 No Content)\\r\\n    @GetMapping\\r\\n    ResponseEntity<List<Product>> getAll() {\\r\\n        List<Product> list = repository.findAll();\\r\\n\\r\\n        if (list.isEmpty()) {\\r\\n            return new ResponseEntity<>(HttpStatus.NO_CONTENT);\\r\\n        }\\r\\n        return new ResponseEntity<>(list, HttpStatus.OK);\\r\\n    }\\r\\n\\r\\n    // \u2705 GET: Get by Id Product (200 OK / 404 Not Found)\\r\\n    @GetMapping(\\"/{id}\\")\\r\\n    ResponseEntity<Product> getById(@PathVariable Integer id) {\\r\\n        Optional<Product> product = repository.findById(id);\\r\\n        return product.map(value -> new ResponseEntity<>(value, HttpStatus.OK))\\r\\n                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));\\r\\n    }\\r\\n\\r\\n    // \u2705 POST: Create Book\\r\\n    @PostMapping(\\"/add\\")\\r\\n    ResponseEntity<Product> add(@RequestBody Product product) {\\r\\n        Product p = repository.save(product);\\r\\n        return new ResponseEntity<>(p, HttpStatus.OK);\\r\\n    }\\r\\n\\r\\n    // \u2705 PUT: Update Book (200 OK / 404 Not Found)\\r\\n    @PutMapping(\\"/{id}\\")\\r\\n    ResponseEntity<Product> update(@PathVariable Integer id, @RequestBody Product product) {\\r\\n        Optional<Product> p = repository.findById(id);\\r\\n\\r\\n        if (p.isPresent()) {\\r\\n            Product updateProduct = p.get();\\r\\n            updateProduct.setName(product.getName());\\r\\n            updateProduct.setDescription(product.getDescription());\\r\\n            updateProduct.setPrice(product.getPrice());\\r\\n\\r\\n            return new ResponseEntity<>(repository.save(updateProduct), HttpStatus.OK);\\r\\n        }\\r\\n        return new ResponseEntity<>(HttpStatus.NOT_FOUND);\\r\\n    }\\r\\n\\r\\n    // \u2705 DELETE: Delete Book (200 OK)\\r\\n    @DeleteMapping(\\"/delete/{id}\\")\\r\\n    ResponseEntity<Product> delete(@PathVariable Integer id) {\\r\\n        repository.deleteById(id);\\r\\n        return new ResponseEntity<>(HttpStatus.OK);\\r\\n    }\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nMembuat `Controller` yang akan mengatur request yang masuk dan memberikan response kepada User dimana dalam kasus ini, menjadikan `Controller` juga sebagai business logic dari aplikasi ini.\\r\\n\\r\\n## \ud83e\uddea Uji Coba API CRUD\\r\\n\\r\\nSekarang waktunya untuk testing REST API yang telah dibuat, menggunakan testing tools dengan menggunakan Postman atau cURL. Pada contoh testing kali ini saya menggunakan [cURL](https://curl.se/docs/manpage.html).\\r\\n\\r\\nTesting yang akan kita coba berdasarkan `Controller` yang telah dibuat adalah:\\r\\n\\r\\n* \u2714\ufe0f __Mengirim HTTP Request__ (GET, POST, PUT, DELETE)\\r\\n* \u2714\ufe0f __Validasi Response__ dengan format JSON yang diberikan\\r\\n\\r\\n### \ud83d\ude80 Run Spring Boot App\\r\\n\\r\\n```\\r\\nmvn spring-boot:run\\r\\n```\\r\\n\\r\\nSetelah Spring Boot sukses berjalan, maka secara otomatis akan dibuatkan table `product` sesuai entity model yang telah dibuat.\\r\\n\\r\\n### \ud83d\udee2\ufe0f H2 Database Console\\r\\n\\r\\nSetelah Spring Boot berjalan, kita dapat mengakses H2 Console dengan path `/h2` (sesuaikan dengan konfigurasi di file properties) melalui browser sesuai url dan port Spring Boot yang aktif, yang secara default adalah `hhttp://localhost:8080/h2`, maka kita kita akan di arahkan halaman console H2, masukan sesuai konfigurasi di file properties:\\r\\n\\r\\n* Masukan user `sa` dan password kosong  (sesuaikan dengan konfigurasi di file properties).\\r\\n\\r\\n![H2 Console](/img/general/h2.png)\\r\\n\\r\\n* Jika sukses akan masuk ke dalam H2 Console.\\r\\n\\r\\n![H2 Console](/img/general/h2-console.png)\\r\\n\\r\\n### 1\ufe0f\u20e3 Test Request GET All Product\\r\\n\\r\\n#### \ud83d\udcdd API Detail:\\r\\n\\r\\n* **HTTP Method:** `GET`\\r\\n* **Endpoint:** `http://localhost:8080/api/products`\\r\\n* **Target:** Mendapatkan semua data product. \\r\\n\\r\\n### 2\ufe0f\u20e3 Test Request GET Product by `id`\\r\\n\\r\\n#### \ud83d\udcdd API Detail:\\r\\n\\r\\n* **HTTP Method:** `GET`\\r\\n* **Endpoint:** `http://localhost:8080/api/products/{id}`\\r\\n* **Target:** Mendapatkan data product berdasarkan `id`. \\r\\n\\r\\n### cURL command\\r\\n\\r\\n```\\r\\ncurl -v http://localhost:8080/api/products\\r\\n```\\r\\n\\r\\natau jika hanya langsung menggunakan http method `GET`:\\r\\n\\r\\n```\\r\\ncurl -X GET http://localhost:8080/api/products\\r\\n```\\r\\n\\r\\n### \u2705 Response yang diharapkan\\r\\n\\r\\n* \u2611\ufe0f Jika Data dalam Tabel Kosong\\r\\n```\\r\\n[]\\r\\n```\\r\\n\\r\\n* \u2611\ufe0f Jika Ada Data dalam Tabel (contoh dengan sample data)\\r\\n\\r\\n```json\\r\\n[\\r\\n    {\\r\\n        \\"id\\":1,\\r\\n        \\"name\\":\\"iphone 16\\",\\r\\n        \\"description\\":\\"The New Generation Iphone Generation\\",\\r\\n        \\"price\\":200000.0\\r\\n    },\\r\\n    {\\r\\n        \\"id\\":2,\\r\\n        \\"name\\":\\"Asus ROG\\",\\r\\n        \\"description\\":\\"Gamin Laptop Powerfull\\",\\r\\n        \\"price\\":500000.0\\r\\n    }\\r\\n]\\r\\n```\\r\\n\\r\\n:::info\\r\\n\ud83d\udccc Data payload yang digunakan adalah JSON.\\r\\n:::\\r\\n\\r\\n* \u2611\ufe0f Jika Ada Data berdasarkan Id:\\r\\n\\r\\nPerintah cURL:\\r\\n\\r\\n```\\r\\ncurl -X GET http://localhost:8080/api/products/2\\r\\n```\\r\\n\\r\\n* \u2611\ufe0f Response yang diinginkan:\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"id\\":2,\\r\\n    \\"name\\":\\"Asus ROG\\",\\r\\n    \\"description\\":\\"Gamin Laptop Powerfull\\",\\r\\n    \\"price\\":500000.0\\r\\n}\\r\\n```\\r\\n\\r\\n### 3\ufe0f\u20e3 Test Request POST Create\\r\\n\\r\\n#### \ud83d\udcdd API Detail:\\r\\n\\r\\n* **HTTP Method:** `POST`\\r\\n* **Endpoint:** `http://localhost:8080/api/products/add`\\r\\n* **Content-Type:** `application/json`\\r\\n* **Request Body:**\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"name\\":\\"Macbook Pro\\",\\r\\n    \\"description\\":\\"Macbook Laptop for Professional\\",\\r\\n    \\"price\\":400000\\r\\n}\\r\\n```\\r\\n\\r\\n### \u2705 cURL command\\r\\n\\r\\n```\\r\\ncurl -d \'{\\"name\\":\\"Macbook Pro\\",\\"description\\":\\"Macbook Laptop for Professional\\",\\"price\\":400000}\' -H \'Content-Type: application/json\' http://localhost:8080/api/products/add\\r\\n```\\r\\n\\r\\n* \u2611\ufe0f Response yang diinginkan\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"id\\":3,\\r\\n    \\"name\\":\\"Macbook Pro\\",\\r\\n    \\"description\\":\\"Macbook Laptop for Professional\\",\\r\\n    \\"price\\":400000.0\\r\\n}\\r\\n```\\r\\n\\r\\n\ud83d\udcad Response API akan mengembalikan product yang telah dibuat dengan `id` yang digenerate secara automatis.\\r\\n\\r\\n### 4\ufe0f\u20e3 Test Request PUT\\r\\n\\r\\n* **HTTP Method:** `PUT`\\r\\n* **Endpoint:** `http://localhost:8080/api/products/{id}`\\r\\n* **Content-Type:** `application/json`\\r\\n* **Request Body:**\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"name\\":\\"Thinkpad X1\\",\\r\\n    \\"description\\":\\"Laptop for Professional\\",\\r\\n    \\"price\\":350000\\r\\n}\\r\\n```\\r\\n\\r\\n### \u2705 cURL command\\r\\n\\r\\n```\\r\\ncurl -d \'{\\"name\\":\\"Thinkpad X1\\",\\"description\\":\\"Laptop for Professional\\",\\"price\\":350000}\' -H \'Content-Type: application/json\' -X PUT http://localhost:8080/api/products/3\\r\\n```\\r\\n\\r\\n* \u2611\ufe0f Response yang diinginkan\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"id\\":3,\\r\\n    \\"name\\":\\"Thinkpad X1\\",\\r\\n    \\"description\\":\\"Laptop for Professional\\",\\r\\n    \\"price\\":350000.0\\r\\n}\\r\\n```\\r\\n\\r\\n### 5\ufe0f\u20e3 Test Request DELETE\\r\\n\\r\\n* **HTTP Method:** `POST`\\r\\n* **Endpoint:** `http://localhost:8080/api/products/delete/{id}`\\r\\n\\r\\n### \u2705 cURL command\\r\\n\\r\\n```\\r\\ncurl -X DELETE http://localhost:8080/api/products/delete/3\\r\\n```\\r\\n\\r\\n### \ud83d\udc40 Check Database di H2 Console\\r\\n\\r\\nKita bisa melihat data tabel dalam database H2 melalui console web H2:\\r\\n\\r\\n![H2 Console](/img/general/h2-console2.png)\\r\\n\\r\\n## \ud83c\udfaf Kesimpulan\\r\\n\\r\\nKita sudah dapat membuat:\\r\\n\\r\\n* \u2705 REST API sederhana.\\r\\n* \u2705 Implementasi CRUD.\\r\\n* \u2705 Melakukan testing API dari client.\\r\\n\\r\\nProject ini masih sangat sederhana, kita dapat improve lagi misalnya dengan menambahkan layer service agar businness logic tidak menumpuk di controller."},{"id":"perintah-dasar-git-tag","metadata":{"permalink":"/blog/perintah-dasar-git-tag","source":"@site/blog/2025-03-01-git-tag.md","title":"Perintah Dasar Git Tag","description":"Git Tag \ud83c\udff7\ufe0f berfungsi untuk memberikan label yang menunjuk ke titik tertentu dalam riwayat Git. Tag digunakan untuk menandai versi, rilis, atau tonggak penting dalam sebuah project. Manfaat git tag untuk menjaga riwayat project yang jelas dan teratur, menyederhanakan alur kerja pengembangan, meningkatkan kolaborasi, memudahkan melacak dan mengelola perubahan.","date":"2025-03-01T00:00:00.000Z","tags":[{"inline":true,"label":"git","permalink":"/blog/tags/git"},{"inline":true,"label":"github","permalink":"/blog/tags/github"},{"inline":true,"label":"tag","permalink":"/blog/tags/tag"}],"readingTime":2.425,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"perintah-dasar-git-tag","title":"Perintah Dasar Git Tag","authors":"topekox","tags":["git","github","tag"]},"unlisted":false,"prevItem":{"title":"Membuat REST API CRUD Spring Boot sederhana menggunakan Database H2","permalink":"/blog/springboot-rest-api-minimal-h2"},"nextItem":{"title":"Tips Menjalankan Spring Boot di Intellij IDEA Community","permalink":"/blog/tips-springboot-intellijidea-community"}},"content":"Git Tag \ud83c\udff7\ufe0f berfungsi untuk memberikan label yang menunjuk ke titik tertentu dalam riwayat Git. Tag digunakan untuk menandai versi, rilis, atau tonggak penting dalam sebuah project. Manfaat git tag untuk menjaga riwayat project yang jelas dan teratur, menyederhanakan alur kerja pengembangan, meningkatkan kolaborasi, memudahkan melacak dan mengelola perubahan. \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## \u2753 Kenapa kita perlu menggunakan Tag \ud83c\udff7\ufe0f\\r\\n\\r\\n* \u2705 Sebagai penanda release point \ud83d\udccc pada project kita.\\r\\n* \u2705 Untuk membuat historis yang dapat digunakan sebagai restore points.\\r\\n\\r\\n## \ud83e\udd37\u200d\u2640\ufe0f Kapan membuat Tag \ud83c\udff7\ufe0f\\r\\n\\r\\n* \u2705 Ketika kita ingin membuat release point untuk versi aplikasi kita.\\r\\n* \u2705 Ketika kita ingin membuat titik history dari kode program kita, yang nantinya dapat kembali/restore ke titik tersebut.\\r\\n\\r\\n## \ud83d\udd25 Cara menggunakan Git Tag:\\r\\n\\r\\n### 1\ufe0f\u20e3 Checkout ke branch yang akan diberikan Tag\\r\\n\\r\\nCheckout ke branch yang ingin dibuatkan tag: `git checkout <branch_name>`\\r\\n\\r\\nContoh misalnya saya ingin checkout ke branch `master`:\\r\\n\\r\\ncontoh : \\r\\n\\r\\n```\\r\\ngit checkout master\\r\\n```\\r\\n\\r\\n### 2\ufe0f\u20e3 Membuat Tag\\r\\n\\r\\nBuat tag dengan nama tag: `git tag <tag_name>`. Misalnya saya ingin memberikan tag pada project saya sebagai versi 1.0.\\r\\n\\r\\ncontoh : \\r\\n\\r\\n```\\r\\ngit tag v1.0\\r\\n```\\r\\n\\r\\nMembuat tag dengan catatan:\\r\\n\\r\\n```\\r\\ngit tag -a v1.0 -m \\"tag for release version 1.0\\"   \\r\\n```\\r\\n\\r\\n### 3\ufe0f\u20e3 Melihat Daftar Tag\\r\\n\\r\\nUntuk menampilkan daftar tag yang ada, melalui perintah `git tag` atau `git show <nama_tag>` atau `git tag -l \\"<list_tag>\\"`, contoh:\\r\\n\\r\\n```\\r\\ngit tag\\r\\n\\r\\ngit show v1.0\\r\\n\\r\\ngit tag -l \\"v1.*\\"\\r\\n```\\r\\n\\r\\n### 4\ufe0f\u20e3 Push Tag ke Remote Repository\\r\\n\\r\\nUntuk push tag ke remote repository server seperti Github atau Gitlab, melalui perintah, `git push origin <nama_tag>` :\\r\\n\\r\\n```\\r\\ngit push origin v1.0\\r\\n\\r\\n```\\r\\n\\r\\nPush semua tag:\\r\\n\\r\\n```\\r\\ngit push origin --tags\\r\\n\\r\\ngit push --tags \\r\\n```\\r\\n\\r\\n### 5\ufe0f\u20e3 Menghapus Tag\\r\\n\\r\\nUntuk menghapus tag yang berada di local:\\r\\n\\r\\n```\\r\\ngit tag -d v1.0\\r\\n```\\r\\n\\r\\natau: \\r\\n\\r\\n```\\r\\ngit tag --delete v1.0\\r\\n```\\r\\n\\r\\nMenghapus tag tidak secara otomatis menghapus tag di remote repository. Untuk menghapus tag yang berada di remote:\\r\\n\\r\\n```\\r\\ngit push origin -d v1.0\\r\\n```\\r\\n\\r\\natau:\\r\\n\\r\\n```\\r\\ngit push origin --delete v1.0\\r\\n```\\r\\n\\r\\natau:\\r\\n\\r\\n```\\r\\ngit push origin :v1.0\\r\\n```\\r\\n\\r\\nUntuk menghapus multiple tags:\\r\\n\\r\\n* local\\r\\n```\\r\\ngit tag -d v1.0 v1.1\\r\\n```\\r\\n\\r\\n* remote\\r\\n\\r\\n```\\r\\ngit push origin -d v1.0 v1.1\\r\\n```\\r\\n\\r\\n### 6\ufe0f\u20e3 Membuat Tag pada Branch\\r\\n\\r\\nPada dasarnya tidak ada istilah checkout tag dalam git. Tapi kita dapat membuat branch dari tag dan chekout dengan branch tersebut.\\r\\n\\r\\n```\\r\\ngit checkout -b <branch_name> <tag_name>\\r\\n```\\r\\n\\r\\nContoh:\\r\\n\\r\\n```\\r\\ngit checkout -b release_ver_1 v1.0\\r\\n```\\r\\n\\r\\n### 7\ufe0f\u20e3 Membuat tag dari Commit tertentu\\r\\n\\r\\nSetiap kita melakukan commit pada git secara otomatis akan dibuatkan semacam id yaitu nomor checksum, dapat di cek dengan perintah `git log --oneline`.\\r\\n\\r\\nContoh:\\r\\n\\r\\n```\\r\\ngit tag v1.2 a0c66f6\\r\\n```\\r\\n\\r\\n## Kesimpulan\\r\\n\\r\\nPada kali ini kita sudah belajar:\\r\\n\\r\\n* \u2714\ufe0f Apa itu tag pada git.\\r\\n* \u2714\ufe0f Kenapa kita menggunakan tag pada git.\\r\\n* \u2714\ufe0f Kapan kita membuat tag pada git.\\r\\n* \u2714\ufe0f Bagaimana cara membuat tag pada git."},{"id":"tips-springboot-intellijidea-community","metadata":{"permalink":"/blog/tips-springboot-intellijidea-community","source":"@site/blog/2025-02-18-tips-setup-springboot-intellijidea-community.md","title":"Tips Menjalankan Spring Boot di Intellij IDEA Community","description":"Saat ini mungkin bisa dibilang Intellij IDEA adalah IDE powerfull untuk mengembangkan aplikasi di ekosistem Java. Fiturnya yang lengkap dan plugin yang banyank, membuat IDE ini menjadi yang paling powerfull saat ini. IDE yang dikembangkan oleh Jetbrains ini sangat cocok untuk mengembangkan aplikasi berskala besar. Namun untuk mendapatkan fitur lengkapnya kita harus menggunakan Intellij IDEA versi Ultimate termasuk jika kita ingin menggunakan plugin untuk Spring Boot.","date":"2025-02-18T00:00:00.000Z","tags":[{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"ide","permalink":"/blog/tags/ide"},{"inline":true,"label":"intellijidea","permalink":"/blog/tags/intellijidea"}],"readingTime":1.61,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"tips-springboot-intellijidea-community","title":"Tips Menjalankan Spring Boot di Intellij IDEA Community","authors":"topekox","tags":["springboot","spring","ide","intellijidea"]},"unlisted":false,"prevItem":{"title":"Perintah Dasar Git Tag","permalink":"/blog/perintah-dasar-git-tag"},"nextItem":{"title":"Cara Install Eclipse Temurin JDK di Fedora/Redhat/Centos","permalink":"/blog/install-temurin-fedora"}},"content":"Saat ini mungkin bisa dibilang [Intellij IDEA](https://www.jetbrains.com/idea/) adalah IDE powerfull untuk mengembangkan aplikasi di ekosistem Java. Fiturnya yang lengkap dan plugin yang banyank, membuat IDE ini menjadi yang paling powerfull saat ini. IDE yang dikembangkan oleh Jetbrains ini sangat cocok untuk mengembangkan aplikasi berskala besar. Namun untuk mendapatkan fitur lengkapnya kita harus menggunakan Intellij IDEA versi Ultimate termasuk jika kita ingin menggunakan plugin untuk Spring Boot.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nNamun tenang aja sebenarnya dengan menggunakan Intellij IDEA Ultimate pun kita dapat menjalankan Spring Boot, tapi kita mungkin agak sedikit melakukan konfigurasi secara manual. Berikut tips konfigurasi Spring Boot di Intellij IDEA Community Edition.\\r\\n\\r\\n:::info\\r\\nDalam tulisan ini saya menggunakan Apache Maven sebagai build tools.\\r\\n::: \\r\\n\\r\\n## Menjalankan Spring Boot melalui CLI\\r\\n\\r\\nKetika menjalankan Spring Boot kita dapat melakukan menggunakan CLI, tanpa bantuan IDE. Kita dapat memanfaatkan CLI yang ada di IDE Intellij Community dengan menggunakan perintah:\\r\\n\\r\\n```\\r\\nmvn spring-boot:run\\r\\n```\\r\\n\\r\\n## Menjalankan Spring Boot melalui Configuration\\r\\n\\r\\nSelain menggunakan CLI kita dapat menggunakan configuration pada menu `Edit Configuration...`, kemudian tambahkan run configuration baru dengan klik `Add new..` pilih `Maven` lalu pada bagian `Run` pilih `spring-boot:run`, lalu pilih OK atau Run untuk menjalankan.\\r\\n\\r\\n![\'Idea\'](/img/general/idea1.png)\\r\\n\\r\\nDengan cara di atas kita dapat menjalankan Spring Boot dengan menggunakan tombol Run pada Intellij IDEA Community.\\r\\n\\r\\n## Menambahkan Environment\\r\\n\\r\\nUntuk menambahkan environment di Intellij IDEA Community caranya sama seperti sebeumnya masuk ke menu `Edit Configuration...` dan tambahkan Environment Variable pada bagian Java Options seperti gambah di bawah ini: \\r\\n\\r\\n![\'Idea\'](/img/general/idea2.png)\\r\\n\\r\\n## Set Profiles\\r\\n\\r\\nUntuk memasukan profiles ketika aplikasi Spring Boot dijalankan kita dapat memasukan nama profiles ke dalam CLI atau menu `Edit Configuration...`, contoh nama profiles `dev` masukan nama profiles dengan perintah di bawah ini:\\r\\n\\r\\n```\\r\\nmvn spring-boot:run -Dspring-boot.run.profiles=dev\\r\\n```\\r\\n\\r\\nPada menu Configuration:\\r\\n\\r\\n![\'Idea\'](/img/general/idea3.png)\\r\\n\\r\\n## Kesimpulan\\r\\n\\r\\nMenjalankan Spring Boot di Intellij IDEA Community dapat dilakukan dengan sedikit konfigurasi karena pluginnya memang tidak tersedia di versi community, tapi dengan sedikit konfigurasi sana sini kita bisa menjalankan Spring Boot dengan menggunakan Intellij IDEA Community."},{"id":"install-temurin-fedora","metadata":{"permalink":"/blog/install-temurin-fedora","source":"@site/blog/2025-02-07-install-temurin-jdk-fedora.md","title":"Cara Install Eclipse Temurin JDK di Fedora/Redhat/Centos","description":"Secara default pada mayoritas distro linux sudah menyertakan paket Openjdk pada repository mereka, termasuk Redhat dan turunannya. Tetapi kita dapat menginstall versi distribusi JDK lain termasuk distribusi Eclipse Temurin JDK (Temurin). Temurin sendiri dulunya bernama AdoptOpenJDK/Adoptium, yang saat ini berada di bawah project Eclipse Temurin.","date":"2025-02-07T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"jdk","permalink":"/blog/tags/jdk"},{"inline":true,"label":"linux","permalink":"/blog/tags/linux"},{"inline":true,"label":"fedora","permalink":"/blog/tags/fedora"},{"inline":true,"label":"redhat","permalink":"/blog/tags/redhat"}],"readingTime":1.295,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"install-temurin-fedora","title":"Cara Install Eclipse Temurin JDK di Fedora/Redhat/Centos","authors":"topekox","tags":["java","jdk","linux","fedora","redhat"]},"unlisted":false,"prevItem":{"title":"Tips Menjalankan Spring Boot di Intellij IDEA Community","permalink":"/blog/tips-springboot-intellijidea-community"},"nextItem":{"title":"Install Aplikasi Spring Boot menjadi Service di Linux","permalink":"/blog/install-springboot-linux-service"}},"content":"Secara default pada mayoritas distro linux sudah menyertakan paket Openjdk pada repository mereka, termasuk Redhat dan turunannya. Tetapi kita dapat menginstall versi distribusi JDK lain termasuk distribusi [Eclipse Temurin JDK](https://adoptium.net/temurin) (Temurin). Temurin sendiri dulunya bernama AdoptOpenJDK/Adoptium, yang saat ini berada di bawah project Eclipse Temurin.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Install Temurin\\r\\n\\r\\nTambahkan RPM Repo ke dalam `/etc/yum.repos.d/adoptium.repo`. Pastikan kita mengganti nama distribution yang digunakan pada parameter `baseurl`, contoh disini saya menggunakan fedora, untuk format nama distro lain dapat di lihat [di sini](https://packages.adoptium.net/ui/native/rpm/).\\r\\n\\r\\n```\\r\\n[Adoptium]\\r\\nname=Adoptium\\r\\nbaseurl=https://packages.adoptium.net/artifactory/rpm/fedora/$releasever/$basearch\\r\\nenabled=1\\r\\ngpgcheck=1\\r\\ngpgkey=https://packages.adoptium.net/artifactory/api/gpg/key/public\\r\\n```\\r\\n\\r\\nInstall Temurin JDK 21\\r\\n\\r\\n```\\r\\nsudo dnf install temurin-21-jdk -y\\r\\n```\\r\\n\\r\\n## Setting update alternatives java\\r\\n\\r\\nKarena sebelumnya sudah terinstall Openjdk, kita dapat mengganti versi JDK yang akan digunakan dengan peintah `alternatives --config`.\\r\\n\\r\\n* Mengubah versi `java` yang akan digunakan.\\r\\n\\r\\n```\\r\\n$ sudo alternatives --config java\\r\\n\\r\\nThere are 2 programs which provide \'java\'.\\r\\n\\r\\n  Selection    Command\\r\\n-----------------------------------------------\\r\\n*+ 1           java-21-openjdk.x86_64 (/usr/lib/jvm/java-21-openjdk-21.0.6.0.7-1.fc41.x86_64/bin/java)\\r\\n   2           /usr/lib/jvm/temurin-21-jdk/bin/java\\r\\n\\r\\nEnter to keep the current selection[+], or type selection number: 2\\r\\n```\\r\\n\\r\\nDi atas saya memilih no 2 untuk menggunakan java versi temurin.\\r\\n\\r\\n* Kita juga bisa mengganti versi `javac`:\\r\\n\\r\\n```\\r\\n$ sudo alternatives --config javac\\r\\n\\r\\nThere are 2 programs which provide \'javac\'.\\r\\n\\r\\n  Selection    Command\\r\\n-----------------------------------------------\\r\\n*+ 1           java-21-openjdk.x86_64 (/usr/lib/jvm/java-21-openjdk-21.0.6.0.7-1.fc41.x86_64/bin/javac)\\r\\n   2           /usr/lib/jvm/temurin-21-jdk/bin/javac\\r\\n\\r\\nEnter to keep the current selection[+], or type selection number: 2\\r\\n````\\r\\n\\r\\n* Cek versi `java`:\\r\\n\\r\\n```\\r\\n$ java -version\\r\\n\\r\\nopenjdk version \\"21.0.6\\" 2025-01-21 LTS\\r\\nOpenJDK Runtime Environment Temurin-21.0.6+7 (build 21.0.6+7-LTS)\\r\\nOpenJDK 64-Bit Server VM Temurin-21.0.6+7 (build 21.0.6+7-LTS, mixed mode, sharing)\\r\\n```\\r\\n\\r\\n* Cek versi `javac`:\\r\\n\\r\\n```\\r\\n$ javac -version\\r\\n\\r\\njavac 21.0.6\\r\\n```\\r\\n\\r\\n## Referensi\\r\\n\\r\\n* https://adoptium.net/installation/linux/"},{"id":"install-springboot-linux-service","metadata":{"permalink":"/blog/install-springboot-linux-service","source":"@site/blog/2025-02-06-install-springboot-linux-service.md","title":"Install Aplikasi Spring Boot menjadi Service di Linux","description":"Tutorial kali ini kita menginstal aplikasi Spring Boot sebagai systemd Service Linux, yang memungkinkan kita untuk start, stop dan melihat status aplikasi menggunakan perintah misalnya: service start, service stop dan service status.","date":"2025-02-06T00:00:00.000Z","tags":[{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"linux","permalink":"/blog/tags/linux"}],"readingTime":3.345,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"install-springboot-linux-service","title":"Install Aplikasi Spring Boot menjadi Service di Linux","authors":"topekox","tags":["spring","springboot","linux"]},"unlisted":false,"prevItem":{"title":"Cara Install Eclipse Temurin JDK di Fedora/Redhat/Centos","permalink":"/blog/install-temurin-fedora"},"nextItem":{"title":"Cara Custom Domain Github Pages","permalink":"/blog/custom-domain-github"}},"content":"Tutorial kali ini kita menginstal aplikasi Spring Boot sebagai `systemd` Service Linux, yang memungkinkan kita untuk start, stop dan melihat status aplikasi menggunakan perintah misalnya: service start, service stop dan service status.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Build aplikasi Spring Boot menjadi executable\\r\\n\\r\\nSebelum kita menginstal aplikasi Spring Boot sebagai service di Linux, kita dapat membuat agar aplikasi menjadi executable. Sebenarnya untuk menjalankan aplikasi Spring Boot kita bisa menggunakan perintah `java -jar` untuk menjalankan hasil build yang berformat `.jar`, tetapi pada sistem Linux disarankan agar aplikasi dapat dieksekusi sepenuhnya, untuk menghidari masalah kompatible aplikasi dengan beberapa tools pada sistem linux.\\r\\n\\r\\nUntuk membuat `jar` sepenuhnya dapat \\"dieksekusi\\" dengan Maven, gunakan konfigurasi berikut ini pada bagian plugin di `pom.xml`:\\r\\n\\r\\n```xml\\r\\n<plugin>\\r\\n    <groupId>org.springframework.boot</groupId>\\r\\n    <artifactId>spring-boot-maven-plugin</artifactId>\\r\\n    <configuration>\\r\\n        <executable>true</executable>\\r\\n    </configuration>\\r\\n</plugin>\\r\\n```\\r\\n\\r\\nJika menggunakan Gradle konfigurasinya seperti ini:\\r\\n\\r\\n```javascript\\r\\nbootJar {\\r\\n    launchScript()\\r\\n}\\r\\n```\\r\\n\\r\\nUntuk perintah melakukan build sebagai berikut: \\r\\n\\r\\n```\\r\\nmvn clean install -DskipTests\\r\\n```\\r\\n\\r\\nJika sukses, hasil build ada di dalam direktori `target/` dengan format `.jar`, karena sudah dilakukan konfigurasi sebelumnya kita dapat langsung mengeksekusi file `jar` tersebut tanpa perintah `java -jar namafile.jar`, misalkan contoh nama aplikasi kita rename menjadi `myapp.jar`.\\r\\n\\r\\n```\\r\\n./myapp.jar\\r\\n```\\r\\n\\r\\n## Install Executable Jar sebagai Service Linux\\r\\n\\r\\nSetelah mendapatkan file `jar`, kita dapat memindahkan file tersebut ke dalam direktori khusus contoh nama direktorinya `myapp` pada lokasi `/home/ucup` dan menambahkan 1 file konfigurasi dengan ekstensi `conf` dengan **nama file harus sama** dengan nama file `jar`, contoh `myapp.conf`. Jadi dalam direktori `myapp` terdapat 2 file dengan nama `myapp.jar` dan `myapp.conf`.\\r\\n\\r\\n```\\r\\nmyapp\\r\\n\u251c\u2500\u2500 myapp.conf\\r\\n\u251c\u2500\u2500 myapp.jar\\r\\n```\\r\\n\\r\\nKeterangan:\\r\\n\\r\\n* __myapp.jar__ : File `jar` adalah file aplikasi yang akan dieksekusi.\\r\\n* __myapp.conf__ : File yang berisi konfigurasi ketika service dijalankan.\\r\\n\\r\\n\\r\\n### File Jar\\r\\n\\r\\nBerikan perimission agar file jar dapat di eksekusi.\\r\\n\\r\\n```\\r\\nchmod 500 /home/ucup/myapp.jar\\r\\n```\\r\\n\\r\\n### File Konfigurasi\\r\\n\\r\\nFile konfigurasi digunakan untuk memasukan parameter ketika service dijalankan. Contoh saya mengisi file konfigurasi `myapp.conf` sebagai berikut:\\r\\n\\r\\n```\\r\\nJAVA_OPTS=\\"-Dspring.profiles.active=prod -Duser.timezone=Asia/Makassar -Xmx1G -Xms1G -Dserver.port=8000\\"\\r\\n```\\r\\n\\r\\nKeterangan:\\r\\n\\r\\n* `-Dspring.profiles.active=prod` : Menjalankan  aplikasi dengan profiles `prod` (sesuaikan dengan profile yang anda gunakan).\\r\\n*  `-Duser.timezone=Asia/Makassar` : Menjalankan aplikasi dengan time zone Asia/Makassar.\\r\\n* `Xmx1G` : Memeberikan alokasi memori maksimum untuk mesin virtual Java (JVM) 1GB.\\r\\n* `-Xms1G` : Memberikan alokasi initial memori awal 1GB.\\r\\n* `-Dserver.port=8000` : Port yang digunakan ketika aplikasi dijalankan port 8000.\\r\\n\\r\\nBerikan perimision pada file konfigurasi.\\r\\n\\r\\n```\\r\\nchown 400 /home/ucup/myapp.conf\\r\\n```\\r\\n\\r\\n:::info\\r\\nSelengkapnya parameter konfigurasi: [https://docs.spring.io/spring-boot](https://docs.spring.io/spring-boot/docs/2.2.0.RC1/reference/html/deployment.html#deployment-script-customization-when-it-runs)\\r\\n:::\\r\\n\\r\\n\\r\\n### Membuat File Service\\r\\n\\r\\nBuat file service di dalam direktori `/etc/systemd/system/` dengan nama bebas, misal contoh `myapp.service`\\r\\n\\r\\n```\\r\\nsudo nano /etc/systemd/system/myapp.service\\r\\n```\\r\\n\\r\\nIsi file tersebut:\\r\\n\\r\\n```\\r\\n[Unit]\\r\\nDescription=Aplikasi Guee\\r\\nAfter=syslog.target\\r\\n\\r\\n[Service]\\r\\nUser=ucup\\r\\nExecStart=/home/ucup/myapp/myapp.jar\\r\\nSuccessExitStatus=143\\r\\n\\r\\n[Install]\\r\\nWantedBy=multi-user.target\\r\\n```\\r\\n\\r\\nNote:\\r\\n\\r\\n* Pada bagian _User_ ganti isi parameternya sesuai dengan user yang memiliki akses menjalankan aplikasi.\\r\\n* Pada bagian _ExecStart_ ganti dengan lokasi path file executable jar.\\r\\n\\r\\nMenjalan service:\\r\\n\\r\\n```\\r\\nsudo systemctl start myapp.service\\r\\n```\\r\\n\\r\\nMenghentikan service:\\r\\n\\r\\n```\\r\\nsudo systemctl stop myapp.service\\r\\n```\\r\\n\\r\\nMelakukan restart service:\\r\\n\\r\\n```\\r\\nsudo systemctl restart myapp.service\\r\\n```\\r\\n\\r\\nMengaktifkan service setiap startup:\\r\\n\\r\\n```\\r\\nsudo systemctl enable myapp.service\\r\\n```\\r\\n\\r\\nKita dapat melakukan perintah `ps` untuk melihat task sistem yang sedang berjalan\\r\\n\\r\\n```\\r\\nps aux | grep myapp\\r\\n```\\r\\n\\r\\n### Menambahkan Environment Variable\\r\\n\\r\\nUntuk menambahkan environment variable yang dibutuhkan aplikasi spring boot, kita perlu menambahkan parameter `Environment` pada bagian `[Service]`, kita bisa lansung memasukan environment parameter kedalam file `/etc/systemd/system/myapp.service` atau memisahkan ke file lain. \\r\\n\\r\\n* Memasukan langsung ke dalam file `/etc/systemd/system/myapp.service`.\\r\\n\\r\\n```\\r\\n[Service]\\r\\nUser=ucup\\r\\nEnvironment=\\"DB_URL=jdbc:postgresql://localhost:5432/mydb\\"\\r\\nEnvironment=\\"API_KEY=dev-key-123\\"\\r\\nExecStart=/home/ucup/myapp/myapp.jar\\r\\nSuccessExitStatus=143\\r\\n```\\r\\n\\r\\n* Mengimport environment dari file lain:\\r\\n\\r\\nBuat file baru, dan masukan parameter environment. Contoh disini membuat file baru dengan nama `myapp-env` pada direktori `/etc/default`\\r\\n\\r\\n```\\r\\nsudo touch /etc/default/myapp-env\\r\\n```\\r\\n\\r\\nLalu masukan variable environtment yang dibuat:\\r\\n\\r\\n```\\r\\nDB_URL=jdbc:postgresql://localhost:5432/mydb\\r\\nAPI_KEY=dev-key-123\\r\\n```\\r\\n\\r\\nTambahkan parameter `EnvironmentFile=-/etc/default/myapp-env`, lalu masukan pada file `/etc/systemd/system/myapp.service`:\\r\\n\\r\\n```\\r\\n[Service]\\r\\nUser=topekox\\r\\nEnvironmentFile=-/etc/default/myapp-env\\r\\nExecStart=/home/ucup/myapp/myapp.jar\\r\\nSuccessExitStatus=143\\r\\n```\\r\\n\\r\\n___Note___ : jangan lupa untuk menambahkan tanda `-` sebelum lokasi file environtment pada parameter `EnvironmentFile`.\\r\\n\\r\\n### Melihat Log Service\\r\\n\\r\\nUntuk melihat log service dapat menggunakan perintah:\\r\\n\\r\\n```\\r\\njournalctl -u myapp.service \\r\\n```\\r\\n\\r\\nKita dapat menyimpannya ke dalam file:\\r\\n\\r\\n```\\r\\njournalctl -u myapp.service >> log.txt\\r\\n```\\r\\n\\r\\n## Baca Juga\\r\\n\\r\\n* https://docs.spring.io/spring-boot/docs/2.2.0.RC1/reference/html/deployment.html#deployment-install\\r\\n* https://howtoprogram.xyz/2020/05/29/install-a-spring-boot-application-as-a-linux-service/\\r\\n* https://serverfault.com/questions/413397/how-to-set-environment-variable-in-systemd-service\\r\\n* https://fedoraproject.org/wiki/Packaging:Systemd\\r\\n* https://medium.com/@manjiki/running-spring-boot-applications-as-system-services-on-linux-5ea5f148c39a"},{"id":"custom-domain-github","metadata":{"permalink":"/blog/custom-domain-github","source":"@site/blog/2025-02-05-custom-domain-github.md","title":"Cara Custom Domain Github Pages","description":"GitHub Pages adalah layanan hosting situs web statis yang memanfaatkan repositori GitHub. Layanan ini mengambil file HTML, CSS, dan JavaScript dari repositori GitHub, kemudian menerbitkan situs web. GitHub Pages dapat digunakan untuk membuat situs web pribadi, seperti portofolio atau blog. Situs web yang dibuat menggunakan GitHub Pages dapat diakses secara publik di internet. Secara default domain yang digunakan memiliki url path .github.io, tetapi kita dapat menghosting situs web di github.io atau di domain kustom Anda sendiri.","date":"2025-02-05T00:00:00.000Z","tags":[{"inline":true,"label":"github","permalink":"/blog/tags/github"},{"inline":true,"label":"github pages","permalink":"/blog/tags/github-pages"}],"readingTime":1.6,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"custom-domain-github","title":"Cara Custom Domain Github Pages","authors":"topekox","tags":["github","github pages"]},"unlisted":false,"prevItem":{"title":"Install Aplikasi Spring Boot menjadi Service di Linux","permalink":"/blog/install-springboot-linux-service"},"nextItem":{"title":"Cara melihat log service pada Linux","permalink":"/blog/melihat-log-service-linux"}},"content":"GitHub Pages adalah layanan hosting situs web statis yang memanfaatkan repositori GitHub. Layanan ini mengambil file HTML, CSS, dan JavaScript dari repositori GitHub, kemudian menerbitkan situs web. GitHub Pages dapat digunakan untuk membuat situs web pribadi, seperti portofolio atau blog. Situs web yang dibuat menggunakan GitHub Pages dapat diakses secara publik di internet. Secara default domain yang digunakan memiliki url path `<nama-repo>.github.io`, tetapi kita dapat menghosting situs web di `github.io` atau di domain kustom Anda sendiri. \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Konfigurasi domain\\r\\n\\r\\nUntuk menyiapkan domain apex, seperti `example.com`, Anda harus mengonfigurasi domain kustom dalam pengaturan repositori github anda dan setidaknya satu `ALIAS`, `ANAME`, atau `A` record dengan konfigurasi DNS anda.\\r\\n\\r\\n* Untuk membuat `A` record, arahkan domain apex ke alamat IP untuk GitHub Pages.\\r\\n\\r\\n```\\r\\n185.199.108.153\\r\\n185.199.109.153\\r\\n185.199.110.153\\r\\n185.199.111.153\\r\\n```\\r\\n\\r\\n* Masuk ke dalam konfugirasi DNS anda, masukan IP Github Pages di atas ke pengaturan DNS anda. Berikut contoh pengaturan untuk nama host timposulabs.com.\\r\\n\\r\\n![\\"Konfigurasi DNS\\"](/img/general/github-pages1.png)\\r\\n\\r\\nTunggu beberapa saat, jika cepat tidak sampai 1 jam domain dapat aktif, kalau belum biasanya mununggu sampai 24 jam hingga domain aktif. Untuk mengetahui domain aktif atau belum bisa di cek di [dnschecker.org](https://dnschecker.org/).\\r\\n\\r\\n## Konfigurasi Github Pages\\r\\n\\r\\n* Masuk ke dalam menu setting repository Github Pages anda masuk ke _`Settings`_ > _`Pages`_ dan masukan domain pada form `Custom domain` dan Save, centang Enforce HTTPS untuk menghaktifkan HTTPS pada domain kita.\\r\\n\\r\\nJika berhasil, maka akan seperti gambar di bawah ini.\\r\\n\\r\\n![\\"Konfigurasi DNS\\"](/img/general/ghpages2.png)\\r\\n\\r\\nJangan lupa buat file dengan nama `CNAME` di root direktori static github pages anda dan isi file tersebut dengan nama domain anda, contoh isi file `CNAME`:\\r\\n\\r\\n```\\r\\ntimposulabs.com\\r\\n```\\r\\n\\r\\nFile ini nantinya di baca oleh github pages sebagai nama domain kita setiap kita melakukan deploy he host github repository.\\r\\n\\r\\n:::success\\r\\nUntuk video pengaturan domain dapat dilihat pada:\\r\\n\\r\\n* [Video tutorial untuk apex domain](https://www.youtube.com/watch?v=uh0yu7kxijQ)\\r\\n* [Video tutorial untuk sub domain](https://www.youtube.com/watch?v=JqwjVIGJQ10)\\r\\n:::\\r\\n\\r\\n## Lihat Juga\\r\\n\\r\\nJika mengalami kendala dapat merujuk ke dokumentasi resmi Github Pages:\\r\\n\\r\\n* https://docs.github.com/en/pages/quickstart"},{"id":"melihat-log-service-linux","metadata":{"permalink":"/blog/melihat-log-service-linux","source":"@site/blog/2025-01-22-melihat-log-service-linux.md","title":"Cara melihat log service pada Linux","description":"Log adalah tool yang memberikan informasi berharga untuk pemecahan masalah, keamanan, audit, analisis kinerja, pemantauan, dan pemeliharaan sistem. Tanpa log, akan sulit untuk memahami apa yang terjadi di dalam sistem, mengidentifikasi masalah, atau memastikan keamanan dan kinerja yang optimal.","date":"2025-01-22T00:00:00.000Z","tags":[{"inline":true,"label":"linux","permalink":"/blog/tags/linux"},{"inline":true,"label":"log","permalink":"/blog/tags/log"},{"inline":true,"label":"perintah linux","permalink":"/blog/tags/perintah-linux"}],"readingTime":0.74,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"melihat-log-service-linux","title":"Cara melihat log service pada Linux","authors":"topekox","tags":["linux","log","perintah linux"]},"unlisted":false,"prevItem":{"title":"Cara Custom Domain Github Pages","permalink":"/blog/custom-domain-github"},"nextItem":{"title":"Belajar Java Comparator","permalink":"/blog/java-comparator-interface"}},"content":"Log adalah tool yang memberikan informasi berharga untuk pemecahan masalah, keamanan, audit, analisis kinerja, pemantauan, dan pemeliharaan sistem. Tanpa log, akan sulit untuk memahami apa yang terjadi di dalam sistem, mengidentifikasi masalah, atau memastikan keamanan dan kinerja yang optimal.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nDalam linux service yang sedang berjalan memiliki log, biasanya disimpan dalam direktori `/var/log` atau di direktori lain di masing-masing aplikasi yang memiliki service. Contoh kita melihat log sistem pada Ubuntu yang ada pada `syslog` dengan perintah.\\r\\n\\r\\n```\\r\\ncat /var/log/syslog\\r\\n```\\r\\n\\r\\nJika ingin disimpan dalam sebuah file bisa menggunakan perintah:\\r\\n\\r\\n```\\r\\ncat /var/log/syslog >> tes.txt\\r\\n```\\r\\n\\r\\n## Melihat log service\\r\\n\\r\\nUntuk melihat log pada service yang sedang berjalan dapat menggunakan perintah `journalctl`. \\r\\n\\r\\nContoh misalnya saya memiliki service Postgresql 17 dan ingin melihat log servicenya:\\r\\n\\r\\n```\\r\\njournalctl -u postgresql-17.service\\r\\n```\\r\\n\\r\\nJika ingin disimpan dalam sebuah file bisa menggunakan perintah:\\r\\n\\r\\n```\\r\\njournalctl -u postgresql-17.service >> postgresql17.txt\\r\\n```\\r\\n\\r\\nLihat juga:\\r\\n\\r\\n* https://unix.stackexchange.com/questions/225401/how-to-see-full-log-from-systemctl-status-service"},{"id":"java-comparator-interface","metadata":{"permalink":"/blog/java-comparator-interface","source":"@site/blog/2024-10-05-java-comparator-interface.md","title":"Belajar Java Comparator","description":"Pada postingan sebelumnya, kita bisa membandingkan class dengan mensortirnya dengan menggunakan comparable. Dengan comparable kita dapat menggunakan class sendiri sebagai object comparable dengan mengimplementasi class Comparable, namun bagaimana dengan class milik orang lain yang ingin kita comparable. Dengan kasus seperti itu kita dapat menggunakan interface generic bernama Comparator. Interface Comparator akan mengimplementasikan method int compare(T o1, T o2) yang nanti melakukan compare antara 2 objek, yang akan mengembalikan nilai bilangan bulat negatif, nol, dan bilangan bulat positif:","date":"2024-10-05T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"java comparator","permalink":"/blog/tags/java-comparator"}],"readingTime":3.6,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"java-comparator-interface","title":"Belajar Java Comparator","authors":"topekox","tags":["java","java comparator"]},"unlisted":false,"prevItem":{"title":"Cara melihat log service pada Linux","permalink":"/blog/melihat-log-service-linux"},"nextItem":{"title":"Belajar Java Comparable","permalink":"/blog/java-comparable-interface"}},"content":"Pada postingan sebelumnya, kita bisa membandingkan class dengan mensortirnya dengan menggunakan [comparable](/blog/java-comparable-interface). Dengan comparable kita dapat menggunakan class sendiri sebagai object comparable dengan mengimplementasi class Comparable, namun bagaimana dengan class milik orang lain yang ingin kita comparable. Dengan kasus seperti itu kita dapat menggunakan interface generic bernama Comparator. Interface Comparator akan mengimplementasikan method `int compare(T o1, T o2)` yang nanti melakukan compare antara 2 objek, yang akan mengembalikan nilai bilangan bulat negatif, nol, dan bilangan bulat positif:\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n* negatif:argumen pertama kurang dari argumen kedua.\\r\\n* nol: argumen pertama sama dengan argumen kedua.\\r\\n* positif: argumen pertama lebih besar dari yang argumen kedua.\\r\\n\\r\\n### Contoh\\r\\n\\r\\n```java\\r\\nimport java.util.Arrays;\\r\\nimport java.util.Comparator;\\r\\n\\r\\npublic class DemoComparator {\\r\\n\\t\\r\\n\\tstatic class Student {\\r\\n\\t\\t\\r\\n\\t\\tprivate Integer id;\\r\\n\\t\\tprivate String name;\\r\\n\\t\\t\\r\\n\\t\\tpublic Student(Integer id, String name) {\\r\\n\\t\\t\\tthis.id = id;\\r\\n\\t\\t\\tthis.name = name;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tpublic Integer getId() {\\r\\n\\t\\t\\treturn id;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic void setId(Integer id) {\\r\\n\\t\\t\\tthis.id = id;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tpublic String getName() {\\r\\n\\t\\t\\treturn name;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tpublic void setName(String name) {\\r\\n\\t\\t\\tthis.name = name;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic String toString() {\\r\\n\\t\\t\\treturn \\"Student (id = \\" + id + \\", name = \\" + name + \\")\\";\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\t// membuat comparator\\r\\n\\tstatic class SortUtil implements Comparator<Student> {\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic int compare(Student arg0, Student arg1) {\\r\\n\\t\\t\\treturn arg0.getId() - arg1.getId();\\r\\n\\t\\t}\\t\\t\\r\\n\\t}\\r\\n\\t\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tStudent[] students = {\\r\\n\\t\\t\\t\\tnew Student(3, \\"Ade\\"),\\r\\n\\t\\t\\t\\tnew Student(2, \\"Ray\\"),\\r\\n\\t\\t\\t\\tnew Student(4, \\"Masyita\\"),\\r\\n\\t\\t\\t\\tnew Student(1, \\"Nurul\\")\\r\\n\\t\\t};\\r\\n\\t\\t\\r\\n\\t\\tSystem.out.println(\\"Sebelum sorting\\");\\r\\n\\t\\t\\r\\n\\t\\tfor (Student s : students) {\\r\\n\\t\\t\\tSystem.out.println(s.toString());\\t\\t\\t\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tArrays.sort(students, new SortUtil());\\r\\n\\t\\t\\r\\n\\t\\tSystem.out.println(\\"\\\\nSetelah sorting\\");\\r\\n\\t\\t\\r\\n\\t\\tfor (Student s : students) {\\r\\n\\t\\t\\tSystem.out.println(s.toString());\\t\\t\\t\\r\\n\\t\\t}\\t\\t\\r\\n\\t}\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n```\\r\\nSebelum sorting\\r\\nStudent (id = 3, name = Ade)\\r\\nStudent (id = 2, name = Ray)\\r\\nStudent (id = 4, name = Masyita)\\r\\nStudent (id = 1, name = Nurul)\\r\\n\\r\\nSetelah sorting\\r\\nStudent (id = 1, name = Nurul)\\r\\nStudent (id = 2, name = Ray)\\r\\nStudent (id = 3, name = Ade)\\r\\nStudent (id = 4, name = Masyita)\\r\\n```\\r\\n\\r\\nPada contoh di atas program melakukan sorting `id` yang dilakukan pada method `compare` implementasi dari interface Comparator, yang akan mengurutkan `id` dari hasil `arg0.getId() - arg1.getId()`, yang kemudian disorting setelah dipanggil pada statement `Arrays.sort(students, new SortUtil())`:\\r\\n\\r\\n```java\\r\\n@Override\\r\\npublic int compare(Student arg0, Student arg1) {\\r\\n\\treturn arg0.getId() - arg1.getId();\\r\\n}\\r\\n```\\r\\n\\r\\n### Contoh 2 field\\r\\n\\r\\nKali ini kita akan melakukan compare dengan menggunakan 2 field:\\r\\n\\r\\n```java\\r\\nimport java.util.Arrays;\\r\\nimport java.util.Comparator;\\r\\n\\r\\npublic class DemoComparatorMultiField {\\r\\n\\r\\n\\tstatic class Student {\\r\\n\\r\\n\\t\\tprivate Integer id;\\r\\n\\t\\tprivate String name;\\r\\n\\r\\n\\t\\tpublic Student(Integer id, String name) {\\r\\n\\t\\t\\tthis.id = id;\\r\\n\\t\\t\\tthis.name = name;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic Integer getId() {\\r\\n\\t\\t\\treturn id;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic void setId(Integer id) {\\r\\n\\t\\t\\tthis.id = id;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic String getName() {\\r\\n\\t\\t\\treturn name;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tpublic void setName(String name) {\\r\\n\\t\\t\\tthis.name = name;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic String toString() {\\r\\n\\t\\t\\treturn \\"Student (id = \\" + id + \\", name = \\" + name + \\")\\";\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// membuat comparator\\r\\n\\tstatic class SortUtil implements Comparator<Student> {\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic int compare(Student arg0, Student arg1) {\\r\\n\\t\\t\\t// compare id\\r\\n\\t\\t\\tint idCompare = arg0.getId().compareTo(arg1.getId());\\r\\n\\r\\n\\t\\t\\t// compare name\\r\\n\\t\\t\\tint nameCompare = arg0.getName().compareTo(arg1.getName());\\r\\n\\r\\n\\t\\t\\t// akan melakukan compare dengan sortir name terlebih dahulu setelah itu sortir id\\r\\n\\t\\t\\treturn (nameCompare == 0) ? idCompare : nameCompare;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\r\\n\\t\\tStudent[] students = { \\r\\n\\t\\t\\t\\tnew Student(3, \\"Ade\\"),\\r\\n\\t\\t\\t\\tnew Student(2, \\"Ray\\"), \\r\\n\\t\\t\\t\\tnew Student(4, \\"Masyita\\"),\\r\\n\\t\\t\\t\\tnew Student(1, \\"Nurul\\"), \\r\\n\\t\\t\\t\\tnew Student(6, \\"Randi\\"), \\r\\n\\t\\t\\t\\tnew Student(7, \\"Masyita\\"), \\r\\n\\t\\t\\t\\tnew Student(5, \\"Restu\\")\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tSystem.out.println(\\"Sebelum sorting\\");\\r\\n\\r\\n\\t\\tfor (Student s : students) {\\r\\n\\t\\t\\tSystem.out.println(s.toString());\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tArrays.sort(students, new SortUtil());\\r\\n\\r\\n\\t\\tSystem.out.println(\\"\\\\nSetelah sorting\\");\\r\\n\\r\\n\\t\\tfor (Student s : students) {\\r\\n\\t\\t\\tSystem.out.println(s.toString());\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n```\\r\\nSebelum sorting\\r\\nStudent (id = 3, name = Ade)\\r\\nStudent (id = 2, name = Ray)\\r\\nStudent (id = 4, name = Masyita)\\r\\nStudent (id = 1, name = Nurul)\\r\\nStudent (id = 6, name = Randi)\\r\\nStudent (id = 7, name = Masyita)\\r\\nStudent (id = 5, name = Restu)\\r\\n\\r\\nSetelah sorting\\r\\nStudent (id = 3, name = Ade)\\r\\nStudent (id = 4, name = Masyita)\\r\\nStudent (id = 7, name = Masyita)\\r\\nStudent (id = 1, name = Nurul)\\r\\nStudent (id = 6, name = Randi)\\r\\nStudent (id = 2, name = Ray)\\r\\nStudent (id = 5, name = Restu)\\r\\n```\\r\\n\\r\\nPada contoh di atas method `compare()` akan melakukan sortir yang mana akan melakukan sortir terhadap _name_ terlebih dahulu setelah itu baru sortir _id_ ."},{"id":"java-comparable-interface","metadata":{"permalink":"/blog/java-comparable-interface","source":"@site/blog/2024-10-04-java-comparable-interface.md","title":"Belajar Java Comparable","description":"Interface Comparable pada Java digunakan untuk menentukan urutan objek pada class yang didefinisikan. Interface ini merupakan bagian dari paket java.lang dan menyediakan method compareTo() untuk membandingkan instance class. Class harus mengimplementasikan interface Comparable untuk menentukan urutannya. Method compareTo() akan me-return bilangan bulat negatif, nol, atau bilangan bulat positif, untuk hasi objek yang lebih kecil dari, sama dengan, atau lebih besar dari objek yang ditentukan.","date":"2024-10-04T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"java comparable","permalink":"/blog/tags/java-comparable"}],"readingTime":3.325,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"java-comparable-interface","title":"Belajar Java Comparable","authors":"topekox","tags":["java","java comparable"]},"unlisted":false,"prevItem":{"title":"Belajar Java Comparator","permalink":"/blog/java-comparator-interface"},"nextItem":{"title":"Cara Install dan menggunakan NVM (Node Version Manager)","permalink":"/blog/cara-menggunakan-nvm"}},"content":"Interface Comparable pada Java digunakan untuk menentukan urutan objek pada class yang didefinisikan. Interface ini merupakan bagian dari paket `java.lang` dan menyediakan method `compareTo()` untuk membandingkan instance class. Class harus mengimplementasikan interface `Comparable` untuk menentukan urutannya. Method `compareTo()` akan me-return bilangan bulat negatif, nol, atau bilangan bulat positif, untuk hasi objek yang lebih kecil dari, sama dengan, atau lebih besar dari objek yang ditentukan.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n:::info\\r\\nClass-class umum seperti `String`, `Integer` dan sebagainya, sudah mengimplementasikan interface `Comparable`, sehingga bisa langsung dilakukan sorting terhadap object-object tersebut.\\r\\n:::\\r\\n\\r\\n#### Contoh 1: membuat perbandingan untuk melakukan sorting integer\\r\\n\\r\\n```java\\r\\nimport java.util.Arrays;\\r\\n\\r\\npublic class DemoComparable {\\r\\n\\t\\r\\n\\tstatic class MyNumber implements Comparable<MyNumber> {\\r\\n\\r\\n\\t\\tprivate int value;\\r\\n\\t\\t\\r\\n\\t\\tpublic MyNumber(int value) {\\r\\n\\t\\t\\tthis.value = value;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic int compareTo(MyNumber o) {\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Ascending order\\r\\n\\t\\t\\treturn this.value - o.value;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic String toString() {\\r\\n\\t\\t\\treturn String.valueOf(this.value);\\r\\n\\t\\t}\\t\\t\\r\\n\\t}\\r\\n\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tMyNumber[] n = {\\r\\n\\t\\t\\tnew MyNumber(4),\\t\\r\\n\\t\\t\\tnew MyNumber(7),\\t\\r\\n\\t\\t\\tnew MyNumber(3),\\t\\r\\n\\t\\t\\tnew MyNumber(9),\\t\\r\\n\\t\\t\\tnew MyNumber(5)\\t\\r\\n\\t\\t};\\r\\n\\t\\t\\r\\n\\t\\tSystem.out.println(\\"Sebelum sorting: \\" + Arrays.toString(n));\\r\\n\\t\\t\\r\\n\\t\\t// Sorting\\r\\n\\t\\tArrays.sort(n);\\r\\n\\t\\t\\r\\n\\t\\tSystem.out.println(\\"Setelah sorting: \\" + Arrays.toString(n));\\t\\t\\r\\n\\t}\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n```\\r\\nSebelum sorting: [4, 7, 3, 9, 5]\\r\\nSetelah sorting: [3, 4, 5, 7, 9]\\r\\n```\\r\\n\\r\\n### Interface Comparable\\r\\n\\r\\nInterface Comparable merupakan interface yang hanya memiliki 1 method yaitu `compareTo(T obj)`:\\r\\n\\r\\n```\\r\\npublic interface Comparable<T> {\\r\\n\\r\\n    int compareTo(T obj);\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\ndimana, `T` adalah type objek yang akan di compare.\\r\\n\\r\\nHasil perbandingan akan mengembalikan nilai:\\r\\n\\r\\n* Negative, jika currentObj < specifiedObj.\\r\\n* Zero, jika currentObj == specifiedObj.\\r\\n* Positive, jika currentObj > specifiedobj.\\r\\n\\r\\n#### Contoh 2: membuat perbandingan sortir pair string dan integer\\r\\n\\r\\nPada contoh berikut kita akan melakukan compare pada type string dan integer, object pertama yang akan di sortir string, jika objek string sama maka disortir adalah yang integer.\\r\\n\\r\\n```java\\r\\nimport java.util.Arrays;\\r\\n\\r\\npublic class DemoComparableStringInteger {\\r\\n\\t\\r\\n\\tstatic class Pair implements Comparable<Pair> {\\r\\n\\t\\t\\r\\n\\t\\tprivate String theString;\\r\\n\\t\\tprivate int theInteger;\\r\\n\\t\\t\\r\\n\\t\\tpublic Pair(String theString, int theInteger) {\\r\\n\\t\\t\\tthis.theString = theString;\\r\\n\\t\\t\\tthis.theInteger = theInteger;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic int compareTo(Pair o) {\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Jika string tidak sama\\r\\n\\t\\t\\tif (this.theString.compareTo(o.theString) != 0) {\\r\\n\\t\\t\\t\\treturn this.theString.compareTo(o.theString);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Jika string sama\\r\\n\\t\\t\\treturn this.theInteger - o.theInteger;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic String toString() {\\r\\n\\t\\t\\treturn \\"[\\" + theString + \\" , \\" + theInteger + \\"]\\";\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t}\\r\\n\\t\\r\\n\\tpublic static void main(String... args) {\\r\\n\\t\\tPair[] pair = {\\r\\n\\t\\t\\tnew Pair(\\"Ucup\\", 2),\\r\\n\\t\\t\\tnew Pair(\\"Ade\\", 5),\\r\\n\\t\\t\\tnew Pair(\\"Recky\\", 4),\\r\\n\\t\\t\\tnew Pair(\\"Ade\\", 3),\\r\\n\\t\\t\\tnew Pair(\\"Restu\\", 1)\\t\\t\\t\\r\\n\\t\\t};\\r\\n\\t\\t\\r\\n\\t\\tSystem.out.println(\\"Sebelum Sortir\\");\\r\\n\\r\\n\\t\\t// Sebelum sortir\\r\\n\\t\\tfor (var p : pair) {\\r\\n\\t\\t\\tSystem.out.println(p);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t// Sortir\\r\\n\\t\\tArrays.sort(pair);\\r\\n\\t\\t\\r\\n\\t\\tSystem.out.println(\\"\\\\nSetelah Sortir\\");\\r\\n\\t\\t\\r\\n\\t\\t// Setelah sortir\\r\\n\\t\\tfor (var p : pair) {\\r\\n\\t\\t\\tSystem.out.println(p);\\r\\n\\t\\t}\\t\\t\\r\\n\\t}\\r\\n}\\r\\n```\\r\\n\\r\\nOutput\\r\\n\\r\\n```\\r\\nSebelum Sortir\\r\\n[Ucup , 2]\\r\\n[Ade , 5]\\r\\n[Recky , 4]\\r\\n[Ade , 3]\\r\\n[Restu , 1]\\r\\n\\r\\nSetelah Sortir\\r\\n[Ade , 3]\\r\\n[Ade , 5]\\r\\n[Recky , 4]\\r\\n[Restu , 1]\\r\\n[Ucup , 2]\\r\\n```\\r\\n\\r\\n#### Contoh 3: membuat perbandingan sortir string dan string\\r\\n\\r\\nPada contoh berikut kita akan melakukan compare pada type string (first name) dan string (last name), object first name yang akan di sortir terlebih dahulu, jika objek first name sama maka disortir berikutnya adalah yang last name.\\r\\n\\r\\n```java\\r\\nimport java.util.Arrays;\\r\\n\\r\\npublic class DemoComparablePairString {\\r\\n\\t\\r\\n\\tstatic class Pair implements Comparable<Pair> {\\r\\n\\t\\t\\r\\n\\t\\tprivate String firstName;\\r\\n\\t\\t\\r\\n\\t\\tprivate String lastName;\\r\\n\\t\\t\\r\\n\\t\\tpublic Pair(String firstName, String lastName) {\\r\\n\\t\\t\\tthis.firstName = firstName;\\r\\n\\t\\t\\tthis.lastName = lastName;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic int compareTo(Pair o) {\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Jika fist name tidak sama\\r\\n\\t\\t\\tif (this.firstName.compareTo(o.firstName) != 0) {\\r\\n\\t\\t\\t\\treturn this.firstName.compareTo(o.firstName);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// jika first name sama\\r\\n\\t\\t\\t// maka compare lastname\\r\\n\\t\\t\\treturn this.lastName.compareTo(o.lastName);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t@Override\\r\\n\\t\\tpublic String toString() {\\r\\n\\t\\t\\treturn \\"[ \\" + firstName + \\", \\" + lastName + \\"]\\";\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tpublic static void main(String... args) {\\r\\n\\t\\t\\r\\n\\t\\tPair[] pair = {\\r\\n\\t\\t\\tnew Pair(\\"Rohamdi\\", \\"Mabud\\"),\\t\\r\\n\\t\\t\\tnew Pair(\\"Recky\\", \\"Ardiansyah\\"),\\t\\r\\n\\t\\t\\tnew Pair(\\"Restu\\", \\"Ramadhan\\")\\t\\r\\n\\t\\t};\\r\\n\\t\\t\\r\\n\\t\\tSystem.out.println(\\"Sebelum Sortir\\");\\r\\n\\t\\tfor (var p : pair) {\\r\\n\\t\\t\\tSystem.out.println(p.toString());\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t// sortir\\r\\n\\t\\tArrays.sort(pair);\\r\\n\\t\\t\\r\\n\\t\\tSystem.out.println(\\"\\\\nSesudah Sortir\\");\\r\\n\\t\\tfor (var p : pair) {\\r\\n\\t\\t\\tSystem.out.println(p.toString());\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n```\\r\\nSebelum Sortir\\r\\n[ Rohamdi, Mabud]\\r\\n[ Recky, Ardiansyah]\\r\\n[ Restu, Ramadhan]\\r\\n\\r\\nSesudah Sortir\\r\\n[ Recky, Ardiansyah]\\r\\n[ Restu, Ramadhan]\\r\\n[ Rohamdi, Mabud]\\r\\n```"},{"id":"cara-menggunakan-nvm","metadata":{"permalink":"/blog/cara-menggunakan-nvm","source":"@site/blog/2024-07-05-cara-install-nvm.md","title":"Cara Install dan menggunakan NVM (Node Version Manager)","description":"Node Version Manager (NVM) adalah open source version manager untuk Node.js (Node). NVM memungkinkan kita untuk menginstal dan mengelola beberapa versi NodeJs dengan mudah dan beralih antar versi melalui perintah shell. Tutorial singkat ini menjelaskan cara menginstal NVM, dan cara menggunakannya untuk menginstal dan menjalankan berbagai versi Node.","date":"2024-07-05T00:00:00.000Z","tags":[{"inline":true,"label":"nodejs","permalink":"/blog/tags/nodejs"},{"inline":true,"label":"nvm","permalink":"/blog/tags/nvm"}],"readingTime":3.33,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"cara-menggunakan-nvm","title":"Cara Install dan menggunakan NVM (Node Version Manager)","authors":"topekox","tags":["nodejs","nvm"]},"unlisted":false,"prevItem":{"title":"Belajar Java Comparable","permalink":"/blog/java-comparable-interface"},"nextItem":{"title":"Belajar Java Generic","permalink":"/blog/java-generic"}},"content":"Node Version Manager (NVM) adalah open source version manager untuk Node.js (Node). NVM memungkinkan kita untuk menginstal dan mengelola beberapa versi NodeJs dengan mudah dan beralih antar versi melalui perintah shell. Tutorial singkat ini menjelaskan cara menginstal NVM, dan cara menggunakannya untuk menginstal dan menjalankan berbagai versi Node.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n![NVM](https://images.unsplash.com/photo-1598970434795-0c54fe7c0648?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)\\r\\n\\r\\n## Keunggulan NVM\\r\\nKarena Node berubah dengan cepat, pengujian aplikasi dengan versi yang berbeda sering kali kita mengalami kesulitan. Karena NVM memungkinkan peralihan cepat dan mudah antara versi Node, jauh lebih mudah untuk menguji kompatibilitas versi dan pemutakhiran dengan beberapa library. NVM menyimpan versi Node dan modul terkait di dalam direktori akun user anda , jadi sudo tidak diperlukan. NVM juga menyederhanakan proses instalasi dan kompilasi karena versi Node tidak perlu lagi diperoleh langsung dari distribution channel.\\r\\n\\r\\n## Instalasi NVM\\r\\nKita dapat menginstal dan menggunakan NVM terlepas dari apakah anda telah menginstal Node atau belum. NVM mengubah variabel path untuk memilih versi Node yang berbeda, sehingga dapat berfungsi dengan instalasi yang sudah ada sebelumnya.\\r\\n\\r\\n1. Install Node via `curl` atau `wiget`:\\r\\n```\\r\\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\\r\\n```\\r\\n```\\r\\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\\r\\n```\\r\\n\\r\\n:::info\\r\\n Petunjuk lengkap dapat merujuk ke [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)\\r\\n:::\\r\\n\\r\\n2. Install NVM di Windows: untuk installer Windows bisa didownload di [https://github.com/coreybutler/nvm-windows/releases](https://github.com/coreybutler/nvm-windows/releases)\\r\\n\\r\\n## Command\\r\\n\\r\\n* Cek versi NVM:\\r\\n```\\r\\nnvm version\\r\\n```\\r\\n\\r\\n* Melihat list node yang bisa diinstall:\\r\\n```\\r\\nnvm list available\\r\\n```\\r\\n\\r\\n* Install Node terbaru:\\r\\n```\\r\\nnvm install node\\r\\n```\\r\\n\\r\\n* Install Node dengan versi spesifik:\\r\\n```\\r\\nnvm install 16.20.0\\r\\n```\\r\\n\\r\\n* Melihat list Node yang sudah terinstall:\\r\\n```\\r\\nnvm list\\r\\n```\\r\\n\\r\\n* Pindah versi Node:\\r\\n```\\r\\nnpm use 16.20.0\\r\\n```\\r\\n\\r\\n* Uninstall Node sesuai versi yang spesifik:\\r\\n```\\r\\nnvm uninstall 16.20.0\\r\\n```\\r\\n\\r\\n* Untuk pentunjuk lengkap command NVM cukup ketik perintah `nvm`:\\r\\n\\r\\n```\\r\\nC:\\\\Users\\\\Ucup>nvm\\r\\n\\r\\nRunning version 1.2.2.\\r\\n\\r\\nUsage:\\r\\n\\r\\n  nvm arch                     : Show if node is running in 32 or 64 bit mode.\\r\\n  nvm current                  : Display active version.\\r\\n  nvm debug                    : Check the NVM4W process for known problems (troubleshooter).\\r\\n  nvm install <version> [arch] : The version can be a specific version, \\"latest\\" for the latest current version, or \\"lts\\" for the\\r\\n                                 most recent LTS version. Optionally specify whether to install the 32 or 64 bit version (defaults\\r\\n                                 to system arch). Set [arch] to \\"all\\" to install 32 AND 64 bit versions.\\r\\n                                 Add --insecure to the end of this command to bypass SSL validation of the remote download server.\\r\\n  nvm list [available]         : List the node.js installations. Type \\"available\\" at the end to see what can be installed. Aliased as ls.\\r\\n  nvm on                       : Enable node.js version management.\\r\\n  nvm off                      : Disable node.js version management.\\r\\n  nvm proxy [url]              : Set a proxy to use for downloads. Leave [url] blank to see the current proxy.\\r\\n                                 Set [url] to \\"none\\" to remove the proxy.\\r\\n  nvm node_mirror [url]        : Set the node mirror. Defaults to https://nodejs.org/dist/. Leave [url] blank to use default url.\\r\\n  nvm npm_mirror [url]         : Set the npm mirror. Defaults to https://github.com/npm/cli/archive/. Leave [url] blank to default url.\\r\\n  nvm uninstall <version>      : The version must be a specific version.\\r\\n  nvm upgrade                  : Update nvm to the latest version. Manual rollback available for 7 days after upgrade.\\r\\n  nvm use [version] [arch]     : Switch to use the specified version. Optionally use \\"latest\\", \\"lts\\", or \\"newest\\".\\r\\n                                 \\"newest\\" is the latest installed version. Optionally specify 32/64bit architecture.\\r\\n                                 nvm use <arch> will continue using the selected version, but switch to 32/64 bit mode.\\r\\n  nvm reinstall <version>      : A shortcut method to clean and reinstall a specific version.\\r\\n  nvm root [path]              : Set the directory where nvm should store different versions of node.js.\\r\\n                                 If <path> is not set, the current root will be displayed.\\r\\n  nvm subscribe [--]<topic>    : Subscribe to desktop notifications.\\r\\n                                 Valid topics: lts, current, nvm4w, author\\r\\n  nvm unsubscribe [--]<topic>  : Unsubscribe from desktop notifications.\\r\\n                                 Valid topics: lts, current, nvm4w, author\\r\\n  nvm [--]version              : Displays the current running version of nvm for Windows. Aliased as v.\\r\\n```\\r\\n\\r\\n## More Information\\r\\n\\r\\nUntuk dokumentasi lengkap NVM dapat mengunjungi link github nya langsung di [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm).\\r\\n\\r\\n## Referensi\\r\\n\\r\\n* [https://www.linode.com/docs/guides/how-to-install-use-node-version-manager-nvm/](https://www.linode.com/docs/guides/how-to-install-use-node-version-manager-nvm/)"},{"id":"java-generic","metadata":{"permalink":"/blog/java-generic","source":"@site/blog/2024-03-13-java-generic.md","title":"Belajar Java Generic","description":"Java generic adalah fitur dalam bahasa pemrograman Java yang memungkinkan pembuatan suatu tipe data, yang dapat digunakan kembali untuk berbagai jenis tipe data. Generic memungkinkan pembuatan class, interface, dan method yang dapat beroperasi pada tipe data yang berbeda atau dibuat secara lebih umum dan reusable.","date":"2024-03-13T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"java generic","permalink":"/blog/tags/java-generic"}],"readingTime":2.205,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"java-generic","title":"Belajar Java Generic","authors":"topekox","tags":["java","java generic"]},"unlisted":false,"prevItem":{"title":"Cara Install dan menggunakan NVM (Node Version Manager)","permalink":"/blog/cara-menggunakan-nvm"},"nextItem":{"title":"Apa itu Java Reflection","permalink":"/blog/java-reflection"}},"content":"Java generic adalah fitur dalam bahasa pemrograman Java yang memungkinkan pembuatan suatu tipe data, yang dapat digunakan kembali untuk berbagai jenis tipe data. Generic memungkinkan pembuatan class, interface, dan method yang dapat beroperasi pada tipe data yang berbeda atau dibuat secara lebih umum dan reusable. \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nContoh tanpa generic:\\r\\n\\r\\n```java\\r\\npublic class DemoNonGeneric {\\r\\n\\r\\n\\tstatic class Hello {\\r\\n\\t\\t\\r\\n\\t\\tprivate Object value;\\r\\n\\t\\t\\r\\n\\t\\tpublic Object getValue() {\\r\\n\\t\\t\\treturn value;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tpublic void setValue(Object value) {\\r\\n\\t\\t\\tthis.value = value;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t}\\r\\n\\t\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tHello hello = new Hello();\\r\\n\\t\\t\\r\\n\\t\\thello.setValue(\\"Halo Bro!!!\\");\\r\\n\\t\\tString valueString = (String) hello.getValue();\\r\\n\\t\\tSystem.out.println(valueString);\\r\\n\\r\\n\\t\\thello.setValue(\\"3\\");\\r\\n\\t\\tInteger valueInt = (Integer) hello.getValue(); //lolos ketika dicompile tapi error ketika runtime, karena berbeda type data.\\r\\n\\t\\tSystem.out.println(valueInt);\\r\\n\\t}\\r\\n\\t\\r\\n}\\r\\n```\\r\\n\\r\\nPada contoh di atas kita tidak boleh sembarangan memasukan value ke dalam `setValue()`, walaupun di dalam class tersebut terdapat class `Object` yaitu induk dari segala object di Java tapi tanpa adanya casting dengan tipe data yang sama maka akan memunculkan exception.  Sebenarnya cara tidak salah tapi bukanlah best practice, karena kita harus selalu melakukan casting terhadap type data yang sama ketika dideklarasikan.\\r\\n\\r\\nOutput:\\r\\n\\r\\n```\\r\\nHalo Bro!!!\\r\\nException in thread \\"main\\" java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Integer (java.lang.String and java.lang.Integer are in module java.base of loader \'bootstrap\')\\r\\n\\tat generic.DemoNonGeneric.main(DemoNonGeneric.java:27)\\r\\n```\\r\\n\\r\\nDengan menggunakan Java Generic maka problem di atas bisa di tangani.\\r\\n\\r\\n## Generic Class\\r\\n\\r\\nBerikut contoh class generic dengan menambahkan parameter `<T>` pada deklarasi class, yang nantinya parameter `T` akan menjadi type data yang digunakan di dalam class tersebut:\\r\\n\\r\\n```java\\r\\npublic class DemoClassGeneric<T> {\\r\\n\\t\\r\\n\\tprivate T value;\\r\\n\\t\\r\\n\\tpublic DemoClassGeneric(T value) {\\r\\n\\t\\tthis.value = value;\\r\\n\\t}\\r\\n\\t\\r\\n\\tpublic void setValue(T value) {\\r\\n\\t\\tthis.value = value;\\r\\n\\t}\\r\\n\\t\\r\\n\\tpublic T getValue() {\\r\\n\\t\\treturn value;\\r\\n\\t}\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\n```java\\r\\npublic class DemoClassGenericMain {\\r\\n\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tDemoClassGeneric<String> genString = new DemoClassGeneric<String>(\\"Halo bro!!!\\");\\r\\n\\t\\tSystem.out.println(\\"value \\" + genString.getValue());\\r\\n\\t\\t\\r\\n\\t\\tDemoClassGeneric<Integer> genInt = new DemoClassGeneric<Integer>(2024);\\r\\n\\t\\tSystem.out.println(\\"value \\" + genInt.getValue());\\r\\n\\t}\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nDengan menggunakan generic, maka kita dapat menggonta-ganti type data yang akan digunakan pada class generic yang sama, dan compiler akan memberikan error ketika value yang dimasukan tidak sesuai dengan type data yang digunakan.\\r\\n\\r\\n### Penamaan Type Parameter\\r\\n\\r\\nPada contoh di atas kita menggunakan parameter `T`, sebenarnya tidak ada aturan baku dalam menggunakan parameter, cuma dalam prakteknya penamaan parameter biasanya satu huruf besar.\\r\\n\\r\\nJenis nama tipe parameter yang sering digunakan :\\r\\n* T  Type\\r\\n* E  Element (biasanya digunakan untuk Collection)\\r\\n* K  Key\\r\\n* N  Number\\r\\n* V  Value\\r\\n* S,U,V dst. 2nd, 3rd, 4th types.\\r\\n\\r\\nSelain itu kita juga bisa menggunakan multiple parameter contohnya `public class DemoClassGeneric<T, U>`.\\r\\n\\r\\n:::info\\r\\nPembahasan lebih lengkap tentang Java Generic dapat di [lihat disini](/java/java-generic).\\r\\n:::\\r\\n\\r\\n## Referensi\\r\\n\\r\\n* [https://docs.oracle.com/javase/tutorial/java/generics/types.html](https://docs.oracle.com/javase/tutorial/java/generics/types.html)"},{"id":"java-reflection","metadata":{"permalink":"/blog/java-reflection","source":"@site/blog/2024-02-28-java-reflection.md","title":"Apa itu Java Reflection","description":"Java Reflection adalah fitur dalam bahasa pemrograman Java yang memungkinkan program untuk memeriksa dan memanipulasi dirinya sendiri. Fitur ini memungkinkan program untuk melihat struktur internalnya, seperti class, interface, method, dan field.","date":"2024-02-28T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"java reflection","permalink":"/blog/tags/java-reflection"}],"readingTime":2.895,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"java-reflection","title":"Apa itu Java Reflection","authors":"topekox","tags":["java","java reflection"]},"unlisted":false,"prevItem":{"title":"Belajar Java Generic","permalink":"/blog/java-generic"},"nextItem":{"title":"Cara Menulis Versi Rilis pada Software - Semantic Versioning & Changelog","permalink":"/blog/menulis-versi-rilis-software"}},"content":"Java Reflection adalah fitur dalam bahasa pemrograman Java yang memungkinkan program untuk memeriksa dan memanipulasi dirinya sendiri. Fitur ini memungkinkan program untuk melihat struktur internalnya, seperti class, interface, method, dan field. \\r\\n\\r\\nKemampuan untuk memeriksa dan memanipulasi class Java oleh dirinya sendiri (reflection) mungkin kedengarannya tidak terlalu penting, tetapi dalam bahasa pemrograman lain fitur ini tidak ada. Misalnya, tidak ada cara dalam program Pascal, C, atau C++ untuk memperoleh informasi tentang fungsi yang didefinisikan dalam program tersebut. \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nSalah satu contoh penggunaan reflection adalah dalam pembuatan framework java, seperti misalnya pada framework Spring.\\r\\n\\r\\n## Contoh Sederhana\\r\\n\\r\\nUntuk melihat cara kerja Java Reflection perhatikan contoh di bawah ini:\\r\\n\\r\\n```java\\r\\nimport java.lang.reflect.Method;\\r\\n\\r\\npublic class CheckMethods {\\r\\n\\r\\n        public static void main(String[] args) {\\r\\n                try {\\r\\n                        Class cls = Class.forName(args[0]);\\r\\n                        Method[] methods = cls.getDeclaredMethods();\\r\\n\\r\\n                        for (var m : methods) {\\r\\n                                System.out.println(m.toString());\\r\\n                        }\\r\\n                } catch (Exception e) {\\r\\n                        System.err.println(e);\\r\\n                }\\r\\n        }\\r\\n}\\r\\n```\\r\\n\\r\\nPada contoh di atas, kita memeriksa class dengan `Class cls = Class.forName(args[0])` melalui argumen yang dimasukan ketika menjalankan perintah `java` dan memanggil semua method yang berada di dalam sebuah class melalui `cls.getDeclaredMethods()`.\\r\\n\\r\\nSekarang kita akan memeriksa method sebuah class misalnya method dalam class `java.lang.Runnable` \\r\\n\\r\\n```\\r\\n java CheckMethods java.lang.Runnable\\r\\n ```\\r\\n \\r\\n Outputnya adalah:\\r\\n \\r\\n ```\\r\\n public abstract void java.lang.Runnable.run()\\r\\n ```\\r\\n \\r\\n Yang artinya method di dalam class `java.lang.Runnable`, hanya ada method `run()`.\\r\\n \\r\\n Contoh lain misalnya kita memeriksa method pada class `java.util.Stack`:\\r\\n \\r\\n ```\\r\\n java CheckMethods java.util.Stack\\r\\n ```\\r\\n \\r\\n Outputnya adalah:\\r\\n \\r\\n ```\\r\\n public boolean java.util.Stack.empty()\\r\\npublic synchronized java.lang.Object java.util.Stack.peek()\\r\\npublic synchronized int java.util.Stack.search(java.lang.Object)\\r\\npublic java.lang.Object java.util.Stack.push(java.lang.Object)\\r\\npublic synchronized java.lang.Object java.util.Stack.pop() \\r\\n ```\\r\\n\\r\\n## Java Reflection menggunakan Java Annotation\\r\\n\\r\\nPraktek Java Reflection menggunakan Java Annotation banyak digunakan dalam  pembuatan framework java. Pada praktek kali ini kita akan membuat sebuah annotation `@NotBlank` yang nantinya akan sebagai validasi field dalam sebuah objek. Berikut contohnya:\\r\\n\\r\\n* Membuat annotation untuk digunakan dalam setiap field\\r\\n\\r\\n```java\\r\\nimport java.lang.annotation.ElementType;\\r\\nimport java.lang.annotation.Retention;\\r\\nimport java.lang.annotation.RetentionPolicy;\\r\\nimport java.lang.annotation.Target;\\r\\n\\r\\n@Target(ElementType.FIELD)\\r\\n@Retention(RetentionPolicy.RUNTIME)\\r\\npublic @interface NotBlank {\\r\\n\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n* Membuat class object User Request menggunakan annotation `@NotBlank` yang sudah dibuat pada fieldnya\\r\\n\\r\\n```java\\r\\npublic class UserRequest {\\r\\n\\t\\r\\n\\t@NotBlank\\r\\n\\tprivate String username;\\r\\n\\t\\r\\n\\t@NotBlank\\r\\n\\tprivate String password;\\r\\n\\r\\n\\tpublic String getUsername() {\\r\\n\\t\\treturn username;\\r\\n\\t}\\r\\n\\r\\n\\tpublic void setUsername(String username) {\\r\\n\\t\\tthis.username = username;\\r\\n\\t}\\r\\n\\r\\n\\tpublic String getPassword() {\\r\\n\\t\\treturn password;\\r\\n\\t}\\r\\n\\r\\n\\tpublic void setPassword(String password) {\\r\\n\\t\\tthis.password = password;\\r\\n\\t}\\t\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\n* Membuat class Validasi\\r\\n\\r\\n```java\\r\\nimport java.lang.reflect.Field;\\r\\n\\r\\npublic class ValidationUtil {\\r\\n\\r\\n\\tpublic static void validationReflection(Object object) {\\r\\n\\t\\tClass cls = object.getClass();\\r\\n\\t\\tField[] fields = cls.getDeclaredFields();\\r\\n\\r\\n\\t\\tfor (var field : fields) {\\r\\n\\t\\t\\tfield.setAccessible(true); // mengakses semua  access modifier pada field\\r\\n\\t\\t\\tif (field.getAnnotation(NotBlank.class) != null) {\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\tString value = (String) field.get(object);\\r\\n\\t\\t\\t\\t\\tif (value == null || value.isBlank()) {\\r\\n\\t\\t\\t\\t\\t\\tthrow new RuntimeException(\\"Field \\" + field.getName() + \\" is Blank\\");\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t} catch (IllegalAccessException e) {\\r\\n\\t\\t\\t\\t\\tSystem.out.println(\\"Tidak bisa mengakses field \\" + field.getName());\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\n* Mebuat class main\\r\\n\\r\\n```java\\r\\npublic class ReflectionApp {\\r\\n\\r\\n\\tpublic static void main(String... args) {\\r\\n\\t\\tUserRequest request = new UserRequest();\\r\\n\\t\\t\\r\\n\\t\\tValidationUtil.validationReflection(request);\\r\\n\\t}\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nJika program di atas dijalankan akan menghasilkan output exception:\\r\\n\\r\\n```\\r\\nException in thread \\"main\\" java.lang.RuntimeException: Field username is Blank\\r\\n\\tat reflection.ValidationUtil.validationReflection(ValidationUtil.java:17)\\r\\n\\tat reflection.ReflectionApp.main(ReflectionApp.java:8)\\r\\n```\\r\\n\\r\\nOutput diatas terjadi  exception karena kita tidak memasukan value pada field `username` atau `password`. Jika kita memasukan nilai pada `username` dan `password` seperti di bawah ini maka exception di atas tidak terjadi:\\r\\n\\r\\n```java\\r\\nUserRequest request = new UserRequest();\\r\\nrequest.setUsername(\\"ucup\\");\\r\\nrequest.setPassword(\\"rahasia\\");\\r\\n\\t\\t\\r\\nValidationUtil.validationReflection(request);\\r\\n```\\r\\n\\r\\n## Kesimpulan\\r\\n\\r\\nJava Reflection mungkin jarang digunakan dalam prakteknya sehari-hati tapi sangat berguna ketika digunakan bersama Java Annotation dalam pembuatan Framework Java.\\r\\n\\r\\n## Referensi\\r\\n\\r\\n* [https://www.oracle.com/technical-resources/articles/java/javareflection.html](https://www.oracle.com/technical-resources/articles/java/javareflection.html)"},{"id":"menulis-versi-rilis-software","metadata":{"permalink":"/blog/menulis-versi-rilis-software","source":"@site/blog/2024-02-24-menulis-versi-software.md","title":"Cara Menulis Versi Rilis pada Software - Semantic Versioning & Changelog","description":"Semantic Versioning adalah best practice dari prinsip penulisan versi software, yang bertujuan untuk menjelaskan dasar perubahan pada perilisan produk software. Ini sudah menjadi standar dalam template library, terutama dalam project open source. Perilisan versi software dibagi menjadi pola tiga bagian utama yaitu:","date":"2024-02-24T00:00:00.000Z","tags":[{"inline":true,"label":"blog","permalink":"/blog/tags/blog"},{"inline":true,"label":"version","permalink":"/blog/tags/version"},{"inline":true,"label":"log","permalink":"/blog/tags/log"}],"readingTime":10.65,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"menulis-versi-rilis-software","title":"Cara Menulis Versi Rilis pada Software - Semantic Versioning & Changelog","authors":"topekox","tags":["blog","version","log"]},"unlisted":false,"prevItem":{"title":"Apa itu Java Reflection","permalink":"/blog/java-reflection"},"nextItem":{"title":"Apa itu Java Record","permalink":"/blog/java-record"}},"content":"[Semantic Versioning](https://semver.org/) adalah best practice dari prinsip penulisan versi software, yang bertujuan untuk menjelaskan dasar perubahan pada perilisan produk software. Ini sudah menjadi standar dalam template library, terutama dalam project open source. Perilisan versi software dibagi menjadi pola tiga bagian utama yaitu:\\r\\n\\r\\n* **Major**\\r\\n* **Minor**\\r\\n* **Patch**\\r\\n\\r\\nSelain ketiga bagian versi di atas, sebenarnya masih ada versi **Pre-release** version, yaitu versi yang dirilis sebagai uji coba sebelum final rilis. Ini sebenarnya tidak wajib, tergantung kebutuhan.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n![Unsplash](https://images.unsplash.com/photo-1607798748738-b15c40d33d57?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)\\r\\n\\r\\n\\r\\n## Major\\r\\n\\r\\nMajor version adalah versi utama. Major version yang mengalami perubahan signifikan pada aplikasi dan tidak kompatibilitas pada versi sebelumnya. Ini berarti bahwa jika Anda memperbarui kode Major lama anda ke versi Major utama yang baru, kode lama anda mungkin tidak lagi berfungsi dengan versi paket yang baru. Major version akan di-upgrade saat merilis versi dengan banyak perubahan, seperti perombakan code, perubahan requirement, ada fitur yang dihapus, penambahan fitur secara besar-besaran, atau perubahan yang tidak backward-compatible dengan versi Major sebelumnya. Jadi, ketika user melakukan upgrade Major version, user akan menghadapi kemungkinan error karena tidak backward-compatible pada software mereka. Contohnya ketika menggunakan Angular 15.0.0 lalu upgrade ke Angular 18.0.0 maka kemungkinan besar akan menghadapi error dan perlu penyesuaian agar kompatibel dengan versi terbaru. Seperti pada Angular 15.0.0 requirement minimalnya adalah Nodejs 14.20.0, sedangkan pada Angular 18.0.0 requirement minimalnya adalah Nodejs 18.19.1. Jadi, user juga perlu upgrade Nodejs saat upgrade Angular.\\r\\n\\r\\n## Minor\\r\\n\\r\\nMinor version adalah versi perubahan yang backward-compatible. Minor version akan di-upgrade saat merilis fitur yang tidak berdampak error pada existing software, dan akan di-reset ke \\"0\\" saat Major version rilis. Jadi, ketika user ketika melakukan upgrade Minor version, user bisa menikmati fitur baru dan aman dari error. Kalaupun ada rencana perubahan yang tidak backward-compatible, maka di Minor version perlu diberi warning, bukan langsung dihapus. Contoh kasus dalam Java misalnya kita ingin mengganti sebuah function/method, maka kita tidak boleh hapus function tersebut di Minor version. Kita harus mempertahankan function tersebut dan diberi tanda `@Depcreated`, lalu bikin function baru. Jadi, nantinya kita handle dua function di Minor version terbaru. Sehingga user yang menggunakan produk kita aplikasinya masih backward-compatible, tapi dengan warning agar mereka aware terhadap function baru. Function yang deprecated itu boleh dihapus saat Major version rilis. Intinya, di Minor version perubahan boleh dilakukan tapi harus backward-compatible. Contohnya pada AssertJ, ketika sebelumnya menggunakan AssertJ versi 3.16.0 lalu upgrade ke versi 3.17.0, user bisa menggunakan fitur baru `BDDAssertions.thenNoException()` pada assertion unit test, dan upgrade tersebut tidak akan menyebabkan error.\\r\\n\\r\\n## Patch\\r\\n\\r\\nPatch version adalah versi yang di-upgrade ketika merilis bugfix, improvement, atau refactor yang masih backward-compatible dengan versi sebelumnya, dan akan di-reset ke \\"0\\" saat Minor version atau Major version rilis. Jadi, saat user melakukan upgrade Patch version, tidak ada perubahan terkait fitur, kecuali perbaikan performa atau bugfixes dari versi sebelumnya. Misalnya ada perubahan algoritmanya yang diganti. Atau sebelumnya ada error pada case tertentu, setelah di-upgrade jadi tidak ada error. Tapi, jika fixing tersebut membutuhkan fitur baru, maka itu dirilis pada Minor version, bukan Patch version. Misalnya, bugs tersebut diperbaiki dengan cara membuat class baru, maka itu tidak bisa dirilis di Patch version, tapi di Minor version dan class yang lama diberi tanda `@Deprecated`. Contoh rilis Patch version adalah pada library date-fns versi 3.0.5 ada bugs pada function `areIntervalsOverlapping()`, lalu di versi 3.0.6 bugs tersebut diperbaiki.\\r\\n\\r\\n## Pre-release\\r\\n\\r\\nSelain itu, ada versi namanya Pre-release version, yaitu versi yang dirilis sebagai uji coba sebelum final rilis. Ini sebenarnya ini tidak wajib, tergantung kebutuhan. Pre-release ini tujuannya untuk kebutuhan testing, bukan untuk production, karena masih uji coba dan ada kemungkinan dibatalkan sebelum rilis jika dinilai belum layak / belum stabil. Pre-release ini ditulis dengan suffix \\"-alpha\\", \\"-beta\\", atau \\"-rc\\" (release candidate), beserta incremental number di belakangnya tergantung kesepakatan. Misalnya, sebelum merilis versi 3.1.0, maka sebagai uji coba versi 3.1.0-alpha1 yang dirilis. Jika ada fase uji coba tingkat selanjutnya, maka bisa ditulis 3.1.0-beta1. Atau jika menggunakan \\"-rc\\", maka penulisannya jadi 3.1.0-rc1. Setelah melewati fase uji coba dan dinyatakan layak dirilis, barulah versi 3.1.0 tanpa suffix Pre-release dirilis. Contohnya library SLF4J, sebelum merilis versi 2.0.0, mereka merilis versi 2.0.0-alpha1, 2.0.0-alpha2, 2.0.0-beta1, 2.0.0-beta2, hingga versi 2.0.0 rilis\\r\\n\\r\\n## Contoh Kasus Semantic Versioning\\r\\n\\r\\nContoh simulasi menggunakan Semantics Versioning adalah sebagai berikut:\\r\\n\\r\\n* Saat pertama rilis: `1.0.0`;\\r\\n* Ada bugfix suatu function: `1.0.1`;\\r\\n* Ada improvement performa: `1.0.2`;\\r\\n* Ada penambahan function baru yang backward-comaptible: `1.1.0`;\\r\\n* Ada bugfix terhadap function baru: `1.1.1`;\\r\\n* Ada function yang deprecated dan perlu diganti dengan yang baru: `1.2.0`;\\r\\n* Uji coba versi baru dengan perombakan dari versi sebelumnya: `2.0.0-alpha`;\\r\\n* Fitur Pre-release passed semua testing dan layak dirilis: `2.0.0`;\\r\\n* Ada improvement performa dari rilis sebelumnya: `2.0.1`;\\r\\n* Ada penambahan function baru lagi: `2.1.0`;\\r\\n* Begitu seterusnya...\\r\\n\\r\\n## Changelog\\r\\n\\r\\n[Changelog](https://keepachangelog.com/id-ID/1.0.0/) adalah sebuah file yang berisi daftar perubahan yang diurutkan secara kronologis untuk setiap versi dari sebuah proyek. Tujuan dari membuat changelog adalahntuk mempermudah pengguna dan kontributor melihat perubahan apa saja yang terjadi antara setiap rilis (atau versi) dari sebuah proyek. Siapa yang membutuhkan changelog? Baik pengguna ataupun pengembang, setiap orang yang menggunakan perangkat lunak adalah manusia yang peduli tentang apa yang ada di dalam perangkat lunak tersebut. Ketika perangkat lunak berubah, mereka ingin tahu apa yang berubah dan mengapa.\\r\\n\\r\\nPrinsip-prinsip Dasar pembuatan Changelog:\\r\\n\\r\\n* Changelog ditulis untuk manusia, bukan mesin.\\r\\n* Harus ada catatan untuk setiap versi.\\r\\n* Setiap tipe perubahan yang sama harus dikelompokkan.\\r\\n* Versi dan seksi harus dapat dirujuk.\\r\\n* Versi yang terakhir harus ditulis di paling atas.\\r\\n* Tanggal rilis setiap versi harus ditulis.\\r\\n* Berikan informasi jika kalian menggunakan [Semantic Versioning](https://semver.org/).\\r\\n\\r\\nJenis-jenis perubahan dalam Changelog:\\r\\n\\r\\n* Added/Ditambahkan untuk fitur yang baru.\\r\\n* Changed/Diubah untuk perubahan di fitur yang sudah ada.\\r\\n* Deprecated/Akan Dihilangkan untuk fitur yang akan dihapus dalam waktu dekat.\\r\\n* Removed/Dihilangkan untuk fitur yang sudah dihapus.\\r\\n* Fixed/Diperbaiki untuk setiap perbaikan bugs.\\r\\n* Security/Keamanan jika ada celah keamanan.\\r\\n\\r\\n:::info\\r\\nSisakan bagian `Unreleased/Belum Dirilis` di bagian paling atas file changelog untuk mencatat perubahan yang akan datang. Hal ini berguna untuk dua hal: Orang-orang bisa melihat perubahan apa saja yang akan datang. Saat waktu rilis datang, tinggal pindahkan bagian `Unreleased/Belum Dirilis` ke catatan rilis versi baru di bawah.\\r\\n:::\\r\\n\\r\\n:::info\\r\\nTidak ada aturan baku dalam menamai file changelog, cukup berikan nama yang mudah dikenali oleh orang-orang supaya mudah untuk dibaca. Tapi nama file changelog yang umum digunakan `CHANGELOG.md`, beberapa proyek menggunakan `README`, `CONTRIBUTING`, `HISTORY`, `NEWS`, `RELEASE` dsb.\\r\\n:::\\r\\n\\r\\nBerikut adalah contoh isi file changelog yang dibuat dalam format `markdown` dengan nama file `CHANGELOG.md`:\\r\\n\\r\\n```md title=\\"CHANGELOG.md\\"\\r\\n# Changelog\\r\\n\\r\\nAll notable changes to this project will be documented in this file.\\r\\n\\r\\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),\\r\\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\\r\\n\\r\\n## [Unreleased]\\r\\n\\r\\n### Added\\r\\n\\r\\n- v1.1 Brazilian Portuguese translation.\\r\\n- v1.1 German Translation\\r\\n- v1.1 Spanish translation.\\r\\n- v1.1 Italian translation.\\r\\n- v1.1 Polish translation.\\r\\n- v1.1 Ukrainian translation.\\r\\n\\r\\n### Changed\\r\\n\\r\\n- Use frontmatter title & description in each language version template\\r\\n- Replace broken OpenGraph image with an appropriately-sized Keep a Changelog \\r\\n  image that will render properly (although in English for all languages)\\r\\n- Fix OpenGraph title & description for all languages so the title and \\r\\ndescription when links are shared are language-appropriate\\r\\n\\r\\n### Removed\\r\\n\\r\\n- Trademark sign previously shown after the project description in version \\r\\n0.3.0\\r\\n\\r\\n## [1.1.1] - 2023-03-05\\r\\n\\r\\n### Added\\r\\n\\r\\n- Arabic translation (#444).\\r\\n- v1.1 French translation.\\r\\n- v1.1 Dutch translation (#371).\\r\\n- v1.1 Russian translation (#410).\\r\\n- v1.1 Japanese translation (#363).\\r\\n- v1.1 Norwegian Bokm\xe5l translation (#383).\\r\\n- v1.1 \\"Inconsistent Changes\\" Turkish translation (#347).\\r\\n- Default to most recent versions available for each languages.\\r\\n- Display count of available translations (26 to date!).\\r\\n- Centralize all links into `/data/links.json` so they can be updated easily.\\r\\n\\r\\n### Fixed\\r\\n\\r\\n- Improve French translation (#377).\\r\\n- Improve id-ID translation (#416).\\r\\n- Improve Persian translation (#457).\\r\\n- Improve Russian translation (#408).\\r\\n- Improve Swedish title (#419).\\r\\n- Improve zh-CN translation (#359).\\r\\n- Improve French translation (#357).\\r\\n- Improve zh-TW translation (#360, #355).\\r\\n- Improve Spanish (es-ES) transltion (#362).\\r\\n- Foldout menu in Dutch translation (#371).\\r\\n- Missing periods at the end of each change (#451).\\r\\n- Fix missing logo in 1.1 pages.\\r\\n- Display notice when translation isn\'t for most recent version.\\r\\n- Various broken links, page versions, and indentations.\\r\\n\\r\\n### Changed\\r\\n\\r\\n- Upgrade dependencies: Ruby 3.2.1, Middleman, etc.\\r\\n\\r\\n### Removed\\r\\n\\r\\n- Unused normalize.css file.\\r\\n- Identical links assigned in each translation file.\\r\\n- Duplicate index file for the english version.\\r\\n\\r\\n## [1.1.0] - 2019-02-15\\r\\n\\r\\n### Added\\r\\n\\r\\n- Danish translation (#297).\\r\\n- Georgian translation from (#337).\\r\\n- Changelog inconsistency section in Bad Practices.\\r\\n\\r\\n### Fixed\\r\\n\\r\\n- Italian translation (#332).\\r\\n- Indonesian translation (#336).\\r\\n\\r\\n## [1.0.0] - 2017-06-20\\r\\n\\r\\n### Added\\r\\n\\r\\n- New visual identity by [@tylerfortune8](https://github.com/tylerfortune8).\\r\\n- Version navigation.\\r\\n- Links to latest released version in previous versions.\\r\\n- \\"Why keep a changelog?\\" section.\\r\\n- \\"Who needs a changelog?\\" section.\\r\\n- \\"How do I make a changelog?\\" section.\\r\\n- \\"Frequently Asked Questions\\" section.\\r\\n- New \\"Guiding Principles\\" sub-section to \\"How do I make a changelog?\\".\\r\\n- Simplified and Traditional Chinese translations from [@tianshuo](https://github.com/tianshuo).\\r\\n- German translation from [@mpbzh](https://github.com/mpbzh) & [@Art4](https://github.com/Art4).\\r\\n- Italian translation from [@azkidenz](https://github.com/azkidenz).\\r\\n- Swedish translation from [@magol](https://github.com/magol).\\r\\n- Turkish translation from [@emreerkan](https://github.com/emreerkan).\\r\\n- French translation from [@zapashcanon](https://github.com/zapashcanon).\\r\\n- Brazilian Portuguese translation from [@Webysther](https://github.com/Webysther).\\r\\n- Polish translation from [@amielucha](https://github.com/amielucha) & [@m-aciek](https://github.com/m-aciek).\\r\\n- Russian translation from [@aishek](https://github.com/aishek).\\r\\n- Czech translation from [@h4vry](https://github.com/h4vry).\\r\\n- Slovak translation from [@jkostolansky](https://github.com/jkostolansky).\\r\\n- Korean translation from [@pierceh89](https://github.com/pierceh89).\\r\\n- Croatian translation from [@porx](https://github.com/porx).\\r\\n- Persian translation from [@Hameds](https://github.com/Hameds).\\r\\n- Ukrainian translation from [@osadchyi-s](https://github.com/osadchyi-s).\\r\\n\\r\\n### Changed\\r\\n\\r\\n- Start using \\"changelog\\" over \\"change log\\" since it\'s the common usage.\\r\\n- Start versioning based on the current English version at 0.3.0 to help\\r\\n  translation authors keep things up-to-date.\\r\\n- Rewrite \\"What makes unicorns cry?\\" section.\\r\\n- Rewrite \\"Ignoring Deprecations\\" sub-section to clarify the ideal\\r\\n  scenario.\\r\\n- Improve \\"Commit log diffs\\" sub-section to further argument against\\r\\n  them.\\r\\n- Merge \\"Why can\u2019t people just use a git log diff?\\" with \\"Commit log\\r\\n  diffs\\".\\r\\n- Fix typos in Simplified Chinese and Traditional Chinese translations.\\r\\n- Fix typos in Brazilian Portuguese translation.\\r\\n- Fix typos in Turkish translation.\\r\\n- Fix typos in Czech translation.\\r\\n- Fix typos in Swedish translation.\\r\\n- Improve phrasing in French translation.\\r\\n- Fix phrasing and spelling in German translation.\\r\\n\\r\\n### Removed\\r\\n\\r\\n- Section about \\"changelog\\" vs \\"CHANGELOG\\".\\r\\n\\r\\n## [0.3.0] - 2015-12-03\\r\\n\\r\\n### Added\\r\\n\\r\\n- RU translation from [@aishek](https://github.com/aishek).\\r\\n- pt-BR translation from [@tallesl](https://github.com/tallesl).\\r\\n- es-ES translation from [@ZeliosAriex](https://github.com/ZeliosAriex).\\r\\n\\r\\n## [0.2.0] - 2015-10-06\\r\\n\\r\\n### Changed\\r\\n\\r\\n- Remove exclusionary mentions of \\"open source\\" since this project can\\r\\n  benefit both \\"open\\" and \\"closed\\" source projects equally.\\r\\n\\r\\n## [0.1.0] - 2015-10-06\\r\\n\\r\\n### Added\\r\\n\\r\\n- Answer \\"Should you ever rewrite a change log?\\".\\r\\n\\r\\n### Changed\\r\\n\\r\\n- Improve argument against commit logs.\\r\\n- Start following [SemVer](https://semver.org) properly.\\r\\n\\r\\n## [0.0.8] - 2015-02-17\\r\\n\\r\\n### Changed\\r\\n\\r\\n- Update year to match in every README example.\\r\\n- Reluctantly stop making fun of Brits only, since most of the world\\r\\n  writes dates in a strange way.\\r\\n\\r\\n### Fixed\\r\\n\\r\\n- Fix typos in recent README changes.\\r\\n- Update outdated unreleased diff link.\\r\\n\\r\\n## [0.0.7] - 2015-02-16\\r\\n\\r\\n### Added\\r\\n\\r\\n- Link, and make it obvious that date format is ISO 8601.\\r\\n\\r\\n### Changed\\r\\n\\r\\n- Clarified the section on \\"Is there a standard change log format?\\".\\r\\n\\r\\n### Fixed\\r\\n\\r\\n- Fix Markdown links to tag comparison URL with footnote-style links.\\r\\n\\r\\n## [0.0.6] - 2014-12-12\\r\\n\\r\\n### Added\\r\\n\\r\\n- README section on \\"yanked\\" releases.\\r\\n\\r\\n## [0.0.5] - 2014-08-09\\r\\n\\r\\n### Added\\r\\n\\r\\n- Markdown links to version tags on release headings.\\r\\n- Unreleased section to gather unreleased changes and encourage note\\r\\n  keeping prior to releases.\\r\\n\\r\\n## [0.0.4] - 2014-08-09\\r\\n\\r\\n### Added\\r\\n\\r\\n- Better explanation of the difference between the file (\\"CHANGELOG\\")\\r\\n  and its function \\"the change log\\".\\r\\n\\r\\n### Changed\\r\\n\\r\\n- Refer to a \\"change log\\" instead of a \\"CHANGELOG\\" throughout the site\\r\\n  to differentiate between the file and the purpose of the file \u2014 the\\r\\n  logging of changes.\\r\\n\\r\\n### Removed\\r\\n\\r\\n- Remove empty sections from CHANGELOG, they occupy too much space and\\r\\n  create too much noise in the file. People will have to assume that the\\r\\n  missing sections were intentionally left out because they contained no\\r\\n  notable changes.\\r\\n\\r\\n## [0.0.3] - 2014-08-09\\r\\n\\r\\n### Added\\r\\n\\r\\n- \\"Why should I care?\\" section mentioning The Changelog podcast.\\r\\n\\r\\n## [0.0.2] - 2014-07-10\\r\\n\\r\\n### Added\\r\\n\\r\\n- Explanation of the recommended reverse chronological release ordering.\\r\\n\\r\\n## [0.0.1] - 2014-05-31\\r\\n\\r\\n### Added\\r\\n\\r\\n- This CHANGELOG file to hopefully serve as an evolving example of a\\r\\n  standardized open source project CHANGELOG.\\r\\n- CNAME file to enable GitHub Pages custom domain.\\r\\n- README now contains answers to common questions about CHANGELOGs.\\r\\n- Good examples and basic guidelines, including proper date formatting.\\r\\n- Counter-examples: \\"What makes unicorns cry?\\".\\r\\n\\r\\n[unreleased]: https://github.com/olivierlacan/keep-a-changelog/compare/v1.1.1...HEAD\\r\\n[1.1.1]: https://github.com/olivierlacan/keep-a-changelog/compare/v1.1.0...v1.1.1\\r\\n[1.1.0]: https://github.com/olivierlacan/keep-a-changelog/compare/v1.0.0...v1.1.0\\r\\n[1.0.0]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.3.0...v1.0.0\\r\\n[0.3.0]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.2.0...v0.3.0\\r\\n[0.2.0]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.1.0...v0.2.0\\r\\n[0.1.0]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.8...v0.1.0\\r\\n[0.0.8]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.7...v0.0.8\\r\\n[0.0.7]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.6...v0.0.7\\r\\n[0.0.6]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.5...v0.0.6\\r\\n[0.0.5]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.4...v0.0.5\\r\\n[0.0.4]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.3...v0.0.4\\r\\n[0.0.3]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.2...v0.0.3\\r\\n[0.0.2]: https://github.com/olivierlacan/keep-a-changelog/compare/v0.0.1...v0.0.2\\r\\n[0.0.1]: https://github.com/olivierlacan/keep-a-changelog/releases/tag/v0.0.1\\r\\n```\\r\\n\\r\\n## Referensi\\r\\n\\r\\n* [https://ferry.vercel.app/blog/prinsip-menulis-versi-pada-software-semantics-versioning](https://ferry.vercel.app/blog/prinsip-menulis-versi-pada-software-semantics-versioning)\\r\\n* [https://gist.github.com/juampynr/4c18214a8eb554084e21d6e288a18a2c](https://gist.github.com/juampynr/4c18214a8eb554084e21d6e288a18a2c)\\r\\n* [https://keepachangelog.com/](https://keepachangelog.com/id-ID/1.0.0/)\\r\\n* [https://semver.org/](https://semver.org/lang/id/)"},{"id":"java-record","metadata":{"permalink":"/blog/java-record","source":"@site/blog/2023-11-13-java-record.md","title":"Apa itu Java Record","description":"Java Record merupakan fitur baru yang ada pada Java 14. Java record merupakan class khusus yang menyederhanakan penulisan kode Java yang memiliki data yang tidak dapat diubah atau immutable. Ketika membuat Java Record secara otomatis akan dibuatkan constructor, method equals(), getter(), toString(), hasCode() tapi tidak membuatkan setter().","date":"2023-11-13T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"}],"readingTime":2.52,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"java-record","title":"Apa itu Java Record","authors":"topekox","tags":["java"]},"unlisted":false,"prevItem":{"title":"Cara Menulis Versi Rilis pada Software - Semantic Versioning & Changelog","permalink":"/blog/menulis-versi-rilis-software"},"nextItem":{"title":"Apa itu Java Anonymous Class","permalink":"/blog/java-anonymous-class"}},"content":"Java Record merupakan fitur baru yang ada pada Java 14. Java record merupakan class khusus yang menyederhanakan penulisan kode Java yang memiliki data yang tidak dapat diubah atau immutable. Ketika membuat Java Record secara otomatis akan dibuatkan `constructor`, method `equals()`, `getter()`, `toString()`, `hasCode()` tapi tidak membuatkan `setter()`.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Tanpa Java Record\\r\\n\\r\\nMisalkan kita membuat class dengan memiliki field `name` dan `city`. Berikut contoh class immutable umum yang sering dibuat:\\r\\n\\r\\n```java\\r\\npublic final class Person {\\r\\n    private final String name;\\r\\n    private final String city;\\r\\n\\r\\n    public Person(String name, String city) {\\r\\n        this.name = name;\\r\\n        this.city = city;\\r\\n    }\\r\\n\\r\\n    String name() { \\r\\n    \\treturn this.name; \\r\\n    }\\r\\n\\r\\n    String city()  { \\r\\n    \\treturn this.city; \\r\\n    }\\r\\n\\r\\n    public boolean equals() {\\r\\n      \\t//...\\r\\n    }\\r\\n    public int hashCode() {\\r\\n      \\t//...\\r\\n    }\\r\\n    \\r\\n    public String toString() {\\r\\n    \\t//...\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n## Menggunakan Java Record\\r\\n\\r\\nNah.. Kode panjang di atas bisa diimplementasikan dengan Java Record sehingga syntaksnya menjadi lebih simpel seperti berikut:\\r\\n\\r\\n```java\\r\\npublic record PersonRecord(String name, String city) { }\\r\\n```\\r\\n\\r\\n\\r\\nMisalnya kita buat class main agar melakukan output:\\r\\n\\r\\n```java\\r\\npublic class DemoJavaRecord {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tPersonRecord myRecord = new PersonRecord(\\"Ucup\\", \\"Makassar\\");\\r\\n\\t\\tSystem.out.println(myRecord);\\r\\n\\t\\tSystem.out.println(\\"Name: \\" + myRecord.name()); //tidak menggunakan getter pada umummnya\\r\\n\\t\\tSystem.out.println(\\"City: \\" + myRecord.city());\\r\\n\\t}\\r\\n}\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n```\\r\\nMyJavaRecord[name=Ucup, city=Makassar]\\r\\nName: Ucup\\r\\nCity: Makassar\\r\\n```\\r\\n\\r\\nSeperti sudah dijelaskan sebelumnya, pada record class kita hanya dapat memanggil `getter()` dan setiap constructor yang didefinisikan bersifat final, yang artinya pada contoh di atas value `name` dan `city` tidak dapat diubah. Sehingga, jika kita menambahkan method `setter()` untuk class record maka akan terjadi error.\\r\\n\\r\\n```java\\r\\npublic record PersonRecord(String name, String city) {\\r\\n\\r\\n//\\tERROR: karena field bersifat final\\r\\n//\\tvoid setName(String name) {\\r\\n//\\t\\tthis.name = name;\\r\\n//\\t}\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\n## Constructor pada Java Record\\r\\n\\r\\nSaat membuat class record, secara default Java juga membuatkan constructor dengan paramater yang sama pada saat class record dibuat, tapi kita juga dapat menambahkan constructor sendiri. Constructor custom ini dapat digunakan misalnya dalam kondisi tertentu, contohnya untuk validasi.\\r\\n\\r\\n```java\\r\\npublic record StudentRecord(String firstName, String lastName, int scores) {\\r\\n\\r\\n\\tpublic StudentRecord {\\r\\n\\t\\tif (scores < 50) {\\r\\n\\t\\t\\tSystem.out.println(\\"Maaf!!! Siswa atas nama \\" + firstName + \\" \\" + lastName + \\" TIDAK LULUS\\");\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tSystem.out.println(\\"Selamat!!! Siswa atas nama \\" + firstName + \\" \\" + lastName + \\" LULUS\\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n}\\r\\n```\\r\\n\\r\\nMain class:\\r\\n\\r\\n```java\\r\\npublic class DemoRecordApp {\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\t\\r\\n\\t\\tnew StudentRecord(\\"Ucup\\", \\"Bahlul\\", 30);\\r\\n\\t\\tnew StudentRecord(\\"Abu\\", \\"Nawas\\", 60);\\r\\n\\t\\t\\r\\n\\t}\\r\\n}\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n```\\r\\nMaaf!!! Siswa atas nama Ucup Bahlul TIDAK LULUS\\r\\nSelamat!!! Siswa atas nama Abu Nawas LULUS\\r\\n```\\r\\n\\r\\n## Method pada Java Record\\r\\n\\r\\nPada Java Record dimungkinkan untuk membuat method contoh:\\r\\n\\r\\n```java\\r\\npublic record StudentRecord(String firstName, String lastName, int scores) {\\r\\n\\r\\n\\tpublic String sayHello(){\\r\\n\\t\\treturn \\"My name is: \\" + firstName + \\" \\" + lastName + \\", and my score: \\" + scores;\\r\\n\\t}\\r\\n\\t\\r\\n}\\r\\n```\\r\\n\\r\\nWalaupun dimungkinkan dalam membuat method pada Java Record, tapi kita harus menghidari penggunaan method sebagai utility, karena sejatinya Java Record tujuannya untuk pembawa data.\\r\\n\\r\\n## Lihat juga\\r\\n\\r\\n* [https://docs.oracle.com/en/java/javase/17/language/records.html](https://docs.oracle.com/en/java/javase/17/language/records.html)\\r\\n* https://www.infoq.com/articles/exploring-java-records/"},{"id":"java-anonymous-class","metadata":{"permalink":"/blog/java-anonymous-class","source":"@site/blog/2023-10-03-java-anonymous-class.md","title":"Apa itu Java Anonymous Class","description":"Anonymous class atau class anomim adalah class yang tidak memiliki nama dan biasanya hanya digunakan sekali pakai. Class ini berguna untuk membuat kode yang ringkas dan bersih. Gunakan kelas anonim jika kita perlu menggunakan kelas lokal hanya sekali saja.","date":"2023-10-03T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"}],"readingTime":0.7,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"java-anonymous-class","title":"Apa itu Java Anonymous Class","authors":"topekox","tags":["java"]},"unlisted":false,"prevItem":{"title":"Apa itu Java Record","permalink":"/blog/java-record"},"nextItem":{"title":"Apa itu Java Recursive Method","permalink":"/blog/java-recursive-method"}},"content":"Anonymous class atau class anomim adalah class yang tidak memiliki nama dan biasanya hanya digunakan sekali pakai. Class ini berguna untuk membuat kode yang ringkas dan bersih. Gunakan kelas anonim jika kita perlu menggunakan kelas lokal hanya sekali saja.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Membuat class anonymous\\r\\n\\r\\nPada contoh berikut kita akan membuat class anonymous dalam inner class:\\r\\n\\r\\n```java\\r\\npublic class DemoAnonymousClass {\\r\\n\\r\\n\\tinterface Hello {\\r\\n\\t\\tvoid sayHello(String name);\\r\\n\\t}\\r\\n\\t\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tHello helloUcup = new Hello() {\\r\\n\\r\\n\\t\\t\\t@Override\\r\\n\\t\\t\\tpublic void sayHello(String name) {\\r\\n\\t\\t\\t\\tSystem.out.println(\\"Halo \\" + name);\\r\\n\\t\\t\\t}\\r\\n\\t\\t};\\r\\n\\t\\thelloUcup.sayHello(\\"Ucup\\"); // output: Halo Ucup\\r\\n\\t}\\r\\n}\\r\\n```\\r\\n\\r\\nPada contoh di atas anonymous class adalah sebuah expression, yang berarti kita membuat class dalam sebuah expression.\\r\\n\\r\\n```java\\r\\nHello helloUcup = new Hello() {\\r\\n\\t@Override\\r\\n\\tpublic void sayHello(String name) {\\r\\n\\t\\tSystem.out.println(\\"Halo \\" + name);\\r\\n\\t}\\r\\n};\\r\\n```\\r\\n\\r\\n## Referensi\\r\\n* [https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html](https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html)"},{"id":"java-recursive-method","metadata":{"permalink":"/blog/java-recursive-method","source":"@site/blog/2023-09-27-java-recursive.md","title":"Apa itu Java Recursive Method","description":"Metode rekursif (recursive method) adalah teknik dalam pemrograman di mana sebuah fungsi memanggil dirinya sendiri untuk menyelesaikan masalah. Pada dasarnya, fungsi tersebut memecah masalah besar menjadi sub-masalah yang lebih kecil dan menyelesaikannya secara berulang hingga mencapai kondisi dasar (base case), yang berhenti memanggil fungsi lagi.","date":"2023-09-27T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"}],"readingTime":2.07,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"java-recursive-method","title":"Apa itu Java Recursive Method","authors":"topekox","tags":["java"]},"unlisted":false,"prevItem":{"title":"Apa itu Java Anonymous Class","permalink":"/blog/java-anonymous-class"},"nextItem":{"title":"Cara Install Jekyll","permalink":"/blog/cara-install-jekyll"}},"content":"Metode rekursif (recursive method) adalah teknik dalam pemrograman di mana sebuah fungsi memanggil dirinya sendiri untuk menyelesaikan masalah. Pada dasarnya, fungsi tersebut memecah masalah besar menjadi sub-masalah yang lebih kecil dan menyelesaikannya secara berulang hingga mencapai kondisi dasar (base case), yang berhenti memanggil fungsi lagi.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Tanpa Recursive\\r\\n\\r\\nMisalkan kita membuat method perulangan yang akan melakukan perkalian dengan angka dibawahnya atau disebut (factorial).\\r\\n\\r\\nContoh:\\r\\n\\r\\n```java\\r\\npublic class DemoRecursiveMethod {\\r\\n\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tSystem.out.println(factorialLoop(5));\\r\\n\\t}\\r\\n\\t\\r\\n\\tstatic int factorialLoop(int value) {\\r\\n\\t\\tint result = 1;\\r\\n\\t\\tfor (int counter = 1; counter <= value; counter++) {\\r\\n\\t\\t\\tresult *= counter;\\r\\n\\t\\t}\\r\\n\\t\\treturn result;\\r\\n\\t}\\r\\n}\\r\\n```\\r\\n\\r\\nHasil:\\r\\n\\r\\n```\\r\\n120\\r\\n```\\r\\n\\r\\nDalam contoh di atas program akan melakukan looping dengan melakukan perkalian dengan angka dibawah 5, jika disederhanakan akan menjadi `1 * 2 * 3 * 4 * 5`.\\r\\n\\r\\n## Menggunakan Recursive method\\r\\n\\r\\nJika mengimplementasikan contoh factorial di atas ke recursive method, akan seperti di bawah ini:\\r\\n\\r\\n```java\\r\\npublic class DemoRecursiveMethod {\\r\\n\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tSystem.out.println(factorialRecursive(5));\\r\\n\\t}\\r\\n\\t\\r\\n\\tstatic int factorialRecursive(int value) {\\r\\n\\t\\tif (value == 1) {\\r\\n\\t\\t\\treturn 1;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn value * factorialRecursive(value - 1);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n}\\r\\n```\\r\\n\\r\\nPada contoh diatas pada method `factorialRecursive` setiap nilai yang dimasukan akan terus dikalikan dengan angka di bawahnya dengan memanggil dirinya sendiri pada `value * factorialRecursive(value - 1);`. Hasil outpunya akan sama dengan contoh sebelumnya.\\r\\n\\r\\n## Masalah dalam Recursive method\\r\\n\\r\\nRecursive method bukan tidak memiliki masalah, jika terlalu dalam dalam pemakainnya, maka kemungkinan akan menghasilkan _StackOverflow_ dimana kondisi method telalu banyak disimpan oleh Java. Ketika memanggil method sebenarnya Java menyimpannya ke dalam _stack_, jika terlalu dalam memanggil method, maka _stack_ akan terlalu besar dan bisa menyebabkan error _StackOverflow_. Kondisi error juga bisa berbeda disetiap komputer tergantung spesifikasi yang berbeda di masing-masing komputer.\\r\\n\\r\\nContoh:\\r\\n\\r\\n```java\\r\\npublic class DemoRecursiveMethod {\\r\\n\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tloopRecursive(1000000);\\r\\n\\t}\\r\\n\\t\\r\\n\\tstatic void loopRecursive(int value) {\\r\\n\\t\\tif (value == 0) {\\r\\n\\t\\t\\tSystem.out.println(\\"Program Selesai\\");\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tSystem.out.println(\\"value ke-\\" + value);\\r\\n\\t\\t\\tloopRecursive(value - 1);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n}\\r\\n```\\r\\n\\r\\nPada contoh di atas pada komputer yang saya gunakan error `StackOverflowError` hanya bisa digunakan sampai  `value ke-994361`. \\r\\n\\r\\n```\\r\\nvalue ke-1000000\\r\\n.\\r\\n.\\r\\n.\\r\\nvalue ke-994362\\r\\nvalue ke-994361\\r\\nException in thread \\"main\\" java.lang.StackOverflowError\\r\\n```\\r\\n\\r\\nBerbeda jika value loopRecursive -nya saya ganti ke nilai yang lebih rendah `loopRecursive(1000)`, pada komputer saya tidak mengalami error StackOverflow.\\r\\n\\r\\n## Kesimpulan\\r\\n\\r\\nRecursive method menarik untuk digunakan pada kondisi dimana kita memanggil method dirinya sendiri. Akan tetapi berbahaya jika digunakan terlalu dalam karena dapat menimbulkan StackOverflow."},{"id":"cara-install-jekyll","metadata":{"permalink":"/blog/cara-install-jekyll","source":"@site/blog/2023-07-03-cara-install-jekyll/index.md","title":"Cara Install Jekyll","description":"Jekyll adalah generator situs web statis, bisa digunakan untuk membuat blog bahkan web, yang diperuntukan untuk situs pribadi, proyek, atau organisasi. Jekyll ditulis dalam bahasa pemrograman Ruby oleh Tom Preston-Werner, Co-Founder GitHub, dan didistribusikan di bawah lisensi opensource. Dengan Jekyll kita bisa membuat blog dengan lebih simple, dan tidak membutuhkan database untuk menyimpan data karena.","date":"2023-07-03T00:00:00.000Z","tags":[{"inline":true,"label":"jekyll","permalink":"/blog/tags/jekyll"},{"inline":true,"label":"static web","permalink":"/blog/tags/static-web"}],"readingTime":1.895,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"cara-install-jekyll","title":"Cara Install Jekyll","authors":"topekox","tags":["jekyll","static web"]},"unlisted":false,"prevItem":{"title":"Apa itu Java Recursive Method","permalink":"/blog/java-recursive-method"},"nextItem":{"title":"Membuat User PostgreSQL","permalink":"/blog/membuat-user-postgresql"}},"content":"[Jekyll](https://jekyllrb.com/) adalah generator situs web statis, bisa digunakan untuk membuat blog bahkan web, yang diperuntukan untuk situs pribadi, proyek, atau organisasi. Jekyll ditulis dalam bahasa pemrograman Ruby oleh Tom Preston-Werner, Co-Founder GitHub, dan didistribusikan di bawah lisensi opensource. Dengan Jekyll kita bisa membuat blog dengan lebih simple, dan tidak membutuhkan database untuk menyimpan data karena.\\r\\n\\r\\nBerikut ini beberapa fitur Jekyll:\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n![Jekyll](https://images.unsplash.com/photo-1554475901-4538ddfbccc2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1472&q=80)\\r\\n\\r\\n* __Simple__ Tidak membutuhkan database (kemungkinan untuk serangan sql injection tidak ada), moderasi komentar, atau pembaruan yang mengganggu untuk dipasang\u2014hanya konten Anda.\\r\\n* __Static Web__ Jekyll menggunakan Markdown, Liquid, termasuk HTML & CSS.\\r\\n* __Blog aware__ Walaupun bersifat static fitur blog Permalinks, categories, pages, posts, dan custom layouts tetap ada. Anda tetap dapat mengubah tampilan dan layout, URL, data yang ditampilkan di halaman, dan lainnya.\\r\\n\\r\\n:::info\\r\\nPada tutorial ini saya menggunakan system operasi Windows. Untuk OS lain silahkan menyesuaikan.\\r\\n:::\\r\\n\\r\\n# 1. Install Ruby\\r\\n\\r\\nJekyll berdiri diatas pemrograman Ruby jadi kita perlu install Ruby terlebuh dahulu. Jekyll membutuhkan Requirements sebagai berikut:\\r\\n\\r\\n* [Ruby](https://www.ruby-lang.org/en/downloads/) version 2.5.0 atau yang terbaru\\r\\n* RubyGems\\r\\n* GCC & Make\\r\\n\\r\\n1. [Download Ruby](https://www.ruby-lang.org/en/downloads/), disini saya menggunakan Ruby versi 3.2.2, untuk versi Windows bisa langsung [download installernya](https://rubyinstaller.org/), jangan lupa download yang versi Devkit.\\r\\n\\r\\n![Install Ruby](ruby1.png)\\r\\n\\r\\nIkuti instruksinya sampai selesai, paket tambahan MSYS2 mungkin akan diinstall.\\r\\n\\r\\n![msys2](install-2-path.png)\\r\\n\\r\\nJika MSYS2 sudah terinstall maka akan terbuka terminal seperti dibawah ini, selanjutnya kita akan melakukan instalasi Jekyll melalui terminal MSYS2 ini, untuk selengkapnya kalian bisa cek [instalasi MSYS2 dengan lengkap disini](https://www.msys2.org/).\\r\\n\\r\\n2. Buka command prompt denganb mode __administrator__ cek apakah ruby sudah terinstal dengan perintah `ruby -v`\\r\\n\\r\\n![Cek Ruby](ruby2.png)\\r\\n\\r\\n3. Cek juga RubyGem `gem -v`.\\r\\n4. Cek GCC dan Make dengan perintah `gcc -v`,`g++ -v`, dan `make -v`\\r\\n\\r\\n:::tip\\r\\nJika GCC & Make tidak terinstall dengan baik silahkan install [GCC](https://bobbyhadz.com/blog/gcc-is-not-recognized-as-an-internal-or-external-command#:~:text=The%20error%20%22\'gcc\'%20is,to%20your%20PATH%20environment%20variable.) dan [Make](https://bobbyhadz.com/blog/make-is-not-recognized-as-internal-or-external-command#:~:text=The%20error%20%22\'make\'%20is,Search%20bar%20and%20type%20PowerShell.) secara manual.\\r\\n:::\\r\\n\\r\\n# 2. Install Jekyll\\r\\n\\r\\nBuka command prompt dengan mode __Administrator__.\\r\\n\\r\\nInstall Jekyll dan bundler gems\\r\\n\\r\\n```bash\\r\\ngem install jekyll bundler\\r\\n```\\r\\n\\r\\n# 3. Membuat blog\\r\\n\\r\\n* Membuat website dengan Jekyll contoh misal namanya `blogsaya`\\r\\n\\r\\n```bash\\r\\njekyll new blogsaya\\r\\n```\\r\\n\\r\\n* pindah kedalam folder blog\\r\\n\\r\\n```bash\\r\\ncd blogsaya\\r\\n```\\r\\n\\r\\n* Build web site dan jalankan melalui local server\\r\\n\\r\\n```bash\\r\\nbundle exec jekyll serve\\r\\n```\\r\\n\\r\\n* Buka url `http://127.0.0.1:4000/` di browser\\r\\n\\r\\n![Jekyll](jekyll-web.png)\\r\\n\\r\\n* Blog Jekyll berhasil running. Selanjutnya kita tinggal memasukkan konten\\\\\\r\\n\\r\\n## Referensi\\r\\n\\r\\n[https://jekyllrb.com/docs/](https://jekyllrb.com/docs/)"},{"id":"membuat-user-postgresql","metadata":{"permalink":"/blog/membuat-user-postgresql","source":"@site/blog/2023-06-27-membuat-user-postgresql.md","title":"Membuat User PostgreSQL","description":"Pada artikel ini kita akan membahas sedikit lebih detail tentang bagaimana perintah mengelola user di postreSQL","date":"2023-06-27T00:00:00.000Z","tags":[{"inline":true,"label":"postgre","permalink":"/blog/tags/postgre"},{"inline":true,"label":"postgresql","permalink":"/blog/tags/postgresql"},{"inline":true,"label":"database","permalink":"/blog/tags/database"},{"inline":true,"label":"rdbms","permalink":"/blog/tags/rdbms"}],"readingTime":1.08,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"membuat-user-postgresql","title":"Membuat User PostgreSQL","authors":"topekox","tags":["postgre","postgresql","database","rdbms"]},"unlisted":false,"prevItem":{"title":"Cara Install Jekyll","permalink":"/blog/cara-install-jekyll"},"nextItem":{"title":"Cara Mudah Membuat Logging di Spring Boot","permalink":"/blog/spring-logging"}},"content":"Pada artikel ini kita akan membahas sedikit lebih detail tentang bagaimana perintah mengelola user di postreSQL\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n![unsplash](https://images.unsplash.com/photo-1526226128118-9ef71fc2f34b?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)\\r\\n\\r\\n### Membuat user\\r\\n\\r\\n```sql\\r\\nCREATE USER ucup;\\r\\n```\\r\\n\\r\\n### Check List User\\r\\n\\r\\n```\\r\\n\\\\du\\r\\n```\\r\\n\\r\\n### Membuat user dengan password\\r\\n\\r\\n```sql\\r\\nCREATE USER ucup WITH PASSWORD \'inipassword\';\\r\\n```\\r\\n\\r\\n### Membuat user dengan time valid\\r\\n\\r\\n```sql\\r\\nCREATE USER ucup WITH PASSWORD \'inipassword\' VALID UNTIL \'2025-01-01\';\\r\\n```\\r\\n\\r\\n### Membuat user yang dapat membuat database\\r\\n\\r\\n```sql\\r\\nCREATE USER ucup WITH PASSWORD \'inipassword\' CREATEDB;\\r\\n```\\r\\n\\r\\n### Mengupdate / Alter User password\\r\\n\\r\\n```sql\\r\\nALTER USER ucup WITH PASSWORD \'passwordbaru\';\\r\\n```\\r\\n\\r\\n### Mengubah expiration date user password\\r\\n\\r\\n```sql\\r\\nALTER USER ucup VALID UNTIL \'Jan 31 2030\';\\r\\n```\\r\\n\\r\\n### Mengubah expiration date user, dengan mengubah Zona Waktu\\r\\n\\r\\nContoh menentukan password harus kedaluwarsa pada tengah hari tanggal 4 Mei 2025 menggunakan zona waktu satu jam lebih awal dari UTC\\r\\n\\r\\n```sql\\r\\nALTER USER ucup VALID UNTIL \'May 4 12:00:00 2025 +1\';\\r\\n```\\r\\n\\r\\n### Membuat password valid selamanya\\r\\n\\r\\n```sql\\r\\nALTER USER ucup VALID UNTIL \'infinity\';\\r\\n```\\r\\n\\r\\n### Membuat user dengan akses untuk membuat user baru dan database baru:\\r\\n\\r\\n```sql\\r\\nALTER USER ucup CREATEUSER CREATEDB;\\r\\n```\\r\\n\\r\\n### Menghapus User\\r\\n\\r\\n```sql\\r\\nDROP USER ucup;\\r\\n```\\r\\n\\r\\n### Membuat user dengan database\\r\\n\\r\\n```sql\\r\\nCREATE DATABASE yourdbname;\\r\\nCREATE USER youruser WITH ENCRYPTED PASSWORD \'yourpass\';\\r\\nGRANT ALL PRIVILEGES ON DATABASE yourdbname TO youruser;\\r\\n```"},{"id":"spring-logging","metadata":{"permalink":"/blog/spring-logging","source":"@site/blog/2022-06-19-springlogging.md","title":"Cara Mudah Membuat Logging di Spring Boot","description":"Logging sangat berguna untuk memberikan informasi jalannya program kepada programmer, atau untuk menganalisa baik masih dalam proses debug developer maupun log ketika sudah dalam production.","date":"2022-06-19T00:00:00.000Z","tags":[{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"log","permalink":"/blog/tags/log"}],"readingTime":0.73,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"spring-logging","title":"Cara Mudah Membuat Logging di Spring Boot","authors":"topekox","tags":["spring","springboot","log"]},"unlisted":false,"prevItem":{"title":"Membuat User PostgreSQL","permalink":"/blog/membuat-user-postgresql"},"nextItem":{"title":"Cara Membuat Project Spring MVC dengan Maven - XML Configuration - Bundle Tomcat","permalink":"/blog/spring-mvc-maven-xml"}},"content":"Logging sangat berguna untuk memberikan informasi jalannya program kepada programmer, atau untuk menganalisa baik masih dalam proses debug developer maupun log ketika sudah dalam production. \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n![Topekox](https://images.unsplash.com/photo-1581090587512-8bfdd1119f94?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80)\\r\\n\\r\\nDi Java ada banyak framework untuk logging, namun yang paling gampang menggunakan Sl4j yang sudah dibundle dalam library [Lombok](https://projectlombok.org/).\\r\\n\\r\\n## Menggunakan Logging Slf4j\\r\\n\\r\\nSecara default aplikasi spring boot bisa langsung menggunakan Slf4j, maka kita tinggal memasukan annotation `@Slf4j` ke dalam class kita, contoh:\\r\\n\\r\\n```java\\r\\npackage com.topekox.demojunit;\\r\\n\\r\\nimport lombok.extern.slf4j.Slf4j;\\r\\n\\r\\n// inject annotation Slf4j\\r\\n@Slf4j\\r\\npublic class DemoUtilsTest {\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nUntuk menggunakannya tinggal di panggil `log`.\\r\\n\\r\\n```java\\r\\nlog.info(\\"Pesan Info\\");\\r\\nlog.warning(\\"Pesan Warning\\");\\r\\nlog.error(\\"Pesan Error\\");\\r\\n```\\r\\n\\r\\n## Konfigurasi Spring Boot\\r\\n\\r\\nKita juga bisa menambahkan konfigurasi tambahan, contoh kita ingin menyimpan log ke dalam file, update `application.properties` milik spring boot lalu tambahkan baris di bawah ini:\\r\\n\\r\\n```properties\\r\\n# Menyimpan print out log ke dalam file \'application.log\' yang berada di direktori \'log\'\\r\\nlogging.file.name=log/application.log\\r\\n```"},{"id":"spring-mvc-maven-xml","metadata":{"permalink":"/blog/spring-mvc-maven-xml","source":"@site/blog/2022-06-16-spring-mvc-maven/index.md","title":"Cara Membuat Project Spring MVC dengan Maven - XML Configuration - Bundle Tomcat","description":"Pada artikel sebelumnya (Membuat Project Spring MVC di Eclipse), saya sudah membagikan cara membuat project Spring MVC dengan menggunakan Eclipse IDE. Pada tutorial kali ini kita akan mencoba untuk membuat project Spring MVC menggunakan Maven.","date":"2022-06-16T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"spring mvc","permalink":"/blog/tags/spring-mvc"},{"inline":true,"label":"eclipse","permalink":"/blog/tags/eclipse"}],"readingTime":3.665,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"spring-mvc-maven-xml","title":"Cara Membuat Project Spring MVC dengan Maven - XML Configuration - Bundle Tomcat","authors":"topekox","tags":["java","spring","spring mvc","eclipse"]},"unlisted":false,"prevItem":{"title":"Cara Mudah Membuat Logging di Spring Boot","permalink":"/blog/spring-logging"},"nextItem":{"title":"Membuat Service Android - Background & Foreground","permalink":"/blog/service-android"}},"content":"Pada artikel sebelumnya ([Membuat Project Spring MVC di Eclipse](/blog/spring-mvc-eclipse)), saya sudah membagikan cara membuat project Spring MVC dengan menggunakan Eclipse IDE. Pada tutorial kali ini kita akan mencoba untuk membuat project Spring MVC menggunakan Maven.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n![https://unsplash.com/photos/VcpMPsf_Ex0](https://images.unsplash.com/photo-1518043610038-064362b44076?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80)\\r\\n\\r\\nSebelumnya apa itu [Maven](https://maven.apache.org/)? jadi maven itu secara umum bisa digambarkan sebagai project manajemen, jadi nantinya project kita akan menggunakan standard dari maven, dan semua dependency/library yang dibutuhkan dalam project kita sudah dihandle oleh maven. Kalo di bahasa pemrograman lain, maven sepadan dengan npm di NodeJS atau composer di PHP.\\r\\n\\r\\nSalah satu kelebihan maven adalah, project yang dibuat dengan maven dapat dijalankan di berbagai IDE atau Text Editor.\\r\\n\\r\\n## Teknologi yang digunakan\\r\\n\\r\\n* Apache Maven 3.8.5\\r\\n* JDK 17\\r\\n* Text Editor VS Code\\r\\n* Apache Tomcat 9\\r\\n* Springframework 5\\r\\n\\r\\n:::tip\\r\\nCara Install Maven di sini: [https://maven.apache.org/install.html](https://maven.apache.org/install.html).\\r\\n:::\\r\\n\\r\\n## Konfigurasi Project\\r\\n\\r\\n* Pastikan maven sudah terinstall di komputer teman-teman buka, terminal jalankan perintah di bawah ini untuk membuat project baru misalnya dengan nama `SpringMVCMaven`:\\r\\n\\r\\n```bash\\r\\nmvn archetype:generate -DgroupId=com.tutorialtimposu -DartifactId=SpringMVCMaven -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false\\r\\n```\\r\\n\\r\\n* Buka Project baru dengan menggunakan editor pilihan teman-teman misal disini saya menggunakan VSCode.\\r\\n\\r\\nBuka file `pom.xml` masukan dependency, dan ganti packaging-nya menjadi `war` karena kita akan membuat web java seperti di bawah ini:\\r\\n\\r\\n```xml title=pom.xml\\r\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\r\\n\\r\\n<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\">\\r\\n  <modelVersion>4.0.0</modelVersion>\\r\\n\\r\\n  <groupId>com.tutorialtimposu</groupId>\\r\\n  <artifactId>SpringMVCMaven</artifactId>\\r\\n  <version>1.0-SNAPSHOT</version>\\r\\n  <packaging>war</packaging>\\r\\n\\r\\n  <name>SpringMVCMaven</name>\\r\\n  <url>http://www.tutorialtimposu.com</url>\\r\\n\\r\\n  <properties>\\r\\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\\r\\n    <maven.compiler.source>17</maven.compiler.source>\\r\\n    <maven.compiler.target>17</maven.compiler.target>\\r\\n    <spring.version>5.3.21</spring.version>\\r\\n  </properties>\\r\\n\\r\\n  <dependencies>\\r\\n    <dependency>\\r\\n      <groupId>org.springframework</groupId>\\r\\n      <artifactId>spring-context</artifactId>\\r\\n      <version>${spring.version}</version>\\r\\n    </dependency>\\r\\n    <dependency>\\r\\n      <groupId>org.springframework</groupId>\\r\\n      <artifactId>spring-webmvc</artifactId>\\r\\n      <version>${spring.version}</version>\\r\\n    </dependency>\\r\\n    <dependency>\\r\\n      <groupId>org.springframework</groupId>\\r\\n      <artifactId>spring-web</artifactId>\\r\\n      <version>${spring.version}</version>\\r\\n    </dependency>\\r\\n    <dependency>\\r\\n      <groupId>javax.servlet</groupId>\\r\\n      <artifactId>jstl</artifactId>\\r\\n      <version>1.2</version>\\r\\n    </dependency>\\r\\n    <dependency>\\r\\n      <groupId>javax.servlet.jsp.jstl</groupId>\\r\\n      <artifactId>jstl-api</artifactId>\\r\\n      <version>1.2</version>\\r\\n    </dependency>\\r\\n\\r\\n    <dependency>\\r\\n      <groupId>junit</groupId>\\r\\n      <artifactId>junit</artifactId>\\r\\n      <version>4.11</version>\\r\\n      <scope>test</scope>\\r\\n    </dependency>\\r\\n  </dependencies>\\r\\n\\r\\n  <build>\\r\\n    <pluginManagement>\\r\\n      \x3c!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --\x3e\\r\\n      <plugins>\\r\\n        \x3c!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --\x3e\\r\\n        <plugin>\\r\\n          <artifactId>maven-clean-plugin</artifactId>\\r\\n          <version>3.1.0</version>\\r\\n        </plugin>\\r\\n        \x3c!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --\x3e\\r\\n        <plugin>\\r\\n          <artifactId>maven-resources-plugin</artifactId>\\r\\n          <version>3.0.2</version>\\r\\n        </plugin>\\r\\n        <plugin>\\r\\n          <artifactId>maven-compiler-plugin</artifactId>\\r\\n          <version>3.8.0</version>\\r\\n        </plugin>\\r\\n        <plugin>\\r\\n          <artifactId>maven-surefire-plugin</artifactId>\\r\\n          <version>2.22.1</version>\\r\\n        </plugin>\\r\\n        <plugin>\\r\\n          <artifactId>maven-war-plugin</artifactId>\\r\\n          <version>3.2.3</version>\\r\\n        </plugin>\\r\\n        <plugin>\\r\\n          <artifactId>maven-install-plugin</artifactId>\\r\\n          <version>2.5.2</version>\\r\\n        </plugin>\\r\\n        <plugin>\\r\\n          <artifactId>maven-deploy-plugin</artifactId>\\r\\n          <version>2.8.2</version>\\r\\n        </plugin>\\r\\n        \x3c!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --\x3e\\r\\n        <plugin>\\r\\n          <artifactId>maven-site-plugin</artifactId>\\r\\n          <version>3.7.1</version>\\r\\n        </plugin>\\r\\n        <plugin>\\r\\n          <artifactId>maven-project-info-reports-plugin</artifactId>\\r\\n          <version>3.0.0</version>\\r\\n        </plugin>\\r\\n      </plugins>\\r\\n    </pluginManagement>\\r\\n  </build>\\r\\n</project>\\r\\n```\\r\\n\\r\\n* Buat struktur direktori web maven Spring MVC dengan membuat file `web.xml` dan file konfigurasi Spring MVC seperti gambar dibawah ini:\\r\\n\\r\\n![struktur-direktory](1.png)\\r\\n\\r\\n* Isi `web.xml`\\r\\n\\r\\n```xml title=web.xml\\r\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\r\\n<web-app xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\r\\n    xmlns=\\"http://xmlns.jcp.org/xml/ns/javaee\\"\\r\\n    xsi:schemaLocation=\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\\"\\r\\n    id=\\"WebApp_ID\\" version=\\"3.1\\">\\r\\n    <display-name>DemoSpringMVCMaven</display-name>\\r\\n    \x3c!-- Spring MVC Configs --\x3e\\r\\n\\r\\n    \x3c!-- Step 1: Configure Spring MVC Dispatcher Servlet --\x3e\\r\\n    <servlet>\\r\\n        <servlet-name>dispatcher</servlet-name>\\r\\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\\r\\n        <init-param>\\r\\n            <param-name>contextConfigLocation</param-name>\\r\\n            <param-value>/WEB-INF/spring-mvc-demo-servlet.xml</param-value>\\r\\n        </init-param>\\r\\n        <load-on-startup>1</load-on-startup>\\r\\n    </servlet>\\r\\n\\r\\n    \x3c!-- Step 2: Set up URL mapping for Spring MVC Dispatcher Servlet --\x3e\\r\\n    <servlet-mapping>\\r\\n        <servlet-name>dispatcher</servlet-name>\\r\\n        <url-pattern>/</url-pattern>\\r\\n    </servlet-mapping>\\r\\n</web-app>\\r\\n```\\r\\n\\r\\n* Isi dari `/WEB-INF/spring-mvc-demo-servlet.xml`, dengan menempatkan semua file web jsp kita berada di direktori `/WEB-INF/view/`:\\r\\n\\r\\n```xml\\r\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\r\\n<beans xmlns=\\"http://www.springframework.org/schema/beans\\"\\r\\n\\txmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\r\\n\\txmlns:context=\\"http://www.springframework.org/schema/context\\"\\r\\n\\txmlns:mvc=\\"http://www.springframework.org/schema/mvc\\"\\r\\n\\txsi:schemaLocation=\\"\\r\\n\\t\\thttp://www.springframework.org/schema/beans\\r\\n    \\thttp://www.springframework.org/schema/beans/spring-beans.xsd\\r\\n    \\thttp://www.springframework.org/schema/context\\r\\n    \\thttp://www.springframework.org/schema/context/spring-context.xsd\\r\\n    \\thttp://www.springframework.org/schema/mvc\\r\\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\\">\\r\\n\\r\\n\\t\x3c!-- Step 3: Add support for component scanning --\x3e\\r\\n\\t<context:component-scan\\r\\n\\t\\tbase-package=\\"com.tutorialtimposu\\" />\\r\\n\\r\\n\\t\x3c!-- Step 4: Add support for conversion, formatting and validation support --\x3e\\r\\n\\t<mvc:annotation-driven />\\r\\n\\r\\n\\t\x3c!-- Step 5: Define Spring MVC view resolver --\x3e\\r\\n\\t<bean\\r\\n\\t\\tclass=\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\">\\r\\n\\t\\t<property name=\\"prefix\\" value=\\"/WEB-INF/view/\\" />\\r\\n\\t\\t<property name=\\"suffix\\" value=\\".jsp\\" />\\r\\n\\t</bean>\\r\\n\\t\\r\\n</beans>\\r\\n```\\r\\n\\r\\n* Install dependency dengan perintah\\r\\n\\r\\n```\\r\\nmvn install\\r\\n```\\r\\n\\r\\n## Buat Controller\\r\\n\\r\\n* Buat class baru dengan nama `HelloController.java` di dalam package `com.tutorialtimposu.controller`, class ini akan meload file jsp dengan nama `hello.jsp`:\\r\\n\\r\\n```java title=HelloController.java\\r\\npackage com.tutorialtimposu.controller;\\r\\n\\r\\nimport org.springframework.stereotype.Controller;\\r\\nimport org.springframework.ui.Model;\\r\\nimport org.springframework.web.bind.annotation.GetMapping;\\r\\n\\r\\n@Controller\\r\\npublic class HelloController {\\r\\n    \\r\\n    @GetMapping(\\"/\\")\\r\\n    public String sayHello(Model model) {\\r\\n        model.addAttribute(\\"name\\", \\"Ucup\\");\\r\\n        return \\"hello\\";\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n* Buat file `hello.jsp`:\\r\\n\\r\\n```html title=hello.jsp\\r\\n<%@ page language=\\"java\\" contentType=\\"text/html; charset=UTF-8\\"\\r\\n    pageEncoding=\\"UTF-8\\"%>\\r\\n<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n<meta charset=\\"UTF-8\\">\\r\\n<title>Demo Spring MVC</title>\\r\\n</head>\\r\\n<body>\\r\\n    <h2>Hello ${name}</h2>\\r\\n</body>\\r\\n</html>\\r\\n```\\r\\n\\r\\n## Bundle Tomcat dengan Cargo\\r\\n\\r\\nPermasalahnnya adalah kita belum mempunyai server yang bundle, berbeda kalau kita menggunakan IDE seperti Eclipse atau IntelijIDEA Ultimate, server sudah dibundle di dalam IDE nya. Solusinya adalah kita membundle plugin Cargo ke dalam maven `pom.xml`. Nantinya si Cargo akan mendownloadkan Tomcat untuk kita:\\r\\n\\r\\n```xml title=pom.xml\\r\\n...\\r\\n<plugin>\\r\\n  <groupId>org.codehaus.cargo</groupId>\\r\\n  <artifactId>cargo-maven3-plugin</artifactId>\\r\\n  <version>1.9.10</version>\\r\\n  <configuration>\\r\\n    <container>\\r\\n      <containerId>tomcat9x</containerId>\\r\\n      <zipUrlInstaller>\\r\\n        <url>https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat/9.0.62/tomcat-9.0.62.zip</url>\\r\\n      </zipUrlInstaller>\\r\\n    </container>\\r\\n  </configuration>\\r\\n</plugin>\\r\\n...\\r\\n```\\r\\n\\r\\nSelanjutnya jalankan perintah di bawah ini untuk menjalankan:\\r\\n\\r\\n```bash\\r\\nmvn clean package\\r\\n\\r\\nmvn cargo:run\\r\\n```\\r\\n\\r\\nSetiap ada perubahan jalankan kedua perintah di atas.\\r\\n\\r\\n```bash\\r\\n...\\r\\n[INFO] [talledLocalContainer] Jun 16, 2022 8:39:44 PM org.apache.coyote.AbstractProtocol start\\r\\n[INFO] [talledLocalContainer] INFO: Starting ProtocolHandler [\\"http-nio-8080\\"]\\r\\n[INFO] [talledLocalContainer] Jun 16, 2022 8:39:44 PM org.apache.catalina.startup.Catalina start\\r\\n[INFO] [talledLocalContainer] INFO: Server startup in [5461] milliseconds\\r\\n[INFO] [talledLocalContainer] Tomcat 9.x started on port [8080]\\r\\n[INFO] Press Ctrl-C to stop the container...\\r\\n```\\r\\n\\r\\n![run](2.png)\\r\\n\\r\\n:::info\\r\\n[Source Code](https://github.com/TutorialTimposu/tutorial-spring-from-blog/tree/main/SpringMVCMaven)\\r\\n:::"},{"id":"service-android","metadata":{"permalink":"/blog/service-android","source":"@site/blog/2022-06-13-service-android/index.md","title":"Membuat Service Android - Background & Foreground","description":"Service adalah proses yang berjalan dibelakang layar. Service tidak memiliki UI, tapi bekerja lebih ke-proses suatu pekerjaan. Untuk membuat service di Android, dulu sering dibuat menggunakan class IntentService. Namun, sayangnya class IntentService sudah di-deprecated. Tapi kita masih bisa menggunakan class Service secara manual, yang bisa digunakan menggunakan Background Service atau Foreground Service.","date":"2022-06-13T00:00:00.000Z","tags":[{"inline":true,"label":"android","permalink":"/blog/tags/android"},{"inline":true,"label":"android-java","permalink":"/blog/tags/android-java"}],"readingTime":4.075,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"service-android","title":"Membuat Service Android - Background & Foreground","authors":"topekox","tags":["android","android-java"]},"unlisted":false,"prevItem":{"title":"Cara Membuat Project Spring MVC dengan Maven - XML Configuration - Bundle Tomcat","permalink":"/blog/spring-mvc-maven-xml"},"nextItem":{"title":"Menggunakan Scheduled/Penjadwalan di Spring Boot","permalink":"/blog/menggunakan-scheduled-spring-boot"}},"content":"Service adalah proses yang berjalan dibelakang layar. Service tidak memiliki UI, tapi bekerja lebih ke-proses suatu pekerjaan. Untuk membuat service di Android, dulu sering dibuat menggunakan class `IntentService`. Namun, sayangnya class `IntentService` sudah di-deprecated. Tapi kita masih bisa menggunakan class `Service` secara manual, yang bisa digunakan menggunakan Background Service atau Foreground Service.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n![Android](https://images.unsplash.com/photo-1587840178393-079769787b40?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80)\\r\\n\\r\\n## Background Service\\r\\n\\r\\nBackground Service digunakan untuk menjalankan Service di background, namun service ini akan mati ketika aplikasi kita dimatikan.\\r\\n\\r\\nCara membuatnya, yaitu buat sebuah class extends `Service` disini saya beri nama `MyBackgroundService.java` dan override method `onStartCommand`, dan buat `Thread` baru di dalam method tersebut.\\r\\n\\r\\n```java title=MyBackgroundService.java\\r\\npackage com.topekox.demoservice;\\r\\n\\r\\nimport android.app.Service;\\r\\nimport android.content.Intent;\\r\\nimport android.os.IBinder;\\r\\nimport android.util.Log;\\r\\n\\r\\nimport androidx.annotation.Nullable;\\r\\n\\r\\npublic class MyBackgroundService extends Service {\\r\\n\\r\\n    @Override\\r\\n    public int onStartCommand(Intent intent, int flags, int startId) {\\r\\n        new Thread(new Runnable() {\\r\\n            @Override\\r\\n            public void run() {\\r\\n                while (true) {\\r\\n                    Log.e(\\"SERVICE\\", \\"Service is running...\\");\\r\\n                    try {\\r\\n                        Thread.sleep(2000);\\r\\n                    } catch (InterruptedException e) {\\r\\n                        e.printStackTrace();\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }).start();\\r\\n        return super.onStartCommand(intent, flags, startId);\\r\\n    }\\r\\n\\r\\n    @Nullable\\r\\n    @Override\\r\\n    public IBinder onBind(Intent intent) {\\r\\n        return null;\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nPada class di atas kita membuat Thread di dalam service yang akan di eksekusi setiap interval 2 detik. Selanjutnya daftarkan class Service tersebut ke dalam `AndroidManifest.xml`:\\r\\n\\r\\n```xml\\r\\n<service android:name=\\".MyBackgroundService\\"></service>\\r\\n```\\r\\n\\r\\nKode lengkap `AndroidManifest.xml`:\\r\\n\\r\\n```xml title=AndroidManifest.xml\\r\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\r\\n<manifest xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\r\\n    xmlns:tools=\\"http://schemas.android.com/tools\\"\\r\\n    package=\\"com.topekox.demoservice\\">\\r\\n\\r\\n    <application\\r\\n        android:allowBackup=\\"true\\"\\r\\n        android:dataExtractionRules=\\"@xml/data_extraction_rules\\"\\r\\n        android:fullBackupContent=\\"@xml/backup_rules\\"\\r\\n        android:icon=\\"@mipmap/ic_launcher\\"\\r\\n        android:label=\\"@string/app_name\\"\\r\\n        android:roundIcon=\\"@mipmap/ic_launcher_round\\"\\r\\n        android:supportsRtl=\\"true\\"\\r\\n        android:theme=\\"@style/Theme.DemoService\\"\\r\\n        tools:targetApi=\\"31\\">\\r\\n        <activity\\r\\n            android:name=\\".MainActivity\\"\\r\\n            android:exported=\\"true\\">\\r\\n            <intent-filter>\\r\\n                <action android:name=\\"android.intent.action.MAIN\\" />\\r\\n\\r\\n                <category android:name=\\"android.intent.category.LAUNCHER\\" />\\r\\n            </intent-filter>\\r\\n        </activity>\\r\\n        \x3c!-- Menambahkan Service --\x3e\\r\\n        <service android:name=\\".MyBackgroundService\\"></service>\\r\\n    </application>\\r\\n\\r\\n</manifest>\\r\\n```\\r\\n\\r\\nPanggil Service dari class Activity, contoh dipanggil dari class `MainActivity`:\\r\\n\\r\\n```java\\r\\nIntent intentService = new Intent(this, MyBackgroundService.class);\\r\\nstartService(intentService);\\r\\n```\\r\\n\\r\\nGambar log ketika aplikasi dijalankan.\\r\\n\\r\\n![log](1.png)\\r\\n\\r\\nService akan berhenti ketika aplikasi dimatikan.\\r\\n\\r\\n## Foreground Service\\r\\n\\r\\nBerbeda dengan Background Service, Foreground Service akan tetap berjalan meski aplikasi dimatikan.\\r\\n\\r\\nCara membuatnya hampir sama dengan cara sebelumnya hanya pada bagian class `MainActivity` yang berbeda.\\r\\n\\r\\nBuat class extends `Service` disini saya beri nama `MyForegroundService.java` dan override method `onStartCommand`, dan buat `Thread` baru di dalam method tersebut.\\r\\n\\r\\n```java title=MyForegroundService.java\\r\\npackage com.topekox.demoservice;\\r\\n\\r\\nimport android.app.Notification;\\r\\nimport android.app.NotificationChannel;\\r\\nimport android.app.NotificationManager;\\r\\nimport android.app.Service;\\r\\nimport android.content.Intent;\\r\\nimport android.os.Build;\\r\\nimport android.os.IBinder;\\r\\nimport android.util.Log;\\r\\n\\r\\nimport androidx.annotation.Nullable;\\r\\nimport androidx.annotation.RequiresApi;\\r\\n\\r\\npublic class MyForegroundService extends Service {\\r\\n\\r\\n    @RequiresApi(api = Build.VERSION_CODES.O)\\r\\n    @Override\\r\\n    public int onStartCommand(Intent intent, int flags, int startId) {\\r\\n        new Thread(new Runnable() {\\r\\n            @Override\\r\\n            public void run() {\\r\\n                while (true) {\\r\\n                    Log.e(\\"SERVICE\\", \\"Service is running...\\");\\r\\n                    try {\\r\\n                        Thread.sleep(2000);\\r\\n                    } catch (InterruptedException e) {\\r\\n                        e.printStackTrace();\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }).start();\\r\\n\\r\\n        return super.onStartCommand(intent, flags, startId);\\r\\n    }\\r\\n\\r\\n    @Nullable\\r\\n    @Override\\r\\n    public IBinder onBind(Intent intent) {\\r\\n        return null;\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nDaftar service dan permission `FOREGROUND_SERVICE` ke `AndroidManifest.xml`:\\r\\n\\r\\n```xml title=AndroidManifest.xml\\r\\n<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\r\\n<manifest xmlns:android=\\"http://schemas.android.com/apk/res/android\\"\\r\\n    xmlns:tools=\\"http://schemas.android.com/tools\\"\\r\\n    package=\\"com.topekox.demoservice\\">\\r\\n    \x3c!-- add permission --\x3e\\r\\n    <uses-permission android:name=\\"android.permission.FOREGROUND_SERVICE\\"></uses-permission>\\r\\n\\r\\n    <application\\r\\n        ...\\r\\n        <activity\\r\\n           ...\\r\\n        </activity>\\r\\n        \x3c!-- register service --\x3e\\r\\n        <service android:name=\\".MyForegroundService\\"></service>\\r\\n        ...\\r\\n    </application>\\r\\n\\r\\n</manifest>\\r\\n```\\r\\n\\r\\nPanggil service di `MainActivity`, cuma disini sedikit berbeda karena di versi Android yang saya jalankan, saya harus memanggil annotation `@RequiresApi(api = Build.VERSION_CODES.O)` untuk masalah kompatibelitas, kurang lebih method `onCreate` seperti di bawah ini:\\r\\n\\r\\n```java\\r\\n@RequiresApi(api = Build.VERSION_CODES.O)\\r\\n@Override\\r\\nprotected void onCreate(Bundle savedInstanceState) {\\r\\n    super.onCreate(savedInstanceState);\\r\\n    setContentView(R.layout.activity_main);\\r\\n\\r\\n    Intent intentService = new Intent(this, MyForegroundService.class);\\r\\n    \\r\\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && intentService == null) {\\r\\n        startForegroundService(intentService);\\r\\n    } else {\\r\\n        MainActivity.this.startService(intentService);\\r\\n    }        \\r\\n}\\r\\n```\\r\\n\\r\\n:::tip\\r\\nBaca dokumentasi lengkap Foreground Service [di sini](https://developer.android.com/guide/components/foreground-services).\\r\\n:::\\r\\n\\r\\n### Menambahkan Notifikasi\\r\\n\\r\\nUntuk menambahkan notifikasi `NotificationChannel` pada method `onStartCommand` di class ForegroundService:\\r\\n\\r\\n```java title=MyForegroundService.java\\r\\n@RequiresApi(api = Build.VERSION_CODES.O)\\r\\n@Override\\r\\npublic int onStartCommand(Intent intent, int flags, int startId) {\\r\\n    new Thread(new Runnable() {\\r\\n        @Override\\r\\n        public void run() {\\r\\n            while (true) {\\r\\n                Log.e(\\"SERVICE\\", \\"Service is running...\\");\\r\\n                try {\\r\\n                    Thread.sleep(2000);\\r\\n                } catch (InterruptedException e) {\\r\\n                    e.printStackTrace();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }).start();\\r\\n\\r\\n    final String CHANNEL_ID = \\"Foreground Channel ID\\";\\r\\n    NotificationChannel channel = new NotificationChannel(\\r\\n            CHANNEL_ID,\\r\\n            CHANNEL_ID,\\r\\n            NotificationManager.IMPORTANCE_LOW);\\r\\n\\r\\n    getSystemService(NotificationManager.class).createNotificationChannel(channel);\\r\\n    Notification.Builder notification = new Notification.Builder(this, CHANNEL_ID)\\r\\n            .setContentText(\\"Service is running\\")\\r\\n            .setContentTitle(\\"Service Enabled\\")\\r\\n            .setSmallIcon(R.drawable.ic_launcher_background);\\r\\n\\r\\n    startForeground(1001, notification.build());\\r\\n\\r\\n    return super.onStartCommand(intent, flags, startId);\\r\\n}\\r\\n```\\r\\n\\r\\nKita juga memberikan kondisi agar service hidup jika sebelumnya tidak hidup, tambahkan kondisi di class `MainActivity`:\\r\\n\\r\\n```java title=MainActivity.java\\r\\n@RequiresApi(api = Build.VERSION_CODES.O)\\r\\n@Override\\r\\nprotected void onCreate(Bundle savedInstanceState) {\\r\\n    super.onCreate(savedInstanceState);\\r\\n    setContentView(R.layout.activity_main);\\r\\n\\r\\n    if (!foregroundServiceIsRunning()) {\\r\\n        Intent intentService = new Intent(this, MyForegroundService.class);\\r\\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && intentService == null) {\\r\\n            startForegroundService(intentService);\\r\\n        } else {\\r\\n            MainActivity.this.startService(intentService);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nprivate boolean foregroundServiceIsRunning() {\\r\\n    ActivityManager activityManager =\\r\\n            (ActivityManager) getSystemService(MainActivity.this.ACTIVITY_SERVICE);\\r\\n\\r\\n    for (ActivityManager.RunningServiceInfo service :\\r\\n            activityManager.getRunningServices(Integer.MAX_VALUE)) {\\r\\n        if (MyForegroundService.class.getName().equals(service.service.getClassName())) {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n```\\r\\n\\r\\nGambar Notifikasi:\\r\\n\\r\\n![notifikasi](2.png)\\r\\n\\r\\n### Service Always ON\\r\\n\\r\\nAgar foreground service tetap berjalan walaupun Android telah direstart, buat sebuah class `BroadcastReceiver` untuk mengandle ini:\\r\\n\\r\\n```java title=MyBroadcastReceiver.java\\r\\npackage com.topekox.demoservice;\\r\\n\\r\\nimport android.content.BroadcastReceiver;\\r\\nimport android.content.Context;\\r\\nimport android.content.Intent;\\r\\nimport android.os.Build;\\r\\n\\r\\nimport androidx.annotation.RequiresApi;\\r\\n\\r\\npublic class MyBroadcastReceiver extends BroadcastReceiver {\\r\\n\\r\\n    @RequiresApi(api = Build.VERSION_CODES.O)\\r\\n    @Override\\r\\n    public void onReceive(Context context, Intent intent) {\\r\\n        if (intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED)) {\\r\\n            Intent intentService = new Intent(context, MyForegroundService.class);\\r\\n            context.startForegroundService(intentService);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nLalu tambahkan permission dan register intentnya di `AndroidManifest.xml`:\\r\\n\\r\\n```xml\\r\\n...\\r\\n<uses-permission android:name=\\"android.permission.RECEIVE_BOOT_COMPLETED\\"></uses-permission>\\r\\n...\\r\\n \x3c!-- register receiver --\x3e\\r\\n    <receiver android:name=\\".MyBroadcastReceiver\\"\\r\\n        android:exported=\\"true\\">\\r\\n        <intent-filter>\\r\\n            <action android:name=\\"android.intent.action.BOOT_COMPLETED\\"></action>\\r\\n        </intent-filter>\\r\\n    </receiver>\\r\\n...\\r\\n```\\r\\n\\r\\nMaka service akan tetap berjalan walau Android telah direstart.\\r\\n\\r\\n:::info\\r\\n[Full Source Code](https://github.com/TopekoX/sample-android-java/tree/main/DemoServiceBackgroundForeground).\\r\\n:::"},{"id":"menggunakan-scheduled-spring-boot","metadata":{"permalink":"/blog/menggunakan-scheduled-spring-boot","source":"@site/blog/2022-06-10-spring-boot-scheduled.md","title":"Menggunakan Scheduled/Penjadwalan di Spring Boot","description":"Dalam satu kasus biasanya kita ingin menjalankan scheduled atau penjadwalan dalam aplikasi kita. Misalnya kita ingin dalam interval waktu tertentu. Contohnya seperti aplikasi SMS Gateway yang akan mengecek dalam interval waktu tertentu akan memeriksa SMS masuk atau SMS keluar.","date":"2022-06-10T00:00:00.000Z","tags":[{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"}],"readingTime":0.575,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"menggunakan-scheduled-spring-boot","title":"Menggunakan Scheduled/Penjadwalan di Spring Boot","authors":"topekox","tags":["spring","springboot"]},"unlisted":false,"prevItem":{"title":"Membuat Service Android - Background & Foreground","permalink":"/blog/service-android"},"nextItem":{"title":"Cara Membuat Project Spring MVC di Eclipse - XML Configuration","permalink":"/blog/spring-mvc-eclipse"}},"content":"Dalam satu kasus biasanya kita ingin menjalankan scheduled atau penjadwalan dalam aplikasi kita. Misalnya kita ingin dalam interval waktu tertentu. Contohnya seperti aplikasi SMS Gateway yang akan mengecek dalam interval waktu tertentu akan memeriksa SMS masuk atau SMS keluar.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n![Topekox](https://images.unsplash.com/photo-1435527173128-983b87201f4d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1467&q=80)\\r\\n\\r\\nDi Spring Boot, terdapat Annotation `@Scheduled` yang bisa digunakan untuk Scheduled. \\r\\n\\r\\nContoh penggunaan annotation pada method yang ingin diberikan scheduled setiap 5 detik akan dieksekusi menggunakan `@Scheduled` di Spring Boot.\\r\\n\\r\\n```java\\r\\n@Scheduled(fixedDelay = 5000)\\r\\nprivate void sendingProcess() {\\r\\n\\r\\n    // TODO...\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nTapi jangan lupa untuk mengaktifkannya dengan annotation `@EnableScheduling` di class main.\\r\\n\\r\\n```java\\r\\n@SpringBootApplication\\r\\n@EnableScheduling // Enabled it\\r\\npublic class PaymentAppBackendApplication {\\r\\n\\r\\n\\tpublic static void main(String[] args) {\\r\\n\\t\\tSpringApplication.run(PaymentAppBackendApplication.class, args);\\r\\n\\t}\\r\\n}\\r\\n```"},{"id":"spring-mvc-eclipse","metadata":{"permalink":"/blog/spring-mvc-eclipse","source":"@site/blog/2022-05-15-spring-mvc-eclipse/index.md","title":"Cara Membuat Project Spring MVC di Eclipse - XML Configuration","description":"Eclipse adalah salah satu IDE favorit untuk membuat aplikasi Java, baik itu aplikasi standard maupun untuk skala Enterprise salah satunya membuat project Spring MVC. Salah satu kelebihannya karena lebih ringan dibanding IDE saingannya yaitu Intelij IDEA.","date":"2022-05-15T00:00:00.000Z","tags":[{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"spring mvc","permalink":"/blog/tags/spring-mvc"},{"inline":true,"label":"eclipse","permalink":"/blog/tags/eclipse"}],"readingTime":2.735,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"spring-mvc-eclipse","title":"Cara Membuat Project Spring MVC di Eclipse - XML Configuration","authors":"topekox","tags":["spring","spring mvc","eclipse"]},"unlisted":false,"prevItem":{"title":"Menggunakan Scheduled/Penjadwalan di Spring Boot","permalink":"/blog/menggunakan-scheduled-spring-boot"},"nextItem":{"title":"Tutorial Membuat Aplikasi Web Spring Boot dan Angular - READ Only","permalink":"/blog/spring-boot-angular"}},"content":"Eclipse adalah salah satu IDE favorit untuk membuat aplikasi Java, baik itu aplikasi standard maupun untuk skala Enterprise salah satunya membuat project Spring MVC. Salah satu kelebihannya karena lebih ringan dibanding IDE saingannya yaitu Intelij IDEA.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nAkan tetapi membuat project Spring MVC mungkin sedikit ribet bagi pemula. Ada beberapa konfigurasi yang diperlukan, berikut tutorial membuat aplikasi Spring MVC di Eclipse.\\r\\n\\r\\n## Gunakan Eclipse versi Enterprise Java and Web\\r\\n\\r\\nKetika mendownload Eclipse halaman default pada [https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/), Eclipse versi ini berisi package untuk Eclipse for Java Developer yang berisi package standard untuk pemrograman Java Standard. Gunakan yang versi Eclipse Enterprise Java and Web di halaman [https://www.eclipse.org/downloads/packages/](https://www.eclipse.org/downloads/packages/). Kenapa menggunakan versi Enterpise Java and Web, karena plugin untuk pemrograman web di Java sudah tersedia dalam package versi Eclipse ini.\\r\\n\\r\\n## Buat Project Dynamic Web Project\\r\\n\\r\\nBuka Eclipse dan buat Project Dynamic Web Project.\\r\\n\\r\\n![Spring MVC Eclipse](1.png)\\r\\n\\r\\nKemudian sesuaikan Project Name:\\r\\n\\r\\n![Spring MVC Eclipse](2.png)\\r\\n\\r\\nStruktur direktori Dynamic Web Project di Eclipse:\\r\\n\\r\\n![Spring MVC Eclipse](3.png)\\r\\n\\r\\nSelanjutnya kita convert projectnya ke Maven Project. Klik kanan pada project *Configure > Convert to Maven Project*.\\r\\n\\r\\n![Spring MVC Eclipse](4.png)\\r\\n\\r\\nStruktur direktori akan berubah menjadi struktur direktori maven.\\r\\n\\r\\n![Spring MVC Eclipse](5.png)\\r\\n\\r\\n### Konfigurasi pom.xml\\r\\n\\r\\nKita masukan dependency Spring MVC stadard, ubah konfigurasi `pom.xml` seperti di bawah ini:\\r\\n\\r\\n```xml title=pom.xml\\r\\n<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\">\\r\\n\\t<modelVersion>4.0.0</modelVersion>\\r\\n\\t<groupId>com.tutorialtimposu</groupId>\\r\\n\\t<artifactId>DemoSpringMVC</artifactId>\\r\\n\\t<version>0.0.1-SNAPSHOT</version>\\r\\n\\t<packaging>war</packaging>\\r\\n\\t<properties>\\r\\n\\t\\t<spring.version>5.3.18</spring.version>\\r\\n\\t</properties>\\r\\n\\r\\n\\t<dependencies>\\r\\n\\t\\t<dependency>\\r\\n\\t\\t\\t<groupId>org.springframework</groupId>\\r\\n\\t\\t\\t<artifactId>spring-context</artifactId>\\r\\n\\t\\t\\t<version>${spring.version}</version>\\r\\n\\t\\t</dependency>\\r\\n\\t\\t<dependency>\\r\\n\\t\\t\\t<groupId>org.springframework</groupId>\\r\\n\\t\\t\\t<artifactId>spring-webmvc</artifactId>\\r\\n\\t\\t\\t<version>${spring.version}</version>\\r\\n\\t\\t</dependency>\\r\\n\\t\\t<dependency>\\r\\n\\t\\t\\t<groupId>org.springframework</groupId>\\r\\n\\t\\t\\t<artifactId>spring-web</artifactId>\\r\\n\\t\\t\\t<version>${spring.version}</version>\\r\\n\\t\\t</dependency>\\r\\n\\t\\t<dependency>\\r\\n\\t\\t\\t<groupId>javax.servlet</groupId>\\r\\n\\t\\t\\t<artifactId>jstl</artifactId>\\r\\n\\t\\t\\t<version>1.2</version>\\r\\n\\t\\t</dependency>\\r\\n\\t\\t<dependency>\\r\\n\\t\\t\\t<groupId>javax.servlet.jsp.jstl</groupId>\\r\\n\\t\\t\\t<artifactId>jstl-api</artifactId>\\r\\n\\t\\t\\t<version>1.2</version>\\r\\n\\t\\t</dependency>\\r\\n\\t</dependencies>\\r\\n\\r\\n\\t<build>\\r\\n\\t\\t<plugins>\\r\\n\\t\\t\\t<plugin>\\r\\n\\t\\t\\t\\t<artifactId>maven-compiler-plugin</artifactId>\\r\\n\\t\\t\\t\\t<version>3.8.1</version>\\r\\n\\t\\t\\t\\t<configuration>\\r\\n\\t\\t\\t\\t\\t<source>17</source>\\r\\n\\t\\t\\t\\t\\t<target>17</target>\\r\\n\\t\\t\\t\\t</configuration>\\r\\n\\t\\t\\t</plugin>\\r\\n\\t\\t\\t<plugin>\\r\\n\\t\\t\\t\\t<artifactId>maven-war-plugin</artifactId>\\r\\n\\t\\t\\t\\t<version>3.2.3</version>\\r\\n\\t\\t\\t</plugin>\\r\\n\\t\\t</plugins>\\r\\n\\t</build>\\r\\n</project>\\r\\n```\\r\\n\\r\\n### Konfigurasi web.xml\\r\\n\\r\\nMasukan konfigurasi `web.xml` pada direktor `/WEB-INF/web.xml` seperti di bawah ini:\\r\\n\\r\\n```xml title=web.xml\\r\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\r\\n<web-app xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\r\\n\\txmlns=\\"http://xmlns.jcp.org/xml/ns/javaee\\"\\r\\n\\txsi:schemaLocation=\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\\"\\r\\n\\tid=\\"WebApp_ID\\" version=\\"3.1\\">\\r\\n\\t<display-name>DemoSpringMVC</display-name>\\r\\n\\t\x3c!-- Spring MVC Configs --\x3e\\r\\n\\r\\n\\t\x3c!-- Step 1: Configure Spring MVC Dispatcher Servlet --\x3e\\r\\n\\t<servlet>\\r\\n\\t\\t<servlet-name>dispatcher</servlet-name>\\r\\n\\t\\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\\r\\n\\t\\t<init-param>\\r\\n\\t\\t\\t<param-name>contextConfigLocation</param-name>\\r\\n\\t\\t\\t<param-value>/WEB-INF/spring-mvc-demo-servlet.xml</param-value>\\r\\n\\t\\t</init-param>\\r\\n\\t\\t<load-on-startup>1</load-on-startup>\\r\\n\\t</servlet>\\r\\n\\r\\n\\t\x3c!-- Step 2: Set up URL mapping for Spring MVC Dispatcher Servlet --\x3e\\r\\n\\t<servlet-mapping>\\r\\n\\t\\t<servlet-name>dispatcher</servlet-name>\\r\\n\\t\\t<url-pattern>/</url-pattern>\\r\\n\\t</servlet-mapping>\\r\\n</web-app>\\r\\n```\\r\\n\\r\\nDari konfigurasi di atas kita harus membuat konfigurasi context nya di `/WEB-INF/spring-mvc-demo-servlet.xml`.\\r\\n\\r\\n```xml title=spring-mvc-demo-servlet.xml\\r\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\r\\n<beans xmlns=\\"http://www.springframework.org/schema/beans\\"\\r\\n\\txmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\r\\n\\txmlns:context=\\"http://www.springframework.org/schema/context\\"\\r\\n\\txmlns:mvc=\\"http://www.springframework.org/schema/mvc\\"\\r\\n\\txsi:schemaLocation=\\"\\r\\n\\t\\thttp://www.springframework.org/schema/beans\\r\\n    \\thttp://www.springframework.org/schema/beans/spring-beans.xsd\\r\\n    \\thttp://www.springframework.org/schema/context\\r\\n    \\thttp://www.springframework.org/schema/context/spring-context.xsd\\r\\n    \\thttp://www.springframework.org/schema/mvc\\r\\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\\">\\r\\n\\r\\n\\t\x3c!-- Step 3: Add support for component scanning --\x3e\\r\\n\\t<context:component-scan\\r\\n\\t\\tbase-package=\\"com.topekox.mvc\\" />\\r\\n\\r\\n\\t\x3c!-- Step 4: Add support for conversion, formatting and validation support --\x3e\\r\\n\\t<mvc:annotation-driven />\\r\\n\\r\\n\\t\x3c!-- Step 5: Define Spring MVC view resolver --\x3e\\r\\n\\t<bean\\r\\n\\t\\tclass=\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\">\\r\\n\\t\\t<property name=\\"prefix\\" value=\\"/WEB-INF/view/\\" />\\r\\n\\t\\t<property name=\\"suffix\\" value=\\".jsp\\" />\\r\\n\\t</bean>\\r\\n\\t\\r\\n</beans>\\r\\n```\\r\\nSesuaikan base package component nya disini saya buat `com.topekox.mvc` dan untuk bagian view nya saya buat di `/WEB-INF/view/` dengan ekstensi `jsp`.\\r\\n\\r\\n### Buat Controller\\r\\n\\r\\nSelanjutnya kita buat controller, tapi sebelumnya kita buat package `com.topekox.mvc`:\\r\\n\\r\\n```java title=HomeController.java\\r\\npackage com.topekox.mvc;\\r\\n\\r\\nimport org.springframework.stereotype.Controller;\\r\\nimport org.springframework.ui.Model;\\r\\nimport org.springframework.web.bind.annotation.RequestMapping;\\r\\n\\r\\n@Controller\\r\\npublic class HomeController {\\r\\n\\t\\r\\n\\t@RequestMapping(name = \\"/\\")\\r\\n\\tpublic String home(Model model) {\\r\\n\\t\\t\\r\\n\\t\\tmodel.addAttribute(\\"name\\", \\"Ucup\\");\\r\\n\\t\\treturn \\"home\\";\\r\\n\\t}\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\n### Buat View\\r\\n\\r\\nBuat file `home.jsp` di direktori `/WEB-INF/view/home.jsp`:\\r\\n\\r\\n```html title=home.jsp\\r\\n<%@ page language=\\"java\\" contentType=\\"text/html; charset=UTF-8\\"\\r\\n    pageEncoding=\\"UTF-8\\"%>\\r\\n<!DOCTYPE html>\\r\\n<html>\\r\\n<head>\\r\\n<meta charset=\\"UTF-8\\">\\r\\n<title>Demo Spring MVC</title>\\r\\n</head>\\r\\n<body>\\r\\n\\t<h2>Hello ${name}</h2>\\r\\n</body>\\r\\n</html>\\r\\n```\\r\\n\\r\\n### Running\\r\\n\\r\\nReview struktur direktori:\\r\\n\\r\\n![Spring MVC Eclipse](6.png)\\r\\n\\r\\nRunning dengan Tomcat klik kanan pada project *Run As > Run on Server* kemudian pilih server tomcat server anda kemudian lihat di browser:\\r\\n\\r\\n![Spring MVC Eclipse](7.png)\\r\\n\\r\\n:::info\\r\\n[Source Code](https://github.com/TutorialTimposu/tutorial-spring-from-blog/tree/main/SpringMVCEclipse)\\r\\n:::"},{"id":"spring-boot-angular","metadata":{"permalink":"/blog/spring-boot-angular","source":"@site/blog/2022-05-07-spring-boot-angular/index.md","title":"Tutorial Membuat Aplikasi Web Spring Boot dan Angular - READ Only","description":"Pada seri tutorial ini kita akan membangun aplikasi Fullstack Spring Boot sebagai backend dan Angular sebagai frontend. Fullstack developer secara garis besar adalah seseorang yang bekerja atau merangkap tugas sebagai back end dan front end developer. Lebih spesifiknya, developer bisa bekerja dengan aplikasi backend seperti Javascript, PHP, Go, Java, Database (backend) dan juga bisa mengkonversi desain ke dalam kode pemrograman seperti HTML, CSS, XML, JSON (frontend).","date":"2022-05-07T00:00:00.000Z","tags":[{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"spring boot","permalink":"/blog/tags/spring-boot"},{"inline":true,"label":"angular","permalink":"/blog/tags/angular"}],"readingTime":6.99,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"spring-boot-angular","title":"Tutorial Membuat Aplikasi Web Spring Boot dan Angular - READ Only","authors":"topekox","tags":["spring","spring boot","angular"]},"unlisted":false,"prevItem":{"title":"Cara Membuat Project Spring MVC di Eclipse - XML Configuration","permalink":"/blog/spring-mvc-eclipse"},"nextItem":{"title":"Daftar Repository Lokal Ubuntu 22.04","permalink":"/blog/repo-lokal-ubuntu-22-04"}},"content":"Pada seri tutorial ini kita akan membangun aplikasi *Fullstack* Spring Boot sebagai *backend* dan Angular sebagai *frontend*. Fullstack developer secara garis besar adalah seseorang yang bekerja atau merangkap tugas sebagai back end dan front end developer. Lebih spesifiknya, developer bisa bekerja dengan aplikasi backend seperti Javascript, PHP, Go, Java, Database (backend) dan juga bisa mengkonversi desain ke dalam kode pemrograman seperti HTML, CSS, XML, JSON (frontend).\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n:::info\\r\\nAplikasi yang akan dibuat hanya untuk menampilkan data READ ONLY, aplikasi ini tidak mendukung Create, Update dan Delete.\\r\\n:::\\r\\n\\r\\n## Teknologi Yang Digunakan\\r\\n\\r\\nAdapun teknologi yang digunakan adalah:\\r\\n\\r\\n1. Spring Boot (backend)\\r\\n2. Angular (frontend)\\r\\n3. MySQL (database)\\r\\n\\r\\n## Pengetahuan yang dibutuhkan\\r\\n\\r\\n* Java Basic\\r\\n* Spring Framework Basic\\r\\n* Angular dasar\\r\\n* Typescript & Javascript dasar\\r\\n* HTML & CSS / Bootstrap\\r\\n\\r\\n## Tools yang digunakan\\r\\n\\r\\nAdapun tools yang digunakan pada tutorial ini:\\r\\n\\r\\n* [OpenJDK 17](https://jdk.java.net/archive/)\\r\\n* [Node Js & npm](https://nodejs.org/en/download/)\\r\\n* Angular 13\\r\\n* [Maven 3.8](https://maven.apache.org/download.cgi)\\r\\n* [MySQL Database](https://www.mysql.com/downloads/)\\r\\n\\r\\nUntuk IDE nya saya menggunakan (bisa menggunakan IDE lain sesuai selera):\\r\\n* Intellij IDEA Community - untuk coding Spring Boot\\r\\n* VS Code - untuk coding Angular\\r\\n\\r\\n## Proses Development\\r\\n\\r\\nAdapun step-by-step proses development:\\r\\n\\r\\n1. Menyiapkan Database\\r\\n2. Membuat Aplikasi Spring Boot untuk Backend\\r\\n\\t* Membuat Entity\\r\\n\\t* Membuat Repository Data Access Object.\\r\\n\\t* Menampilkan data REST.\\r\\n3. Membuat Aplikasi Angular untuk Frontend\\r\\n\\t* Membuat model.\\r\\n\\t* Membuat component.\\r\\n\\t* Membuat service.\\r\\n\\r\\n## Arsitektur Aplikasi\\r\\n\\r\\nGambaran umum desain arsitektur aplikasi yang akan kita buat:\\r\\n\\r\\n![spring boot angular architecture diagram](spring_angular_diagram.png)\\r\\n\\r\\n## Konfigurasi MySQL\\r\\n\\r\\nDisini saya akan membuat database dengan nama `belajar`:\\r\\n\\r\\n```sql\\r\\nCREATE DATABASE belajar;\\r\\n\\r\\nUSE belajar;\\r\\n```\\r\\n\\r\\nKemudian dalam praktek ini kita akan menyiapkan database dengan tabel `person` dan `city` yang akan berelasi one-to-many antara 2 tabel, dengan rancangan relasi seperti gambar di bawah ini.\\r\\n\\r\\n![database relation](db.png)\\r\\n\\r\\nUntuk datanya tidak usah khawatir, saya sudah menyiapkan file dump `sql` nya\\r\\n\\r\\nUntuk tabel `city` :\\r\\n\\r\\n```sql title=\\"Tabel City\\"\\r\\nDROP TABLE IF EXISTS `city`;\\r\\nCREATE TABLE `city` (\\r\\n  `id` int NOT NULL AUTO_INCREMENT,\\r\\n  `city_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,\\r\\n  PRIMARY KEY (`id`),\\r\\n  KEY `course_id_IDX` (`id`) USING BTREE\\r\\n) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\\r\\n\\r\\nLOCK TABLES `city` WRITE;\\r\\n\\r\\nINSERT INTO `city` VALUES (1,\'Jakarta\'),(2,\'Makassar\'),(3,\'Medan\'),(4,\'Surabaya\'),(5,\'Ambon\');\\r\\n\\r\\nUNLOCK TABLES;\\r\\n```\\r\\n\\r\\nUntuk tabel `person` dengan 50 record data:\\r\\n\\r\\n```sql title=\\"Tabel Person\\"\\r\\nDROP TABLE IF EXISTS `person`;\\r\\n\\r\\nCREATE TABLE `person` (\\r\\n  `id` int NOT NULL AUTO_INCREMENT,\\r\\n  `first_name` varchar(100) DEFAULT NULL,\\r\\n  `last_name` varchar(100) DEFAULT NULL,\\r\\n  `email` varchar(100) DEFAULT NULL,\\r\\n  `id_city` int DEFAULT NULL,\\r\\n  PRIMARY KEY (`id`),\\r\\n  KEY `person_FK` (`id_city`),\\r\\n  CONSTRAINT `person_FK` FOREIGN KEY (`id_city`) REFERENCES `city` (`id`)\\r\\n) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\\r\\n\\r\\nLOCK TABLES `person` WRITE;\\r\\n\\r\\nINSERT INTO `person` VALUES (1,\'david\',\'john\',\'david@gmail.com\',1),(2,\'rogers\',\'paul\',\'rogerds@gmail.com\',1),(3,\'maria\',\'sanders\',\'maria@gmail.com\',1),(4,\'morris\',\'miller\',\'morris@gmail.com\',1),(5,\'azwar\',\'anas\',\'azwar@gmail.com\',1),(6,\'daniel\',\'michael\',\'daniel01@gmail.com\',1),(7,\'sanders\',\'paul\',\'sanders45@gmail.com\',1),(8,\'mark\',\'mike\',\'mark55@gmail.com\',1),(9,\'morgan\',\'maria\',\'morgan22@gmail.com\',2),(10,\'paul\',\'miller\',\'paul45@gmail.com\',2),(11,\'david\',\'miller\',\'david33@gmail.com\',2),(12,\'chrishaydon\',\'bell\',\'chrishaydon22@gmail.com\',2),(13,\'michael\',\'brown\',\'112michael@gmail.com\',2),(14,\'morgan\',\'james\',\'222morgan@gmail.com\',2),(15,\'rogers\',\'chrishaydon\',\'rogers34@gmail.com\',2),(16,\'morgan\',\'wright\',\'morgan2232@gmail.com\',2),(17,\'morgan\',\'wright\',\'morgan22223@gmail.com\',2),(18,\'david\',\'ross\',\'david222@gmail.com\',2),(19,\'maria\',\'morgan\',\'maria434@gmail.com\',2),(20,\'mike\',\'bell\',\'mike66@gmail.com\',2),(21,\'miller\',\'michael\',\'miller232@gmail.com\',3),(22,\'ross\',\'rogers\',\'ross56@gmail.com\',3),(23,\'brooks\',\'mike\',\'brooks232@gmail.com\',3),(24,\'miller\',\'daniel\',\'miller444@gmail.com\',3),(25,\'mike\',\'wright\',\'mike333@gmail.com\',3),(26,\'wright\',\'smith\',\'wright3242@gmail.com\',3),(27,\'david\',\'morgan\',\'david111@gmail.com\',3),(28,\'smith\',\'bell\',\'smith66868@gmail.com\',3),(29,\'paul\',\'wright\',\'paul456464@gmail.com\',3),(30,\'michael\',\'james\',\'michael6868@gmail.com\',3),(31,\'michael\',\'sanders\',\'michael55765@gmail.com\',4),(32,\'john\',\'rivera\',\'johnrrr44@gmail.com\',4),(33,\'paul\',\'michael\',\'paul33553@gmail.com\',4),(34,\'ross\',\'mark\',\'ross87989@gmail.com\',4),(35,\'brooks\',\'smith\',\'brooks223322@gmail.com\',4),(36,\'cooper\',\'brown\',\'cooper90909@gmail.com\',4),(37,\'ross\',\'daniel\',\'ross12121@gmail.com\',4),(38,\'cooper\',\'miller\',\'cooper6767@gmail.com\',4),(39,\'jenny\',\'maria\',\'jenny12121@gmail.com\',4),(40,\'paul\',\'rivera\',\'paul46646@gmail.com\',4),(41,\'maria\',\'sanders\',\'maria131313@gmail.com\',5),(42,\'bell\',\'david\',\'bell21242@gmail.com\',5),(43,\'rivera\',\'cooper\',\'rivera574754@gmail.com\',5),(44,\'mark\',\'david\',\'markwffw24@gmail.com\',5),(45,\'paul\',\'cooper\',\'paul56454@gmail.com\',5),(46,\'brooks\',\'david\',\'brooks53545@gmail.com\',5),(47,\'james\',\'maria\',\'james656@gmail.com\',5),(48,\'john\',\'mark\',\'john6786@gmail.com\',5),(49,\'rivera\',\'jenny09\',\'rivera121212@gmail.com\',5),(50,\'chrishaydon\',\'sanders\',\'chrishaydon21232@gmail.com\',5);\\r\\n\\r\\nUNLOCK TABLES;\\r\\n\\r\\n```\\r\\n\\r\\nCek datanya untuk memastikan datanya sudah ada:\\r\\n\\r\\n```sql\\r\\nSELECT * FROM city;\\r\\n\\r\\nSELECT * FROM person;\\r\\n```\\r\\n\\r\\n## Spring Boot Back End\\r\\n\\r\\nDi artikel kita membuat project Spring Boot yang hanya akan membuat aplikasi dengan studi kasus untuk menampilkan data READ ONLY, aplikasi ini tidak mendukung Create, Update dan Delete.\\r\\n\\r\\nKita akan membuat backend API dengan Spring boot yang akan mengenerate:\\r\\n\\r\\n| Method      | URL                   | Keterangan                          |\\r\\n| ----------- | -----------           | ---                                 |\\r\\n| GET         | `/api/users`            | menampilkan data users            |\\r\\n| GET         | `/api/users/:id`        | menampilkan data user berdasarkan **id** |\\r\\n| GET         | `/api/users/search=:keyword`   | menampilkan data user berdasarkan **keyword** |\\r\\n| GET         | `/api/citys/:id`        | menampilkan data user berdasarkan **id_city** |\\r\\n\\r\\nKita akan memanggil data dari database menggunakan Spring Data REST JPA `JpaRepository`, sehingga kita bisa membuat kodingan kita jauh lebih simpel. \\r\\n\\r\\n### Setup Project\\r\\n\\r\\nBuat Project menggunakan [Spring web tool](https://start.spring.io/) atau melalui IDE (Spring Tool Suite, Eclipse, Intellij) untuk membuat Spring Boot project.\\r\\n\\r\\n### Dependency\\r\\n\\r\\nDependency yang digunakan dalam project ini:\\r\\n\\r\\n* Spring REST Repository\\r\\n* Spring Data JPA\\r\\n* MySQL Driver\\r\\n* Lombok\\r\\n\\r\\nStruktur direktori project:\\r\\n\\r\\n![Struktur Project](struktur-project.png)\\r\\n\\r\\nIsi dependency dalam maven file di `pom.xml`\\r\\n\\r\\n```xml title=pom.xml\\r\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\r\\n<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\r\\n  xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\\">\\r\\n  <modelVersion>4.0.0</modelVersion>\\r\\n  <parent>\\r\\n    <groupId>org.springframework.boot</groupId>\\r\\n    <artifactId>spring-boot-starter-parent</artifactId>\\r\\n    <version>2.6.7</version>\\r\\n    <relativePath/> \x3c!-- lookup parent from repository --\x3e\\r\\n  </parent>\\r\\n  <groupId>com.tutorialtimposu</groupId>\\r\\n  <artifactId>springboot-backend</artifactId>\\r\\n  <version>0.0.1-SNAPSHOT</version>\\r\\n  <name>springboot-backend</name>\\r\\n  <description>Spring Boot Backend</description>\\r\\n  <properties>\\r\\n    <java.version>17</java.version>\\r\\n  </properties>\\r\\n  <dependencies>\\r\\n    <dependency>\\r\\n      <groupId>org.springframework.boot</groupId>\\r\\n      <artifactId>spring-boot-starter-data-rest</artifactId>\\r\\n    </dependency>\\r\\n\\r\\n    <dependency>\\r\\n      <groupId>mysql</groupId>\\r\\n      <artifactId>mysql-connector-java</artifactId>\\r\\n      <scope>runtime</scope>\\r\\n    </dependency>\\r\\n    <dependency>\\r\\n      <groupId>org.projectlombok</groupId>\\r\\n      <artifactId>lombok</artifactId>\\r\\n      <optional>true</optional>\\r\\n    </dependency>\\r\\n    <dependency>\\r\\n      <groupId>org.springframework.boot</groupId>\\r\\n      <artifactId>spring-boot-starter-test</artifactId>\\r\\n      <scope>test</scope>\\r\\n    </dependency>\\r\\n  </dependencies>\\r\\n\\r\\n  <build>\\r\\n    <plugins>\\r\\n      <plugin>\\r\\n        <groupId>org.springframework.boot</groupId>\\r\\n        <artifactId>spring-boot-maven-plugin</artifactId>\\r\\n        <configuration>\\r\\n          <excludes>\\r\\n            <exclude>\\r\\n              <groupId>org.projectlombok</groupId>\\r\\n              <artifactId>lombok</artifactId>\\r\\n            </exclude>\\r\\n          </excludes>\\r\\n        </configuration>\\r\\n      </plugin>\\r\\n    </plugins>\\r\\n  </build>\\r\\n\\r\\n</project>\\r\\n```\\r\\n\\r\\n### Konfigurasi File Properties Spring Datasource, JPA dan Hibernate\\r\\n\\r\\nTambahkan line dibawah ini ke dalam file `application.properties` yang berada di folder `src/main/resources`.\\r\\n\\r\\n```properties title=application.properties\\r\\n# jdbc properties\\r\\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\\r\\nspring.datasource.url=jdbc:mysql://localhost:3306/belajar\\r\\nspring.datasource.username=ucup\\r\\nspring.datasource.password=******\\r\\n\\r\\n# hibernate properties\\r\\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\\r\\n\\r\\n# custom base path url\\r\\nspring.data.rest.base-path=/api\\r\\n```\\r\\n\\r\\nSelain konfigurasi ke database kita juga set base-path urlnya ke `/api`.\\r\\n\\r\\n### Membuat Entity / Model\\r\\n\\r\\nKita akan membuat dua entity ke dalam package `entity` berdasarkan tabel yang telah kita buat yaitu tabel `person` dan `city` .\\r\\n\\r\\n```java title=City.java\\r\\npackage com.tutorialtimposu.backend.entity;\\r\\n\\r\\nimport lombok.Data;\\r\\n\\r\\nimport javax.persistence.*;\\r\\nimport java.util.Set;\\r\\n\\r\\n@Entity\\r\\n@Table(name = \\"city\\")\\r\\n@Data\\r\\npublic class City {\\r\\n\\r\\n    @Id\\r\\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\\r\\n    @Column(name = \\"id\\")\\r\\n    private Long id;\\r\\n\\r\\n    @Column(name = \\"city_name\\")\\r\\n    private String cityName;\\r\\n\\r\\n    @OneToMany(cascade = {\\r\\n            CascadeType.DETACH,\\r\\n            CascadeType.MERGE,\\r\\n            CascadeType.REFRESH,\\r\\n            CascadeType.PERSIST,\\r\\n    }, mappedBy = \\"city\\")\\r\\n    private Set<Person> person;\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\n```java title=Person.java\\r\\npackage com.tutorialtimposu.backend.entity;\\r\\n\\r\\nimport lombok.Data;\\r\\n\\r\\nimport javax.persistence.*;\\r\\n\\r\\n@Entity\\r\\n@Table(name = \\"person\\")\\r\\n@Data\\r\\npublic class Person {\\r\\n\\r\\n    @Id\\r\\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\\r\\n    @Column(name = \\"id\\")\\r\\n    private Long id;\\r\\n\\r\\n    @Column(name = \\"first_name\\")\\r\\n    private String firstName;\\r\\n\\r\\n    @Column(name = \\"last_name\\")\\r\\n    private String lastName;\\r\\n\\r\\n    @Column(name = \\"email\\")\\r\\n    private String email;\\r\\n\\r\\n    @ManyToOne(cascade = {\\r\\n            CascadeType.DETACH,\\r\\n            CascadeType.MERGE,\\r\\n            CascadeType.REFRESH,\\r\\n            CascadeType.PERSIST\\r\\n    })\\r\\n    @JoinColumn(name = \\"id_city\\")\\r\\n    private City city;\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nPerhatikan pada bagian `cascade` di situ saya tidak mendefiniskan ke `all` karena kita memiliki 2 tabel yang berelasi dan kita tidak ingin agar jika data dihapus disalah satu tabel maka berpengaruh ke tabel lainnya, makanya saya mendefinisikan `cascade` nya secara manual dengan tidak memasukan `cascade` dengan tipe `CascadeType.REMOVE`.\\r\\n\\r\\n### Membuat Repository\\r\\n\\r\\nKemudian kita akan membuat dua Repository DAO untuk masing-masing entity ke dalam package `dao`.\\r\\n\\r\\n```java title=CityRepository.java\\r\\npackage com.tutorialtimposu.backend.dao;\\r\\n\\r\\nimport com.tutorialtimposu.backend.entity.City;\\r\\nimport org.springframework.data.jpa.repository.JpaRepository;\\r\\n\\r\\npublic interface CityRepository extends JpaRepository<City, Long> {\\r\\n}\\r\\n```\\r\\n\\r\\n```java title=PersonRepository\\r\\npackage com.tutorialtimposu.backend.dao;\\r\\n\\r\\nimport com.tutorialtimposu.backend.entity.Person;\\r\\nimport org.springframework.data.jpa.repository.JpaRepository;\\r\\n\\r\\npublic interface PersonRepository extends JpaRepository<Person, Long> {\\r\\n}\\r\\n```\\r\\n\\r\\nKita hanya membuat dua interface repository di atas menggunakan teknologi \\"Spring Magic\\" yaitu Spring Data REST JPA, dan kita tidak perlu tambahan class lagi, Spring akan secara otomatis membuatkan Service maupun REST Controllernya tanpa kita melakukan coding tambahan.\\r\\n\\r\\nUntuk mengujinya, jalankan aplikasi Spring Bootnya kemudian buka browser lalu ketik base-path url defaultnya ke `http://localhost:8080/api` sesuai konfigurasi properties yang sudah kita buat.\\r\\n\\r\\n![test browser](1.PNG)\\r\\n\\r\\nSpring secara otomatis sudah membuatkan kita REST Controller sendiri, perhatikan pada baris:\\r\\n\\r\\n```json\\r\\n\\"cities\\": {\\r\\n  \\"href\\": \\"http://localhost:8080/api/cities{?page,size,sort}\\",\\r\\n  \\"templated\\": true\\r\\n},\\r\\n\\"persons\\": {\\r\\n  \\"href\\": \\"http://localhost:8080/api/persons{?page,size,sort}\\",\\r\\n  \\"templated\\": true\\r\\n}\\r\\n```\\r\\n\\r\\nDimana sudah membuatkan REST Controller untuk object `City` dengan nama `cities` ke url `http://localhost:8080/api/cities` dan object `Person` dengan nama `persons` ke url `http://localhost:8080/api/persons`. Spring secara otomatis membuatkan nama dari masing-masing URL api tersebut, secara magic.\\r\\n\\r\\nTes Url `http://localhost:8080/api/cities` untuk meload data dari tabel `city` dari database.\\r\\n\\r\\n![test browser](2.PNG)\\r\\n\\r\\nTes Url `http://localhost:8080/api/persons` untuk meload data dari tabel `person` dari database.\\r\\n\\r\\n![test browser](3.PNG)\\r\\n\\r\\n### Membatasi Akses REST\\r\\n\\r\\nSetelah berhasil membuat REST Api kita perlu menambahkan konfigurasi untuk menonaktifkan method `POST`, `PUT` dan `DELETE`.\\r\\n\\r\\nBuat class baru dan simpan ke dalam package `config`:\\r\\n\\r\\n```java title=DataRestConfig.java\\r\\npackage com.tutorialtimposu.backend.config;\\r\\n\\r\\nimport com.tutorialtimposu.backend.entity.City;\\r\\nimport com.tutorialtimposu.backend.entity.Person;\\r\\nimport org.springframework.context.annotation.Configuration;\\r\\nimport org.springframework.data.rest.core.config.RepositoryRestConfiguration;\\r\\nimport org.springframework.data.rest.webmvc.config.RepositoryRestConfigurer;\\r\\nimport org.springframework.http.HttpMethod;\\r\\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\\r\\n\\r\\n@Configuration\\r\\npublic class DataRestConfig implements RepositoryRestConfigurer {\\r\\n\\r\\n    @Override\\r\\n    public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config, CorsRegistry cors) {\\r\\n        // Method yang ingin dinonaktifkan POST, PUT dan DELETE\\r\\n        HttpMethod[] unsupportedAction = {HttpMethod.POST, HttpMethod.PUT, HttpMethod.DELETE};\\r\\n\\r\\n        config.getExposureConfiguration()\\r\\n                .forDomainType(Person.class)\\r\\n                .withItemExposure((metdata, httpMethods) -> httpMethods.disable(unsupportedAction))\\r\\n                .withCollectionExposure((metdata, httpMethods) -> httpMethods.disable(unsupportedAction));\\r\\n\\r\\n        config.getExposureConfiguration()\\r\\n                .forDomainType(City.class)\\r\\n                .withItemExposure((metdata, httpMethods) -> httpMethods.disable(unsupportedAction))\\r\\n                .withCollectionExposure((metdata, httpMethods) -> httpMethods.disable(unsupportedAction));\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nTesting dengan aplikasi REST Client. Disini saya akan testing POST data baru:\\r\\n\\r\\n![test browser](4.PNG)\\r\\n\\r\\nRespon yang dihasilkan `405 - Method Not Allowed` kita tidak bisa mengakses method POST, berarti konfigurasi kita berhasil.\\r\\n\\r\\n## Angular Front End\\r\\n\\r\\n### Membuat project\\r\\n\\r\\nDisini kita akan membuat project Angular dengan Angluar CLI pastikan sudah terinstall terlebih dahulu. Kita akan menggunakan perintah `ng new angular-frontend`.\\r\\n\\r\\n```bash\\r\\nng new angular-frontend\\r\\n\\r\\n? Would you like to add Angular routing? No\\r\\n? Which stylesheet format would you like to use? CSS\\r\\n```\\r\\n\\r\\n### Membuat Class\\r\\n\\r\\n```bash\\r\\nng generate class model/Person\\r\\n\\r\\n```\\r\\n\\r\\n```typescript title=person.ts\\r\\nexport class Person {\\r\\n\\r\\n    id!: number;\\r\\n    firstName!: string;\\r\\n    lastName!: string;\\r\\n    email!: string;\\r\\n}\\r\\n````\\r\\n\\r\\n### Membuat Service\\r\\n\\r\\n```bash\\r\\nng generate service service/person\\r\\n```\\r\\n\\r\\n### Membuat Component\\r\\n\\r\\n```bash\\r\\nng generate component component/person-list\\r\\n```\\r\\n\\r\\n### Menambahkan Bootstrap\\r\\n\\r\\n```bash\\r\\nnpm install bootstrap\\r\\nnpm install @fortawesome/fontawesome-free\\r\\n```\\r\\n\\r\\nlalu tambahkan di file `angular.json` :\\r\\n\\r\\n```json title=angular.json\\r\\n...\\r\\n\\r\\n\\"styles\\": [\\r\\n              \\"src/styles.css\\",\\r\\n              \\"node_modules/bootstrap/dist/css/bootstrap.min.css\\",\\r\\n              \\"node_modules/@fortawesome/fontawesome-free/all.min.css\\"\\r\\n            ],\\r\\n...\\r\\n```"},{"id":"repo-lokal-ubuntu-22-04","metadata":{"permalink":"/blog/repo-lokal-ubuntu-22-04","source":"@site/blog/2022-05-06-repo-lokal-ubuntu-22-04.md","title":"Daftar Repository Lokal Ubuntu 22.04","description":"Repository lokal merupakan solusi, agar proses download/update software Ubuntu 22.04 lebih cepat, karena menggunakan Repository Lokal Indonesia.","date":"2022-05-06T00:00:00.000Z","tags":[{"inline":true,"label":"ubuntu","permalink":"/blog/tags/ubuntu"}],"readingTime":1.47,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"repo-lokal-ubuntu-22-04","title":"Daftar Repository Lokal Ubuntu 22.04","authors":"topekox","tags":["ubuntu"]},"unlisted":false,"prevItem":{"title":"Tutorial Membuat Aplikasi Web Spring Boot dan Angular - READ Only","permalink":"/blog/spring-boot-angular"},"nextItem":{"title":"Tips menangani NullPointerException dengan Java Optional","permalink":"/blog/java-optional"}},"content":"Repository lokal merupakan solusi, agar proses download/update software Ubuntu 22.04 lebih cepat, karena menggunakan Repository Lokal Indonesia.\\r\\n\\r\\nBerikut ini daftar repository lokal Ubuntu 22.04 :\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## kartolo.sby.datautama.net.id\\r\\n\\r\\n```bash\\r\\ndeb http://kartolo.sby.datautama.net.id/ubuntu/ jammy main restricted universe multiverse\\r\\ndeb http://kartolo.sby.datautama.net.id/ubuntu/ jammy-updates main restricted universe multiverse\\r\\ndeb http://kartolo.sby.datautama.net.id/ubuntu/ jammy-security main restricted universe multiverse\\r\\ndeb http://kartolo.sby.datautama.net.id/ubuntu/ jammy-backports main restricted universe multiverse\\r\\ndeb http://kartolo.sby.datautama.net.id/ubuntu/ jammy-proposed main restricted universe multiverse\\r\\n```\\r\\n\\r\\n## kebo.pens.ac.id\\r\\n\\r\\n```bash\\r\\ndeb http://kebo.pens.ac.id/ubuntu/ jammy main restricted universe multiverse\\r\\ndeb http://kebo.pens.ac.id/ubuntu/ jammy-updates main restricted universe multiverse\\r\\ndeb http://kebo.pens.ac.id/ubuntu/ jammy-security main restricted universe multiverse\\r\\ndeb http://kebo.pens.ac.id/ubuntu/ jammy-backports main restricted universe multiverse\\r\\ndeb http://kebo.pens.ac.id/ubuntu/ jammy-proposed main restricted universe multiverse\\r\\n```\\r\\n\\r\\n## ftp.itb.ac.id\\r\\n\\r\\n```bash\\r\\ndeb ftp://ftp.itb.ac.id/pub/ubuntu/ jammy main restricted universe multiverse\\r\\ndeb ftp://ftp.itb.ac.id/pub/ubuntu/ jammy-updates main restricted universe multiverse\\r\\ndeb ftp://ftp.itb.ac.id/pub/ubuntu/ jammy-security main restricted universe multiverse\\r\\ndeb ftp://ftp.itb.ac.id/pub/ubuntu/ jammy-backports main restricted universe multiverse\\r\\ndeb ftp://ftp.itb.ac.id/pub/ubuntu/ jammy-proposed main restricted universe multiverse\\r\\n```\\r\\n\\r\\n## buaya.klas.or.id\\r\\n\\r\\n```bash\\r\\ndeb http://buaya.klas.or.id/ubuntu/ jammy main restricted universe multiverse\\r\\ndeb http://buaya.klas.or.id/ubuntu/ jammy-updates main restricted universe multiverse\\r\\ndeb http://buaya.klas.or.id/ubuntu/ jammy-security main restricted universe multiverse\\r\\ndeb http://buaya.klas.or.id/ubuntu/ jammy-backports main restricted universe multiverse\\r\\ndeb http://buaya.klas.or.id/ubuntu/ jammy-proposed main restricted universe multiverse\\r\\n```\\r\\n\\r\\n## mirror.poliwangi.ac.id\\r\\n\\r\\n```bash\\r\\ndeb http://mirror.poliwangi.ac.id/ubuntu/ jammy main restricted universe multiverse\\r\\ndeb http://mirror.poliwangi.ac.id/ubuntu/ jammy-updates main restricted universe multiverse\\r\\ndeb http://mirror.poliwangi.ac.id/ubuntu/ jammy-security main restricted universe multiverse\\r\\ndeb http://mirror.poliwangi.ac.id/ubuntu/ jammy-backports main restricted universe multiverse\\r\\ndeb http://mirror.poliwangi.ac.id/ubuntu/ jammy-proposed main restricted universe multiverse\\r\\n```\\r\\n\\r\\n## Cara Update\\r\\n\\r\\nSilahkan pilih salah satu repository yang diinginkan, terus masukan kedalam file `sources.list` dengan menggunakan text editor pilihan anda, disini saya menggunakan `nano`:\\r\\n\\r\\n```bash\\r\\nsudo nano /etc/apt/sources.list\\r\\n```\\r\\n\\r\\nSilahkan hapus isi source yang ada atau cukup comment saja dengan menambahkan tanda `#` di setiap awal text pada repository default ubuntu, kemudian paste list repo lokal yang dipilih di bagian bawah.\\r\\n\\r\\nSetelah selesai silahkan update dengan perintah:\\r\\n\\r\\n```bash\\r\\nsudo apt-get update\\r\\n````"},{"id":"java-optional","metadata":{"permalink":"/blog/java-optional","source":"@site/blog/2022-04-26-java-optional.md","title":"Tips menangani NullPointerException dengan Java Optional","description":"Bagi programmer Java sudah wajib hukumnya untuk selalu bertemu dengan NullPointerException, dan ini sebenarnya membuat crash program kita, dan yang jelas kita harus sedikit garuk kepala untuk menangani exception ini. Cara yang paling populer adalah diakali dengan statement kondisi if else. Untuk menangani ini, Java versi 8 mengenalkan fitur baru yaitu class baru bernama Optional yang berada pada package java.util. Class ini sangat membantu sekali untuk menangani null tanpa harus dicek terlebih dahulu dengan statement kondisi if else.","date":"2022-04-26T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"java optional","permalink":"/blog/tags/java-optional"}],"readingTime":3.585,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"java-optional","title":"Tips menangani NullPointerException dengan Java Optional","authors":"topekox","tags":["java","java optional"]},"unlisted":false,"prevItem":{"title":"Daftar Repository Lokal Ubuntu 22.04","permalink":"/blog/repo-lokal-ubuntu-22-04"},"nextItem":{"title":"5 Alasan menggunakan Golang untuk Aplikasi Enterpise","permalink":"/blog/alasan-menggunakan-golang-enterprise"}},"content":"Bagi programmer Java sudah wajib hukumnya untuk selalu bertemu dengan `NullPointerException`, dan ini sebenarnya membuat crash program kita, dan yang jelas kita harus sedikit garuk kepala untuk menangani exception ini. Cara yang paling populer adalah diakali dengan statement kondisi `if else`. Untuk menangani ini, Java versi 8 mengenalkan fitur baru yaitu class baru bernama `Optional` yang berada pada package `java.util`. Class ini sangat membantu sekali untuk menangani `null` tanpa harus dicek terlebih dahulu dengan statement kondisi `if else`. \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nBerikut contoh program yang menghasilkan `NullPointerException` :\\r\\n\\r\\n```java\\r\\npublic class DemoOptional {\\r\\n\\r\\n    public static void main(String[] args) {\\r\\n        \\r\\n        String[] students = new String[20];\\r\\n\\t    String john = students[10].toUpperCase();\\r\\n\\r\\n        System.out.println(\\"Name : \\" + john);        \\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nSekilas program ini tidak ada yang salah, ketika dicompile program ini tidak akan mengalami pesan error, tetapi ketika dieksekusi program ini akan menghasilkan error dikarenakan variable `john` yang dipanggil masih belum ada nilainya alias `null`.\\r\\n\\r\\nKetika program ini di jalankan/run maka akan menghasilkan exception `NullPointerException`, karena memang array students index 10 masih bernilai `null`.\\r\\n\\r\\n```bash\\r\\nException in thread \\"main\\" java.lang.NullPointerException: Cannot invoke \\"String.toUpperCase()\\" because \\"<local1>[10]\\" is null\\r\\n\\tat DemoOptional.main(DemoOptional.java:6)\\r\\n```\\r\\n\\r\\nNah untuk mengatasinya biasanya dibuatkan statement pemilihan `if` untuk menghandle exception tersebut misalnya seperti di bawah ini:\\r\\n\\r\\n```java\\r\\nString[] students = new String[20];\\r\\n\\r\\n// cek nilai apakah null\\r\\nif (students[10] == null) {\\r\\n    students[10] = \\"John Doe\\";\\r\\n}\\r\\n\\r\\nString john = students[10].toUpperCase();\\r\\n\\r\\nSystem.out.println(\\"Name : \\" + john);\\r\\n```\\r\\n\\r\\nOutput:\\r\\n\\r\\n```bash\\r\\nName : JOHN DOE\\r\\n```\\r\\n\\r\\nContoh penggunaan `if` seperti contoh di atas tidaklah salah, tetapi karena seringnya programmer Java mendapatkan permasalahan seperti contoh di atas maka Java 8 membuatkan solusi lain menggunakan class `Optional`. Contoh program di atas dapat disederhanakan menggunakan class Optional seperti contoh sebagai berikut:\\r\\n\\r\\n```java\\r\\nimport java.util.Optional;\\r\\n\\r\\npublic class DemoOptional {\\r\\n    public static void main(String[] args) {\\r\\n        String[] students = new String[20];\\r\\n\\r\\n        String john = Optional.ofNullable(students[10])\\r\\n                .orElse(\\"John Doe\\").toUpperCase();\\r\\n\\r\\n        System.out.println(\\"Name : \\" + john);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nOutput yang dihasilkan akan sama dengan program sebelumnya tetapi cara yang digunakan sedikit berbeda karena menggunakan class `Optional` untuk memeriksa nilai dari `student[10]` yang langsung memberikan nilai ketika bernilai Nullable.\\r\\n\\r\\nBeberapa contoh penggunaan Optional.\\r\\n\\r\\n:::info\\r\\nYang berada dalam blok komentar adalah cara manual\\r\\n:::\\r\\n\\r\\n## Check Null\\r\\n\\r\\n```java\\r\\n//        String name = customer.getName();\\r\\n//        if (name == null) {\\r\\n//            name = \\"\\";\\r\\n//        }\\r\\n    \\r\\n String name = Optional.ofNullable(customer.getName())\\r\\n                .orElse(\\"\\");\\r\\n```\\r\\n\\r\\n## if Logic\\r\\n\\r\\n```java\\r\\n//        Customer customer = repository.findById(\\"id\\");\\r\\n//        if (customer == null) {\\r\\n//            customer = repository.createNew();\\r\\n//        }\\r\\n\\r\\nCustomer customer = Optional.ofNullable(repository.findById(\\"id\\"))\\r\\n                .orElseGet(() -> repository.createNew());\\r\\n```\\r\\n\\r\\n## Operation if Not Null\\r\\n\\r\\n```java\\r\\n//                int id = 2;\\r\\n//                Person person = session.get(Person.class, id);\\r\\n//                if (person != null) {\\r\\n//                  System.out.println(\\"Deleting\\");\\r\\n//                  session.delete(person);\\r\\n//                }\\r\\n\\r\\nint id = 2;\\r\\nOptional<Person> person = Optional.ofNullable(session.get(Person.class, id));\\r\\nperson.ifPresent(value -> session.delete(value));\\r\\n```\\r\\n\\r\\n## Operation to Null Value\\r\\n\\r\\n```java\\r\\n//        String nameUpper = customer.getName();\\r\\n//        if (nameUpper != null) {\\r\\n//            nameUpper = nameUpper.toUpperCase();\\r\\n//        } else {\\r\\n//            nameUpper = \\"\\";\\r\\n//        }\\r\\n\\r\\nString nameUpper = Optional.ofNullable(customer.getName())\\r\\n                .map(value -> value.toUpperCase())\\r\\n                .orElse(\\"\\");\\r\\n```\\r\\n\\r\\n## nested If Checking\\r\\n\\r\\n```java\\r\\n//        String country = \\"Indonesia\\";\\r\\n//        if (customer.getAddress() != null) {\\r\\n//            if (customer.getAddress().getCountry() != null) {\\r\\n//                country = customer.getAddress().getCountry();\\r\\n//            }\\r\\n//        }\\r\\n\\r\\nString country = Optional.ofNullable(customer.getAddress())\\r\\n                .map(address -> address.getCountry())\\r\\n                .orElse(\\"Indonesia\\");\\r\\n\\r\\n```\\r\\n\\r\\n## Check and Throw Exception\\r\\n\\r\\n```java\\r\\n//        String name = customer.getName();\\r\\n//        if (name == null) {\\r\\n//            throw new IllegalArgumentException(\\"Name is null\\");\\r\\n//        }\\r\\n\\r\\nString name = Optional.ofNullable(customer.getName())\\r\\n                .orElseThrow(() -> new IllegalArgumentException(\\"Name is null\\"));\\r\\n```\\r\\n\\r\\n## if Check Do Something\\r\\n\\r\\n```java\\r\\n//        if (customer.getAddress() != null) {\\r\\n//            if (customer.getAddress().getCountry() != null) {\\r\\n//                System.out.println(customer.getAddress().getCountry());\\r\\n//            }\\r\\n//        }\\r\\n\\r\\nOptional.ofNullable(customer.getAddress())\\r\\n                .map(address -> address.getCountry())\\r\\n                .ifPresent(country -> System.out.println(country));\\r\\n\\r\\n```\\r\\n\\r\\n## neested Object\\r\\n\\r\\n```java\\r\\n//        Long cashBalance = 0L;\\r\\n//        if (customer.getWallet() != null) {\\r\\n//            if (customer.getWallet().getBalance() != null) {\\r\\n//                cashBalance = customer.getWallet().getBalance().getCashBalance();\\r\\n//            }\\r\\n//        }\\r\\n\\r\\nLong cashBalance = Optional.ofNullable(customer.getWallet())\\r\\n                .map(wallet -> wallet.getBalance())\\r\\n                .map(balance -> balance.getCashBalance())\\r\\n                .orElse(0L);\\r\\n```\\r\\n\\r\\n## Filter\\r\\n\\r\\n```java\\r\\n//        Long bonus = 0L;\\r\\n//        if (CustomerType.PLATINUM.equals(customer.getType())) {\\r\\n//            if (customer.getWallet() != null) {\\r\\n//                if (customer.getWallet().getBalance() != null) {\\r\\n//                    bonus = customer.getWallet().getBalance().getCashBalance() * 10 / 100;\\r\\n//                }\\r\\n//            }\\r\\n//        }\\r\\n\\r\\nLong bonus = Optional.ofNullable(customer)\\r\\n                .filter(value -> CustomerType.PLATINUM.equals(customer.getType()))\\r\\n                .map(value -> value.getWallet())\\r\\n                .map(wallet -> wallet.getBalance())\\r\\n                .map(balance -> balance.getCashBalance())\\r\\n                .map(cashBalance -> cashBalance * 10 / 100)\\r\\n                .orElse(0L);\\r\\n```\\r\\n\\r\\n:::info\\r\\nDownload [Source Code](https://github.com/TopekoX/java-optional-demo)\\r\\n:::\\r\\n\\r\\n**Referensi** :\\r\\n* [https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html)\\r\\n* [https://www.youtube.com/watch?v=mucDS5Db9go](https://www.youtube.com/watch?v=mucDS5Db9go)"},{"id":"alasan-menggunakan-golang-enterprise","metadata":{"permalink":"/blog/alasan-menggunakan-golang-enterprise","source":"@site/blog/2022-04-09-alasan-menggunakan-go.md","title":"5 Alasan menggunakan Golang untuk Aplikasi Enterpise","description":"Saat ini kita memiliki banyak pilihan bahasa pemrograman untuk membangun aplikasi berskala besar atau enterpise untuk skala perusahaan . Salah satu bahasa pemrograman yang mendapatkan daya tarik yang signifikan dalam beberapa tahun terakhir adalah Go atau Golang. Bahasa ini menawarkan banyak manfaat bagi bisnis dan pengembang aplikasi.","date":"2022-04-09T00:00:00.000Z","tags":[{"inline":true,"label":"golang","permalink":"/blog/tags/golang"},{"inline":true,"label":"enterprise","permalink":"/blog/tags/enterprise"}],"readingTime":2.29,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"alasan-menggunakan-golang-enterprise","title":"5 Alasan menggunakan Golang untuk Aplikasi Enterpise","authors":"topekox","tags":["golang","enterprise"]},"unlisted":false,"prevItem":{"title":"Tips menangani NullPointerException dengan Java Optional","permalink":"/blog/java-optional"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"Saat ini kita memiliki banyak pilihan bahasa pemrograman untuk membangun aplikasi berskala besar atau enterpise untuk skala perusahaan . Salah satu bahasa pemrograman yang mendapatkan daya tarik yang signifikan dalam beberapa tahun terakhir adalah Go atau Golang. Bahasa ini menawarkan banyak manfaat bagi bisnis dan pengembang aplikasi.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n![Golang](/img/golang/golang-logo.png \\"Golang\\")\\r\\n\\r\\nPertanyaan pertama yang muncul ketika perusahaan/startup mulai membangun aplikasi adalah Bahasa pemrograman mana yang harus dipilih?. Pilihannya pun saat ada banyak sekali seperti PHP, C#, Java, Python, JavaScript dll, dengan kelebihan dan kekurangannya sendiri. Bahasa Pemrograman Golang atau Go hadir dengan fitur yang bisa dibilang untuk menambal kekurangan pada bahasa pemrograman yang telah ada.\\r\\n\\r\\n## Mengapa Menggunakan Golang?\\r\\n\\r\\nGo atau Golang adalah bahasa pemrograman open-source yang dirancang oleh Google. Penghargaan untuk pengembangannya diberikan kepada Rob Pike, Robert Griesemer, dan Ken Thompson. Bahasa ini dirancang untuk meningkatkan kecepatan pemrograman dan mengemas yang terbaik dari banyak bahasa populer seperti pengetikan statis C++, dan Kegunaan dan Keterbacaan JavaScript. Secara sintaksis mirip dengan bahasa C tetapi dengan pengetikan struktural, pengumpulan sampah, dan keamanan memori.\\r\\n\\r\\nGolang banyak digunakan di beberapa perusahaan besar seperti Google, IBM, BBC, Apple dan Twitter dll. Melihat keberhasilan bahasa pemrograman tersebut, banyak perusahaan kecil dan menengah dan perusahaan rintisan/startup juga mulai menggunakan Go untuk pengembangan aplikasi.\\r\\n\\r\\n## Keuntungan menggunakan Golang?\\r\\n\\r\\nGolang menawarkan banyak manfaat untuk skala enterprise seperti:\\r\\n\\r\\n1. **Fleksibilitas**: Golang dapat digunakan untuk mengembangkan berbagai aplikasi mulai dari aplikasi sederhana hingga aplikasi yang kompleks pada perusahaan. Tidak hanya mampu memenuhi kebutuhan perusahaan teknologi tetapi juga industri lain seperti keuangan, media dll.\\r\\n\\r\\n2. **Dukungan Lintas Platform**: Perusahaan dapat menggunakan bahasa pemrograman Golang untuk membangun aplikasi lintas platform. Bahasa ini mendukung berbagai platform termasuk Windows, Linux, dan platform seluler.\\r\\n\\r\\n3. **Pengembangan Lebih Cepat**: Perusahaan lebih menyukai bahasa pemrograman yang membantu mereka membangun aplikasi lebih cepat. Golang dapat dikembangkan dengan cepat. Tidak ada Mesin Virtual di lingkungan Go dan kodenya langsung dikompilasi ke kode mesin, ini membuat kompilasi lebih cepat. Dengan kompiler yang memproduksi, hanya satu file yang dapat dieksekusi dan dapat diunggah dari mana saja, eksekusi kode juga menjadi cepat.\\r\\n\\r\\n4. **Skalabilitas**: Pertimbangan utama lainnya untuk tim pengembangan aplikasi perusahaan saat memilih bahasa pemrograman. Golang mendukung skalabilitas. Ini menggunakan fungsi dasar yang disebut *Goroutines* yang dapat berjalan secara independen dan simultan dan mandiri untuk memungkinkan penanganan banyak tugas sekaligus.\\r\\n\\r\\n5. **Kinerja Aplikasi**: Faktor penentu keberhasilan suatu aplikasi adalah kinerjanya. Golang menawarkan kinerja luar biasa dan pengalaman aplikasi yang menyenangkan. Membutuhkan lebih sedikit sumber daya sistem dan berjalan dengan baik pada perangkat yang lebih lama. Karena mengkonsumsi lebih sedikit RAM, aplikasi ini juga stabil dengan lebih sedikit kemungkinan aplikasi utuk crash.\\r\\n\\r\\nSelain 5 alasan di atas mengapa perusahaan harus memilih Golang, alasan lainnya adalah ketersediaan programmer Golang. Bahasanya mudah dipelajari, jadi pengembang aplikasi Anda dapat dengan cepat membangun aplikasi Golang dalamnya."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","source":"@site/blog/2022-03-20-welcome/index.md","title":"Welcome","description":"Selamat Datang di Tutorial Timposu. Website ini dibuat dengan tujuan untuk membagikan tutorial bahasa pemrograman maupun ilmu komputer seputarnya. Website ini dibuat dan di-maintenance oleh Ucup Topekox. Sedangkan latar belakang pembuatan website justru untuk dokumentasi, kenapa dokumentasi?.","date":"2022-03-20T00:00:00.000Z","tags":[{"inline":true,"label":"blog","permalink":"/blog/tags/blog"}],"readingTime":0.87,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["topekox"],"tags":["blog"]},"unlisted":false,"prevItem":{"title":"5 Alasan menggunakan Golang untuk Aplikasi Enterpise","permalink":"/blog/alasan-menggunakan-golang-enterprise"}},"content":"Selamat Datang di Tutorial Timposu. Website ini dibuat dengan tujuan untuk membagikan tutorial bahasa pemrograman maupun ilmu komputer seputarnya. Website ini dibuat dan di-maintenance oleh [Ucup Topekox](https://topekox.github.io/). Sedangkan latar belakang pembuatan website justru untuk dokumentasi, kenapa dokumentasi?. \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nIya benar dokumentasi karena sebenarnya saya dan mungkin hampir semua manusia memiliki sifat pelupa, oleh karena itu saya berinisiatif untuk mendokumentasikan apa yang saya telah pelajari dan ketahui. Selain itu disela-sela waktu saya juga sering mengajar, dan karena biasanya ada saja siswa yang meminta materi langsung saja saya arahkan ke website ini.\\r\\n\\r\\nPenyusunan tutorial pada website ini sedemikianrupa dibuat dengan jalur roadmap yang jelas sehingga teman-teman dapat belajar dengan lebih terarah. Selain itu pada website ini juga terdapat artikel blog yang berisi informasi seputar dunia pemrograman dan lainnya. Apabila ada pertanyaan seputar website ini silahkan hubungi saya di ucup.topekox@gmail.com ataupun di media sosial saya.\\r\\n\\r\\nAkhir kata semoga website ini dapat berguna bagi teman-teman semua, dan apabila ingin mensupport website ini, sudi kiranya teman-teman membagikan/memberitahukan website kepada siapapun yang membutuhkan, agar ilmunya tidak berhenti anda saja.\\r\\n\\r\\n![Quotes](menulis.jpg)"}]}}')}}]);