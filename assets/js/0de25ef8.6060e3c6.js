"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[2690],{6325:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"java-unit-test/depedency-injection-in-test","title":"Depedency Injections di Test","description":"Tidak ada magic di JUnit, sebenarnya fitur TestInfo yang sebelumnya kita bahas adalah bagian dari dependency injection di JUnit","source":"@site/tutorial/java/java-unit-test/15-depedency-injection-in-test.md","sourceDirName":"java-unit-test","slug":"/java-unit-test/depedency-injection-in-test","permalink":"/java/java-unit-test/depedency-injection-in-test","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15,"title":"Depedency Injections di Test"},"sidebar":"tutorialSidebar","previous":{"title":"Informasi Test","permalink":"/java/java-unit-test/test-information"},"next":{"title":"Pewarisan di JUnit Test","permalink":"/java/java-unit-test/pewarisan-test"}}');var r=n(74848),i=n(28453);const s={sidebar_position:15,title:"Depedency Injections di Test"},o=void 0,m={},d=[{value:"Membuat Parameter Resolver",id:"membuat-parameter-resolver",level:2},{value:"Membuat Test Menggunakan Parameter Resolver",id:"membuat-test-menggunakan-parameter-resolver",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Tidak ada magic di JUnit, sebenarnya fitur TestInfo yang sebelumnya kita bahas adalah bagian dari dependency injection di JUnit\r\nDependency Injection sederhananya adalah bagaimana kita bisa memasukkan dependency (object/instance) ke dalam unit test secara otomatis tanpa proses manual. Saat kita menambah parameter di method unit test, sebenarnya kita bisa secara otomatis memasukkan parameter tersebut dengan bantuan ",(0,r.jsx)(t.code,{children:"ParameterResolver"}),". Contohnya ",(0,r.jsx)(t.code,{children:"TestInfo"})," yang kita bahas sebelumya, sebenarnya objectnya dibuat oleh ",(0,r.jsx)(t.code,{children:"TestInfoParameterResolver"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"membuat-parameter-resolver",children:"Membuat Parameter Resolver"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"import java.util.Random;\r\n\r\nimport org.junit.jupiter.api.extension.ExtensionContext;\r\nimport org.junit.jupiter.api.extension.ParameterContext;\r\nimport org.junit.jupiter.api.extension.ParameterResolutionException;\r\nimport org.junit.jupiter.api.extension.ParameterResolver;\r\n\r\npublic class RandomParameterResolver implements ParameterResolver {\r\n\t\r\n\tprivate Random random = new Random();\r\n\r\n\t@Override\r\n\tpublic boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext)\r\n\t\t\tthrows ParameterResolutionException {\r\n\t\treturn parameterContext.getParameter().getType() == Random.class;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext)\r\n\t\t\tthrows ParameterResolutionException {\r\n\t\treturn random;\r\n\t}\r\n\r\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"membuat-test-menggunakan-parameter-resolver",children:"Membuat Test Menggunakan Parameter Resolver"}),"\n",(0,r.jsxs)(t.p,{children:["Untuk menggunakan parameter resolver yang sudah kita buat, kita bisa menggunakan annontation ",(0,r.jsx)(t.code,{children:"@ExtendWith"})," di test class. Jika lebih dari 1 parameter resolver, kita bisa menggunakan ",(0,r.jsx)(t.code,{children:"@Extentions"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"import java.util.Random;\r\n\r\nimport org.junit.jupiter.api.Assertions;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.junit.jupiter.api.extension.Extensions;\r\n\r\nimport com.timposulabs.belajar.Calculator;\r\n\r\n@Extensions({\r\n\t@ExtendWith(RandomParameterResolver.class)\r\n})\r\npublic class RandomTest {\r\n\t\r\n\tprivate Calculator calculator = new Calculator();\r\n\t\r\n\t@Test\r\n\tvoid testRandom(Random random) {\r\n\t\tint a = random.nextInt();\r\n\t\tint b = random.nextInt();\r\n\t\t\r\n\t\tvar result = calculator.add(a, b);\r\n\t\tvar expect = a + b;\r\n\t\t\r\n\t\tAssertions.assertEquals(expect, result);\r\n\t}\r\n\r\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:""})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var a=n(96540);const r={},i=a.createContext(r);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);