"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[1688],{4174:(a,n,e)=>{e.r(n),e.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"kotlin-dasar/string","title":"Type Data String","description":"Tipe data string adalah tipe data yang berisikan data kumpulan karakter atau sederhananya adalah teks. Di kotlin, tipe data string direpresentasikan dengan kata kunci String. Untuk membuat string di kotlin, kita bisa menggunakan \\" (tanda petik 2) untuk teks satu baris, \\"\\"\\" (tanda petik 2 sebanyak 3 kali) untuk teks lebih dari satu baris.","source":"@site/tutorial/kotlin/kotlin-dasar/06-string.md","sourceDirName":"kotlin-dasar","slug":"/kotlin-dasar/string","permalink":"/kotlin/kotlin-dasar/string","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Type Data String"},"sidebar":"tutorialSidebar","previous":{"title":"Type Data Boolean","permalink":"/kotlin/kotlin-dasar/boolean"},"next":{"title":"Variable","permalink":"/kotlin/kotlin-dasar/variable"}}');var t=e(74848),i=e(28453);const s={sidebar_position:6,title:"Type Data String"},l=void 0,d={},o=[{value:"<code>trimMargin()</code>",id:"trimmargin",level:3},{value:"Menggabungkan String",id:"menggabungkan-string",level:2},{value:"String Template",id:"string-template",level:3}];function k(a){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...a.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Tipe data string adalah tipe data yang berisikan data kumpulan karakter atau sederhananya adalah teks. Di kotlin, tipe data string direpresentasikan dengan kata kunci ",(0,t.jsx)(n.code,{children:"String"}),". Untuk membuat string di kotlin, kita bisa menggunakan ",(0,t.jsx)(n.code,{children:'"'})," (tanda petik 2) untuk teks satu baris, ",(0,t.jsx)(n.code,{children:'"""'})," (tanda petik 2 sebanyak 3 kali) untuk teks lebih dari satu baris."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'fun main() {\r\n\r\n    var firstName: String = "Ucup"\r\n    var lastName: String = "Topekox"\r\n    var address: String = """\r\n       Jl. Bangau No. 19\r\n       Kelurahan Cocor Bebek,\r\n       Kecamatan Rawa Bebek,\r\n       Bekasi, Jawa Barat, Indonesia.\r\n    """\r\n\r\n    println(firstName)\r\n    println(lastName)\r\n    println(address)\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Ucup\r\nTopekox\r\n\r\n       Jl. Bangau No. 19\r\n       Kelurahan Cocor Bebek,\r\n       Kecamatan Rawa Bebek,\r\n       Bekasi, Jawa Barat, Indonesia.\n"})}),"\n",(0,t.jsx)(n.h3,{id:"trimmargin",children:(0,t.jsx)(n.code,{children:"trimMargin()"})}),"\n",(0,t.jsxs)(n.p,{children:["Untuk menghapus karakter kosong dalam String multiline dapat menggunakan ",(0,t.jsx)(n.code,{children:"trimMargin()"})," yang secara otomatis akan menghapus karakter kosong sebelum tanda ",(0,t.jsx)(n.code,{children:"|"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'var addressTrim: String = """\r\n       |Jl. Bangau No. 19\r\n       |Kelurahan Cocor Bebek,\r\n       |Kecamatan Rawa Bebek,\r\n       |Bekasi, Jawa Barat, Indonesia.\r\n    """.trimMargin()\r\n\r\nprintln(addressTrim)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Jl. Bangau No. 19\r\nKelurahan Cocor Bebek,\r\nKecamatan Rawa Bebek,\r\nBekasi, Jawa Barat, Indonesia.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Untuk melakukan custom terhadap karakter ",(0,t.jsx)(n.code,{children:"trimMargin()"})," dapat memasukan karakter ke dalam parameter ",(0,t.jsx)(n.code,{children:"trimMargin()"}),", contoh:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'var addressTrimCustom: String = """\r\n       >Jl. Bangau No. 19\r\n       >Kelurahan Cocor Bebek,\r\n       >Kecamatan Rawa Bebek,\r\n       >Bekasi, Jawa Barat, Indonesia.\r\n    """.trimMargin(">")\r\n\r\nprintln(addressTrimCustom)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Jl. Bangau No. 19\r\nKelurahan Cocor Bebek,\r\nKecamatan Rawa Bebek,\r\nBekasi, Jawa Barat, Indonesia.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"menggabungkan-string",children:"Menggabungkan String"}),"\n",(0,t.jsxs)(n.p,{children:["Untuk melakukan penggabungan data String, kita bisa menggunakan operator ",(0,t.jsx)(n.code,{children:"+"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'var fullName: String = firstName + " " + lastName\r\n\r\nprintln(fullName)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"string-template",children:"String Template"}),"\n",(0,t.jsxs)(n.p,{children:["String template adalah kemampuan String di kotlin yang mendukung ekspresi template. Dengan string template, secara otomatis kita bisa mengakses data dari luar teks string. ",(0,t.jsx)(n.code,{children:"$"})," adalah tanda yang digunakan untuk template ekspresi sederhana, seperti mengakses variable lain. ",(0,t.jsx)(n.code,{children:"${ isi ekspresi }"})," adalah tanda yang digunakan untuk template ekspresi yang kompleks."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'var fullNameTemplate: String = "$firstName $lastName"\r\nvar description: String = "$fullNameTemplate length is ${fullNameTemplate.length} character"\n'})})]})}function c(a={}){const{wrapper:n}={...(0,i.R)(),...a.components};return n?(0,t.jsx)(n,{...a,children:(0,t.jsx)(k,{...a})}):k(a)}},28453:(a,n,e)=>{e.d(n,{R:()=>s,x:()=>l});var r=e(96540);const t={},i=r.createContext(t);function s(a){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof a?a(n):{...n,...a}}),[n,a])}function l(a){let n;return n=a.disableParentContext?"function"==typeof a.components?a.components(t):a.components||t:s(a.components),r.createElement(i.Provider,{value:n},a.children)}}}]);