"use strict";(self.webpackChunktimposu=self.webpackChunktimposu||[]).push([[2536],{94962:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});var t=r(41598),a=r(74848),i=r(28453);const o={slug:"spring-boot-crud-rest-mysql-java-record-dto",title:"Step-by-Step Membangun Spring Boot CRUD REST API dengan MySQL dan Java Record DTO",authors:"topekox",tags:["springboot","spring","rest","api","mysql"]},s=void 0,d={authorsImageUrls:[void 0]},c=[{value:"\ud83d\udcaa Syarat",id:"-syarat",level:2},{value:"1\ufe0f\u20e3 Setting Project",id:"1\ufe0f\u20e3-setting-project",level:2},{value:"\ud83d\udccc Dependency",id:"-dependency",level:3},{value:"2\ufe0f\u20e3 Konfigurasi MySQL",id:"2\ufe0f\u20e3-konfigurasi-mysql",level:2},{value:"\u2705 Membuat Database",id:"-membuat-database",level:3},{value:"\u2705 Konfigurasi <code>application.properties</code>",id:"-konfigurasi-applicationproperties",level:3},{value:"3\ufe0f\u20e3 Membuat Entity / Model",id:"3\ufe0f\u20e3-membuat-entity--model",level:2},{value:"4\ufe0f\u20e3 Membuat Repository",id:"4\ufe0f\u20e3-membuat-repository",level:2},{value:"5\ufe0f\u20e3 Membuat Java Record untuk DTO",id:"5\ufe0f\u20e3-membuat-java-record-untuk-dto",level:2},{value:"6\ufe0f\u20e3 Membuat Service Layer",id:"6\ufe0f\u20e3-membuat-service-layer",level:2},{value:"\u2705 Membuat Interface Service",id:"-membuat-interface-service",level:3},{value:"\u2705 Mengimplementasikan Product Service",id:"-mengimplementasikan-product-service",level:3},{value:"7\ufe0f\u20e3 Membuat Controller",id:"7\ufe0f\u20e3-membuat-controller",level:2},{value:"8\ufe0f\u20e3 Running dan Testing API",id:"8\ufe0f\u20e3-running-dan-testing-api",level:2},{value:"\ud83d\udd25 Testing",id:"-testing",level:3},{value:"\u26a1 Handle Exception",id:"-handle-exception",level:2},{value:"1\ufe0f\u20e3 Membuat API Error",id:"1\ufe0f\u20e3-membuat-api-error",level:3},{value:"2\ufe0f\u20e3 Membuat Class NotFoundException",id:"2\ufe0f\u20e3-membuat-class-notfoundexception",level:3},{value:"3\ufe0f\u20e3 Membuat Exception Handler",id:"3\ufe0f\u20e3-membuat-exception-handler",level:3},{value:"4\ufe0f\u20e3 Update Service Layer",id:"4\ufe0f\u20e3-update-service-layer",level:3},{value:"\ud83d\udd16 Kesimpulan",id:"-kesimpulan",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Pada tutorial ini, kita akan membuat aplikasi Spring Boot CRUD (Create, Read, Update, Delete) menggunakan MySQL sebagai database. Kita akan menggunakan Java record sebagai DTO (Data Transfer Object) untuk mentransfer data antara client dan server."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.strong,{children:["Baca Juga: ",(0,a.jsx)(n.a,{href:"/blog/spring-boot-arsitektur-controller-service-repository-database-flow",children:"Arsitektur Spring Boot - Controller, Service, Repository dan Database"})]})}),"\n"]}),"\n",(0,a.jsx)("img",{src:"/img/general/Spring-boot-diagram1.svg"}),"\n",(0,a.jsx)(n.h2,{id:"-syarat",children:"\ud83d\udcaa Syarat"}),"\n",(0,a.jsx)(n.p,{children:"Pada tutorial kali ini kita menggunakan:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\u2714\ufe0f Java Development Kit (JDK) 21 atau yang terbaru."}),"\n",(0,a.jsx)(n.li,{children:"\u2714\ufe0f Apache Maven (Project Manajemen)."}),"\n",(0,a.jsx)(n.li,{children:"\u2714\ufe0f MySQL (Database)."}),"\n",(0,a.jsx)(n.li,{children:"\u2714\ufe0f IDE (Intellij IDEA, Eclipse, Netbeans atau VS Code)."}),"\n",(0,a.jsx)(n.li,{children:"\u2714\ufe0f Postman atau cURL (test API)."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"1\ufe0f\u20e3-setting-project",children:"1\ufe0f\u20e3 Setting Project"}),"\n",(0,a.jsxs)(n.p,{children:["Buat project Spring Boot di ",(0,a.jsx)(n.a,{href:"https://start.spring.io/",children:"Spring Initializr"})," dengan dependency:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\u2714\ufe0f ",(0,a.jsx)(n.strong,{children:"Spring Web"}),": untuk membangun RESTful web service."]}),"\n",(0,a.jsxs)(n.li,{children:["\u2714\ufe0f ",(0,a.jsx)(n.strong,{children:"Spring Data JPA"}),": untuk berinteraksi dengan database menggunakan JPA (Java Persistence API)."]}),"\n",(0,a.jsxs)(n.li,{children:["\u2714\ufe0f ",(0,a.jsx)(n.strong,{children:"MySQL Driver"}),": untuk menghubungkan Spring Boot dengan database MySQL."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"-dependency",children:"\ud83d\udccc Dependency"}),"\n",(0,a.jsxs)(n.p,{children:["Dependency pada ",(0,a.jsx)(n.code,{children:"pom.xml"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:"\x3c!-- Spring Data JPA--\x3e\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n\r\n\x3c!-- Spring Web--\x3e\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n\r\n\x3c!-- MySQL Driver--\x3e\r\n<dependency>\r\n    <groupId>com.mysql</groupId>\r\n    <artifactId>mysql-connector-j</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"2\ufe0f\u20e3-konfigurasi-mysql",children:"2\ufe0f\u20e3 Konfigurasi MySQL"}),"\n",(0,a.jsx)(n.h3,{id:"-membuat-database",children:"\u2705 Membuat Database"}),"\n",(0,a.jsx)(n.p,{children:"Buat database:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE DATABASE spring_boot_app;\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"-konfigurasi-applicationproperties",children:["\u2705 Konfigurasi ",(0,a.jsx)(n.code,{children:"application.properties"})]}),"\n",(0,a.jsxs)(n.p,{children:["Pada file ",(0,a.jsx)(n.code,{children:"src/main/resources/application.properties"})," kita perlu melakukan konfigurasi agar Spring Boot terhubung ke database MySQL:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"spring.datasource.url=jdbc:mysql://localhost:3306/spring_boot_app\r\nspring.datasource.driverClassName=com.mysql.cj.jdbc.Driver\r\nspring.datasource.username=root\r\nspring.datasource.password=yourpassword\r\nspring.jpa.show-sql=true\r\nspring.jpa.hibernate.ddl-auto=update\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"spring.datasource.url"}),": URL JDBC untuk menghubungkan ke database MySQL."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver"}),": Class driver MySQL."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"spring.datasource.username"})," dan ",(0,a.jsx)(n.code,{children:"password"}),": Kredensial yang digunakan untuk terhubung ke database."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"spring.jpa.hibernate.ddl-auto=update"}),": Memastikan Hibernate secara otomatis membuat atau memperbarui schema database berdasarkan mapping entity yang dibuat."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"spring.jpa.show-sql=true"}),": Mengaktifkan pencatatan queri SQL ke console log, berguna untuk debugging."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"3\ufe0f\u20e3-membuat-entity--model",children:"3\ufe0f\u20e3 Membuat Entity / Model"}),"\n",(0,a.jsxs)(n.p,{children:["Membuat Entity ",(0,a.jsx)(n.code,{children:"Product"})," dalam format POJO, untuk mewakili tabel ",(0,a.jsx)(n.code,{children:"product"})," dalam database:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'package com.timposulabs.demo_spring_boot_rest_api.model;\r\n\r\nimport jakarta.persistence.*;\r\n\r\nimport java.math.BigDecimal;\r\n\r\n@Entity\r\n@Table(name = "product")\r\npublic class Product {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    private String description;\r\n\r\n    private BigDecimal price;\r\n\r\n    public Product() {\r\n    }\r\n\r\n    public Product(Long id, String name, String description, BigDecimal price) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.price = price;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public BigDecimal getPrice() {\r\n        return price;\r\n    }\r\n\r\n    public void setPrice(BigDecimal price) {\r\n        this.price = price;\r\n    }\r\n}\r\n\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Class entity yang dibuat adalah representasi product, dengan field ",(0,a.jsx)(n.code,{children:"id"}),", ",(0,a.jsx)(n.code,{children:"name"}),", ",(0,a.jsx)(n.code,{children:"description"})," dan ",(0,a.jsx)(n.code,{children:"price"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"4\ufe0f\u20e3-membuat-repository",children:"4\ufe0f\u20e3 Membuat Repository"}),"\n",(0,a.jsx)(n.p,{children:"Membuat interface Product Repository:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"package com.timposulabs.demo_spring_boot_rest_api.repository;\r\n\r\nimport com.timposulabs.demo_spring_boot_rest_api.model.Product;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface ProductRepository extends JpaRepository<Product, Long> {\r\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"JpaRepository"})," Menyediakan semua operasi CRUD yang diperlukan seperti ",(0,a.jsx)(n.code,{children:"save()"}),", ",(0,a.jsx)(n.code,{children:"findAll()"}),", ",(0,a.jsx)(n.code,{children:"findById()"}),", ",(0,a.jsx)(n.code,{children:"deleteById()"})," dan tanpa perlu menulisnya sendiri."]}),"\n",(0,a.jsx)(n.h2,{id:"5\ufe0f\u20e3-membuat-java-record-untuk-dto",children:"5\ufe0f\u20e3 Membuat Java Record untuk DTO"}),"\n",(0,a.jsx)(n.p,{children:"Java Record adalah class khusus di Java yang berguna untuk mengurangi kode boilerplate, dengan secara otomatis menghasilkan constructor, getter, setter. Ini ideal untuk DTO yang bertugas untuk membawa data antara server dan client."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"package com.timposulabs.demo_spring_boot_rest_api.dto;\r\n\r\nimport java.math.BigDecimal;\r\n\r\npublic record ProductDTO(Long id, String name, String description, BigDecimal price) {\r\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"6\ufe0f\u20e3-membuat-service-layer",children:"6\ufe0f\u20e3 Membuat Service Layer"}),"\n",(0,a.jsx)(n.h3,{id:"-membuat-interface-service",children:"\u2705 Membuat Interface Service"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"package com.timposulabs.demo_spring_boot_rest_api.service;\r\n\r\nimport com.timposulabs.demo_spring_boot_rest_api.dto.ProductDTO;\r\n\r\nimport java.util.List;\r\n\r\npublic interface ProductService {\r\n    List<ProductDTO> findAll();\r\n    ProductDTO findById(Long id);\r\n    ProductDTO save(ProductDTO productDTO);\r\n    ProductDTO update(Long id, ProductDTO productDTO);\r\n    void delete(Long id);\r\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"-mengimplementasikan-product-service",children:"\u2705 Mengimplementasikan Product Service"}),"\n",(0,a.jsx)(n.p,{children:"Dalam implementasi service, kita akan menambahkan logic konversi antara Product (entity) dan EntityDTO (DTO):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'package com.timposulabs.demo_spring_boot_rest_api.service;\r\n\r\nimport com.timposulabs.demo_spring_boot_rest_api.dto.ProductDTO;\r\nimport com.timposulabs.demo_spring_boot_rest_api.model.Product;\r\nimport com.timposulabs.demo_spring_boot_rest_api.repository.ProductRepository;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\npublic class ProductServiceImpl implements ProductService{\r\n\r\n    private final ProductRepository productRepository;\r\n\r\n    public ProductServiceImpl(ProductRepository productRepository) {\r\n        this.productRepository = productRepository;\r\n    }\r\n\r\n    @Override\r\n    public List<ProductDTO> findAll() {\r\n        return productRepository.findAll().stream()\r\n                .map(this::convertToDTO)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public ProductDTO findById(Long id) {\r\n        return productRepository.findById(id)\r\n                .map(this::convertToDTO)\r\n                .orElseThrow(() -> new RuntimeException("ID Not Found"));\r\n    }\r\n\r\n    @Override\r\n    public ProductDTO save(ProductDTO productDTO) {\r\n        Product product = convertToEntity(productDTO);\r\n        return convertToDTO(productRepository.save(product));\r\n    }\r\n\r\n    @Override\r\n    public ProductDTO update(Long id, ProductDTO productDTO) {\r\n        Product product = productRepository.findById(id)\r\n                .orElseThrow(() -> new RuntimeException("ID Not Found"));\r\n        product.setName(productDTO.name());\r\n        product.setDescription(productDTO.description());\r\n        product.setPrice(productDTO.price());\r\n        return convertToDTO(productRepository.save(product));\r\n    }\r\n\r\n    @Override\r\n    public void delete(Long id) {\r\n        Product product = productRepository.findById(id)\r\n                .orElseThrow(() -> new NotFoundException("ID Not Found"));\r\n        productRepository.delete(product);\r\n    }\r\n\r\n    // Conversion between DTO to Entity\r\n    private ProductDTO convertToDTO(Product product) {\r\n        return new ProductDTO(product.getId(), product.getName(), product.getDescription(), product.getPrice());\r\n    }\r\n\r\n    private Product convertToEntity(ProductDTO productDTO) {\r\n        Product product = new Product();\r\n        product.setName(productDTO.name());\r\n        product.setDescription(productDTO.description());\r\n        product.setPrice(productDTO.price());\r\n        return product;\r\n    }\r\n}\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Konversi logic (antara Entitas dan DTO) disimpan di layer service untuk menjaga controller tetap bersih dan hanya berfokus pada penanganan request HTTP."}),"\n",(0,a.jsxs)(n.li,{children:["Method ",(0,a.jsx)(n.code,{children:"convertToDTO"})," ini mengonversi entity ",(0,a.jsx)(n.strong,{children:"Product"})," menjadi ",(0,a.jsx)(n.strong,{children:"ProductDTO"}),", begitupun sebaliknya untuk method ",(0,a.jsx)(n.code,{children:"convertToEntity"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"7\ufe0f\u20e3-membuat-controller",children:"7\ufe0f\u20e3 Membuat Controller"}),"\n",(0,a.jsx)(n.p,{children:"Dalam layer ini, kita akan membuat Controller untuk REST API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'package com.timposulabs.demo_spring_boot_rest_api.controller;\r\n\r\nimport com.timposulabs.demo_spring_boot_rest_api.dto.ProductDTO;\r\nimport com.timposulabs.demo_spring_boot_rest_api.service.ProductService;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@Controller\r\n@RequestMapping("/api/product")\r\npublic class ProductController {\r\n\r\n    private final ProductService productService;\r\n\r\n    public ProductController(ProductService productService) {\r\n        this.productService = productService;\r\n    }\r\n\r\n    @GetMapping\r\n    public ResponseEntity<List<ProductDTO>> getAllProduct() {\r\n        return ResponseEntity.ok(productService.findAll());\r\n    }\r\n\r\n    @GetMapping("/{id}")\r\n    public ResponseEntity<ProductDTO> getProductById(@PathVariable Long id) {\r\n        return ResponseEntity.ok(productService.findById(id));\r\n    }\r\n\r\n    @PostMapping\r\n    public ResponseEntity<ProductDTO> createProduct(@RequestBody ProductDTO productDTO) {\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(productService.save(productDTO));\r\n    }\r\n\r\n    @PutMapping("/{id}")\r\n    public ResponseEntity<ProductDTO> updateProduct(@PathVariable Long id, @RequestBody ProductDTO productDTO) {\r\n        return ResponseEntity.ok(productService.update(id, productDTO));\r\n    }\r\n\r\n    @DeleteMapping("/{id}")\r\n    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {\r\n        productService.delete(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n}\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"GET, POST, PUT, dan DELETE"})," HTTP adalah method yang digunakan untuk CRUD operations."]}),"\n",(0,a.jsx)(n.li,{children:"Controller tidak memiliki bussines logic. Dia hanya berfungsi untuk mengatur request ke layer Service dan memberikan response ke Client. Ini membuat kode lebih clean dan menjadi mudah untuk dimaintain."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"8\ufe0f\u20e3-running-dan-testing-api",children:"8\ufe0f\u20e3 Running dan Testing API"}),"\n",(0,a.jsx)(n.p,{children:"Jalankan aplikasi dan lakukan pengujian dari client bisa menggunakan Postman atau cURL."}),"\n",(0,a.jsx)(n.h3,{id:"-testing",children:"\ud83d\udd25 Testing"}),"\n",(0,a.jsxs)(n.p,{children:["\u2705 ",(0,a.jsx)(n.strong,{children:"GET"})," all product:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["URL: ",(0,a.jsx)(n.code,{children:"http://localhost:8080/api/product"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["\u2705 ",(0,a.jsx)(n.strong,{children:"GET"})," product by ID:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["URL: ",(0,a.jsx)(n.code,{children:"http://localhost:8080/api/product/{id}"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["\u2705 ",(0,a.jsx)(n.strong,{children:"POST"})," membuat product baru:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["URL: ",(0,a.jsx)(n.code,{children:"http://localhost:8080/api/product"})]}),"\n",(0,a.jsx)(n.li,{children:"Body:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\r\n  "name" : "Macbook Pro",\r\n  "description" : "New Macbook 2025",\r\n  "price" : 2500000\r\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["\u2705 ",(0,a.jsx)(n.strong,{children:"PUT"})," update product by ID:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["URL: ",(0,a.jsx)(n.code,{children:"http://localhost:8080/api/product/{id}"})]}),"\n",(0,a.jsx)(n.li,{children:"Body:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\r\n  "name" : "Macbook Air",\r\n  "description" : "New Macbook Air 2025",\r\n  "price" : 1500000\r\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["\u2705 ",(0,a.jsx)(n.strong,{children:"DELETE"})," menghapus data product by ID:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["URL: ",(0,a.jsx)(n.code,{children:"http://localhost:8080/api/product/{id}"})]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-handle-exception",children:"\u26a1 Handle Exception"}),"\n",(0,a.jsxs)(n.p,{children:["Dari aplikasi di atas yang sudah dibuat, yang diperlu ditambakan adalah handle Exception. Dimana pada aplikasi di atas masih terdapat Runtime Exception apabila kita mencari data yang tidak terdapat ID nya, yang mana akan menghasilkan HTTP status ",(0,a.jsx)(n.code,{children:"500"})," atau Internal Server Error yang merupakan pesan error yang keliru karena harusnya HTTP status yang benar adalah ",(0,a.jsx)(n.code,{children:"NOT_FOUND"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"1\ufe0f\u20e3-membuat-api-error",children:"1\ufe0f\u20e3 Membuat API Error"}),"\n",(0,a.jsx)(n.p,{children:"Kita akan membuat standard response API seperti berikut:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\r\n  "error": "ID Not Found",\r\n  "path": "/api/product/1",\r\n  "status": 404,\r\n  "timestamp": "2025-03-16T12:40:42.311569409"\r\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Penjelasan:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"error"})," : Keterangan Error."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"path"})," : URL Request API penyebab error."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"status"})," : Kode HTTP status."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"timestamp"})," : Keterangan waktu error dalam format timestamp."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Kita akan mengikuti format response API di atas dengan membuat Java Record:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"package com.timposulabs.demo_spring_boot_rest_api.exception;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\npublic record ApiError(\r\n        String error,\r\n        String path,\r\n        int status,\r\n        LocalDateTime timestamp) {\r\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2\ufe0f\u20e3-membuat-class-notfoundexception",children:"2\ufe0f\u20e3 Membuat Class NotFoundException"}),"\n",(0,a.jsxs)(n.p,{children:["Selanjutnya membuat custom class ",(0,a.jsx)(n.code,{children:"NotFoundException"})," extends dari ",(0,a.jsx)(n.code,{children:"RuntimeException"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"package com.timposulabs.demo_spring_boot_rest_api.exception;\r\n\r\npublic class NotFoundException extends RuntimeException {\r\n    public NotFoundException(String message) {\r\n        super(message);\r\n    }\r\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3\ufe0f\u20e3-membuat-exception-handler",children:"3\ufe0f\u20e3 Membuat Exception Handler"}),"\n",(0,a.jsxs)(n.p,{children:["Selanjutnya membuat Exception Handler yang menggunakan annotation ",(0,a.jsx)(n.code,{children:"@ControllerAdvice"}),", yang mana Spring akan menjalankan Advice terlebih dahulu untuk menangkap exception yang ada. Maka dari itu semua class exception yang ada pada ",(0,a.jsx)(n.code,{children:"ExceptionHandler"})," akan dihandle dalam class ini, dalam kasus ini exception ",(0,a.jsx)(n.code,{children:"NotFoundException"})," yang telah kita buat sebelumnya akan dihandle disini."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"package com.timposulabs.demo_spring_boot_rest_api.exception;\r\n\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.ControllerAdvice;\r\nimport org.springframework.web.bind.annotation.ExceptionHandler;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\n@ControllerAdvice\r\npublic class GlobalExceptionHandler {\r\n\r\n    @ExceptionHandler(NotFoundException.class)\r\n    public ResponseEntity<ApiError> handleNotFoundException(NotFoundException ex, HttpServletRequest request) {\r\n        ApiError apiError = new ApiError(\r\n                ex.getMessage(),\r\n                request.getRequestURI(),\r\n                HttpStatus.NOT_FOUND.value(),\r\n                LocalDateTime.now()\r\n        );\r\n        return new ResponseEntity<>(apiError, HttpStatus.NOT_FOUND);\r\n    }\r\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"\ud83d\udca1 Kita dapat menambahkan class Exception lain dalam class ini untuk meng-handle exception-exception lainnya."}),"\n",(0,a.jsx)(n.h3,{id:"4\ufe0f\u20e3-update-service-layer",children:"4\ufe0f\u20e3 Update Service Layer"}),"\n",(0,a.jsxs)(n.p,{children:["Selanjutnya kita akan mengupdate Service dengan mengubah ",(0,a.jsx)(n.code,{children:"RuntimeException"})," menjadi ",(0,a.jsx)(n.code,{children:"NotFoundException"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Override\r\npublic ProductDTO findById(Long id) {\r\n    return productRepository.findById(id)\r\n            .map(this::convertToDTO)\r\n            .orElseThrow(() -> new NotFoundException("ID Not Found"));\r\n}\r\n\r\n@Override\r\npublic ProductDTO update(Long id, ProductDTO productDTO) {\r\n    Product product = productRepository.findById(id)\r\n            .orElseThrow(() -> new NotFoundException("ID Not Found"));\r\n    product.setName(productDTO.name());\r\n    product.setDescription(productDTO.description());\r\n    product.setPrice(productDTO.price());\r\n    return convertToDTO(productRepository.save(product));\r\n}\r\n\r\n @Override\r\npublic void delete(Long id) {\r\n    Product product = productRepository.findById(id)\r\n            .orElseThrow(() -> new NotFoundException("ID Not Found"));\r\n    productRepository.delete(product);\r\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"-kesimpulan",children:"\ud83d\udd16 Kesimpulan"}),"\n",(0,a.jsx)(n.p,{children:"Kita sudah membangun aplikasi Spring Boot CRUD REST API dengan MySQL. Kita mengikuti best practice dengan menggunakan Java Record sebagai DTO dan menjaga logic konversi antara Entity dan DTO di layer Service. Dengan memisahkan logic konversi ke dalam layer Service, kita mempertahankan basis kode yang clean dan terstruktur dengan baik yang akan lebih mudah dimaintain dan diperluas/scalability di masa mendatang."}),"\n",(0,a.jsx)(n.p,{children:"Selain itu kita juga sudah mengimplementasikan Exception Handle yang mana kita mengkustom sendiri exception sesuai kebutuhan."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var t=r(96540);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},41598:e=>{e.exports=JSON.parse('{"permalink":"/blog/spring-boot-crud-rest-mysql-java-record-dto","source":"@site/blog/2025-03-16-spring-boot-crud-rest-mysql-java-record.md","title":"Step-by-Step Membangun Spring Boot CRUD REST API dengan MySQL dan Java Record DTO","description":"Pada tutorial ini, kita akan membuat aplikasi Spring Boot CRUD (Create, Read, Update, Delete) menggunakan MySQL sebagai database. Kita akan menggunakan Java record sebagai DTO (Data Transfer Object) untuk mentransfer data antara client dan server.","date":"2025-03-16T00:00:00.000Z","tags":[{"inline":true,"label":"springboot","permalink":"/blog/tags/springboot"},{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"rest","permalink":"/blog/tags/rest"},{"inline":true,"label":"api","permalink":"/blog/tags/api"},{"inline":true,"label":"mysql","permalink":"/blog/tags/mysql"}],"readingTime":7.305,"hasTruncateMarker":true,"authors":[{"name":"Ucup TopekoX","title":"TimposuLabs creator","imageURL":"https://topekox.github.io/assets/images/avatar.jpeg","key":"topekox","page":null}],"frontMatter":{"slug":"spring-boot-crud-rest-mysql-java-record-dto","title":"Step-by-Step Membangun Spring Boot CRUD REST API dengan MySQL dan Java Record DTO","authors":"topekox","tags":["springboot","spring","rest","api","mysql"]},"unlisted":false,"prevItem":{"title":"Spring Boot CRUD REST API Java Record DTO + Mapper dengan Mapstruct","permalink":"/blog/spring-boot-crud-rest-dto-mapstruct"},"nextItem":{"title":"Arsitektur Spring Boot - Controller, Service, Repository dan Database","permalink":"/blog/spring-boot-arsitektur-controller-service-repository-database-flow"}}')}}]);